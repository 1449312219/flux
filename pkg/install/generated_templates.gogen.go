// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 7264,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x6d\x6f\x1b\x37\xf2\x7f\xef\x4f\x31\x50\xfe\x40\x62\x40\x5a\xd9\x75\xdb\xff\x61\x7b\x2a\x2e\xcd\x83\x9b\x4b\x93\x1a\x76\x72\x87\xbe\xaa\x29\xee\x48\x4b\x88\x4b\xee\x71\xb8\x52\x05\xa1\xdf\xfd\x30\xe4\x3e\x70\x65\xd9\x29\xf2\xee\xf2\x22\xb6\xc9\xe1\x70\x9e\xe7\x37\xdc\xd9\x6c\x76\x26\x6a\xf5\x2f\x74\xa4\xac\xc9\x41\xd4\x35\xcd\xb7\x97\x67\x1b\x65\x8a\x1c\x5e\x63\xad\xed\xbe\x42\xe3\xcf\x2a\xf4\xa2\x10\x5e\xe4\x67\x00\x46\x54\x98\xc3\x4a\x37\x7f\x1c\x0e\xa0\x56\x90\x7d\x14\x15\x52\x2d\x24\xc2\x9f\x7f\xb6\xfb\xe1\xcf\x1c\x0e\x87\xf1\xee\xe1\x00\x68\x0a\x26\xa3\x1a\x25\x33\x73\x58\x6b\x25\x05\xe5\x70\x79\x06\x40\xa8\x51\x7a\xeb\x78\x07\xa0\x12\x5e\x96\xbf\x88\x25\x6a\x8a\x0b\xe9\xdd\x4c\xed\x9d\xf0\xb8\xde\xc7\x4d\xbf\xaf\x31\x87\x5b\x94\x0e\x85\xc7\x33\x00\x8f\x55\xad\x85\xc7\x96\x59\xa2\x01\xff\x13\xc6\x58\x2f\xbc\xb2\xa6\x67\x0e\x50\x3b\x5b\xa1\x2f\xb1\xa1\x4c\xd9\x79\x6d\x9d\xcf\x61\x72\x75\x71\x75\x39\x81\x67\xe0\x51\xeb\x84\x02\xbc\x05\x92\x4e\xd4\x08\xf3\x0a\xbd\x53\x92\x58\xb9\xda\x2a\xe3\x9f\x13\xf0\xe1\xac\x65\xac\x47\x3a\x1c\x69\x01\xd0\xd9\x22\x6c\xd9\x02\xef\x46\x56\xe0\x7f\x4b\xf4\x22\xdb\x34\x4b\x74\x06\x3d\x06\xe1\x2c\xe5\xa0\x95\x69\x59\xb0\xe9\xdc\x56\x49\x7c\x29\xa5\x6d\x8c\xff\x38\xbe\x01\x60\x6b\x75\x53\x61\x2f\xc3\xac\x95\x61\xad\xfc\x6c\x83\xfb\xfe\x22\x62\xf3\xf9\xe1\xe2\x6e\x65\xe0\x37\xe3\x23\x45\x88\x8c\x84\xaa\xc0\x95\x68\xb4\xff\x60\x0b\xcc\xe1\xe2\xdb\x8b\x0b\x78\x06\xbb\x12\x0d\x54\x2c\x0d\x16\xe0\x50\x14\x33\x6b\xf4\x7e\x0a\x3b\x84\x9d\x35\xcf\x3d\x2c\x11\xc4\x52\x23\x1b\x52\x96\x95\x2d\xce\x5a\x86\xcf\xe0\x53\xa9\x08\x14\x81\x00\x5f\xd5\x2b\x82\x86\xb0\x80\x95\x75\xb0\x46\x83\x4e\x78\x65\xd6\x70\x77\xf7\x33\x6c\x70\x4f\x19\xbc\x33\xf0\xfe\x6f\x04\x3f\x2e\xe0\x32\xbb\xbc\x98\xf6\x5c\xba\xbb\xa3\x0a\x04\xc2\x61\x2a\x07\x59\x16\xc5\x20\x16\x20\x80\xb0\x16\x1c\x4d\xad\xa1\x60\x87\x3d\x1b\x29\x0c\xec\x9c\xf2\x2c\x68\x76\xda\x7e\x6b\x34\xbd\x31\xb0\xaa\xfd\xfe\xb5\x72\xa9\x11\x2b\x2c\x54\x53\xe5\xf0\x01\x2b\xeb\xf6\xa9\x9e\x08\x2b\xab\xb5\xdd\xb1\x46\xed\xd5\x8a\x82\xaa\x0d\xf1\x9a\x00\xd9\x90\xb7\x95\x62\x0b\x6c\x8c\xdd\x99\xdf\x4b\x4b\x9e\x7a\x16\x2b\xa5\x71\x0a\xbb\x52\xc9\x12\xf6\xb6\x81\x9d\xd2\x3a\x2a\xe5\x2d\x14\x96\x13\x94\x97\xf9\x10\xff\xe2\xc0\xee\x0c\x8b\xdd\x33\x70\x58\x5b\x70\xc2\x97\xe8\xc0\x97\xc2\xb4\x17\xaf\x95\x2f\x9b\x25\x58\x5e\x44\xd0\x6a\x83\x19\xfc\x66\x9b\xe7\x5a\x83\xd0\x64\xbb\x2b\xc6\xc6\x06\xe5\x41\x19\x6f\xc3\x19\x69\x8d\x17\xca\xa0\x9b\xc2\x12\xb5\xdd\x65\x70\x87\x83\x55\x4b\xef\x6b\xca\xe7\xf3\xc2\x4a\xca\x38\xb0\x64\xc1\x61\x8d\x66\xce\x39\x4b\x7e\xbe\x6e\x54\x81\x34\x6f\x08\x67\xb5\x53\x5b\xe1\x31\x84\x1e\x2b\x92\x95\xbe\xd2\x3d\xa7\xce\x17\x44\xe5\x4c\x5a\xb3\x52\xeb\x7e\x0b\x20\x2e\x7c\x10\x75\x9e\x2c\xa6\x19\x38\x4b\x8e\x7d\xad\x5f\x42\x6a\xce\x23\x93\x21\xfc\xbe\xe8\x93\x9d\xa2\x92\x57\x4a\xb1\x45\x10\x50\xa8\xd5\x0a\x1d\x57\xdb\x8e\x43\x9b\x55\x43\x45\x0d\x2e\x88\xec\x52\x27\x70\x55\xda\xaa\x02\x3b\xb3\xaf\xd4\xba\x12\xf5\x20\x88\xf2\x25\x08\x03\x68\xbc\xdb\x07\x1d\xee\x23\xd1\xfd\x14\x84\x29\xa0\x31\xd2\x56\x5c\xe6\xc3\xf9\xa8\xed\x87\xe0\x4e\x61\x8a\x9e\x0b\x9a\x6d\xe0\xa0\x90\x5a\x7f\x3e\xf0\x00\x9b\xe1\x2b\x3c\x90\x1c\xfb\xa2\x07\x42\x25\xf0\x16\x54\xc5\x05\x16\xae\x6f\xae\x43\x11\x80\x17\xac\x16\xa9\xb5\x51\x66\xb8\x9c\x95\xdb\xa2\x53\x2b\x25\x43\xa5\x87\xba\x71\xb5\x25\xa4\xf3\xbf\x60\xc8\x9e\x4b\x2c\x1f\xd1\x8a\x6c\x20\xbe\xef\x2f\x18\x0e\x84\x5b\x0f\x69\xfa\x88\xc5\xd6\xf5\x9a\xeb\x07\x25\xa6\x19\x97\xe0\x67\x8f\x14\xe1\x87\xe7\x4e\x14\xe1\xce\x9c\x7d\x26\x3e\xa8\xff\x49\x87\x68\xad\xee\x30\xd4\x49\x63\x61\x92\xc7\x4c\x9c\x80\xaa\xc4\x1a\x63\xf4\xf3\x81\x0c\xde\x2a\x53\x04\x9d\x2b\x2e\x2b\x0e\xe5\x10\xb5\xb1\xa4\x68\x14\x84\x5c\x3c\xc2\x51\x76\x02\x03\x0c\x10\xbe\xcf\xfb\xb2\x59\x66\x85\x95\x1b\x74\x99\xb4\xd5\xdc\xcd\x63\x0d\x08\x3f\xe6\x5e\xf4\xa6\xeb\xfc\xc8\x40\x81\x41\x04\xdf\xea\xc5\x1a\x58\xd2\xac\xa7\x09\xd7\xe4\xd0\x32\x54\x36\xe5\x96\x5f\x66\x97\xff\x9f\x5d\x8e\x69\x6f\x1a\xad\x6f\xac\x56\x72\x9f\xc3\xbb\xd5\x47\xeb\x6f\x1c\x52\xaa\x85\x43\xb2\x8d\x93\x48\x69\x1d\x77\xf8\x9f\x06\xc9\x8f\xd6\x00\x64\xdd\xe4\xf0\xdd\x45\x35\x5a\xac\x42\xa9\xcf\xe1\xfb\x6f\x3f\xa8\x01\x5f\x58\x97\x1e\x9e\x0d\x9e\xb9\x09\x58\xe3\xea\xe2\x8a\x3b\xa7\x32\x2b\xeb\xaa\x10\xb2\x42\xf7\xd4\x5a\x6d\xd1\x20\xd1\x8d\xb3\x4b\x4c\x25\x60\x93\x5e\x8f\xbb\x76\xbc\x2a\x32\x1c\x2f\x0b\x5f\xe6\x30\x17\xb5\x8a\x96\xde\x7e\x3f\x57\x05\x1a\xaf\xfc\x3e\xab\x9b\x65\x42\xab\x8c\xf2\x4a\xe8\xd7\xa8\xc5\xfe\x8e\xf3\xb3\xa0\x1c\xbe\x4b\x08\xbc\xaa\xd0\x36\xfe\xc4\x1e\x37\x59\xf5\xbf\x21\x6a\x92\xb4\x23\xc7\x9c\x86\x47\x10\xdb\xdc\x4d\x94\x0c\xbd\x0c\x92\x15\x73\xa2\x92\x01\xa2\x8d\x90\x15\xb4\x6d\xeb\xcd\x9a\x5d\x06\xca\xc4\x98\x7b\x4e\xf1\x0c\x51\x39\x1f\x95\xc9\xce\x66\xbf\x1a\xbd\xcf\xc1\xbb\x06\x99\x1b\x63\xa0\x50\xa1\x96\x6d\x61\xe7\x94\xaa\xd1\xad\xac\x93\xc8\x4c\x23\xe8\x61\xcc\xf3\x98\xe0\x29\x2e\x19\xcb\xbe\x15\xae\x95\x3d\x92\x7d\x9d\xf8\x49\x8e\xbe\x33\x52\x37\xa1\x72\x32\x74\x8b\x0d\xae\xab\xaa\x11\x1b\x7c\x01\xca\x74\x60\xe6\x07\x3e\x7a\x04\x33\xfa\xea\x0a\x05\x4a\x2d\x1c\x43\xb6\xa5\xdd\x26\x05\xe0\x09\x18\x10\xcb\x63\xaa\xbc\xb3\xd6\xcf\x33\xa2\xf2\x51\x05\x84\x19\xdd\x3a\x19\x5a\xd4\x24\xde\x3c\xed\x48\x12\x0e\x68\xb6\xca\x59\x13\x1a\x42\xec\xb5\x93\xf7\x9f\x7f\x7a\xf3\xea\xd7\x8f\x6f\xdf\x5d\x4f\x62\x0b\x98\xb2\x3d\xec\x16\x9d\x1b\xf7\xeb\x84\x4d\x68\x71\xcb\x7d\xec\xa6\x5e\x9f\xd2\xf1\x41\xa3\x7d\xa8\xe3\x10\x9c\x4c\xfc\xa8\xa2\xdc\xf3\x78\x62\xe9\x6e\xe3\x12\x9d\x40\x91\x56\xba\xe0\x93\x84\xc5\x31\xa0\x49\x9d\x1e\xd0\x4c\x07\xbd\x85\x01\xa1\x3d\x3a\xc3\xd0\xfa\x81\xc4\x2b\x67\x2b\x0e\x8b\x0e\xb1\x4c\x41\x10\x87\x5b\xdb\x55\xd9\x0c\xda\xca\x0d\x3d\x74\x36\x9a\x6d\x7e\xc2\x2e\x83\xb9\x47\x76\xd9\x0a\xdd\xe0\x03\x9b\x7c\x29\x88\x8f\x63\xa0\xeb\xb9\x4f\x44\x00\xb7\xfc\x71\xab\x7f\xa2\xd9\x3f\x12\x97\x4c\x15\xd1\xcd\x88\x6e\x5c\x1f\xbe\x94\x79\x3b\xc1\xa0\xc4\x02\x35\x75\xad\xf7\xf0\xf3\xa7\x4f\x37\xb0\x14\xa4\x24\x88\xc6\x97\x20\x1d\x86\x4a\x2a\x74\xec\xea\xc3\x3c\xc0\x0c\xb7\x4a\x04\xc5\xef\xaf\xdf\x7d\xfa\xfd\xe5\xe7\x4f\x3f\x7f\xbe\x7b\x73\x7b\x1f\xd4\xed\x97\xde\xbf\xf9\xed\x7e\x14\xf0\x5b\xe1\x14\x4f\x73\xd4\x01\xe4\x84\x61\x84\x2f\x47\xfe\x7b\xeb\x6c\x35\xf6\x61\x24\xbb\xc5\x55\x3e\xd2\x7c\x84\x15\xb9\xb0\xb1\x0a\x83\x01\xd8\xe6\xf9\xc8\x1e\xd1\x04\x71\x46\xc5\x82\x3b\xb1\x14\xb2\xc4\x82\x43\x2b\x8d\xed\x1e\x56\xb3\xa5\x98\xfb\x34\xe1\x62\x5d\x8b\x9b\x93\x03\xed\x8c\x1d\x0e\x4e\xc3\x25\x3c\x1b\xb6\x36\xf6\x25\x52\x1a\x0b\x03\x7a\xf5\x3b\xcb\x52\x36\x6c\xa7\x90\x71\xe1\x25\x21\x04\x22\x94\x76\x17\xe6\x5f\x6b\x0c\xca\xe0\x32\xe5\xc7\xb1\x33\x9b\xf5\x0a\x84\xe1\x87\x2f\x5f\xf4\x4b\x59\x0b\xfa\x32\xda\xca\x4c\xea\x86\x3c\xba\x8c\x0b\xb8\x4e\x4d\xf2\x99\x62\xad\x19\x4c\xf1\x2a\x92\xbe\xbb\x19\x29\xc5\x65\x87\xd0\x87\xf9\x7a\x1c\xd9\x83\x0c\x1d\x3d\x47\x97\x77\x4c\x19\x26\xde\xa4\x05\xa5\x12\xb7\xd4\x8b\xb3\x11\xca\x54\x04\x55\x43\xe1\x05\x20\x58\x4f\x61\x11\xd3\x69\x19\x1a\x5b\xc0\x78\x61\xf0\x7f\xd1\x4d\xd3\xe7\xa9\x2c\x5d\x71\x89\x69\xc8\x01\x9c\xcc\xff\x23\x41\xb8\x19\xc4\x06\x37\x2b\x94\x5b\x3c\x68\x7b\xa9\x58\xb7\x09\xc2\x1c\x9c\xf7\xf9\xf6\x97\xf8\x40\x21\xcc\x3a\xee\x5d\x2b\x1f\x86\x66\x52\xde\xba\x7d\x5f\xae\xdf\x32\x32\x4e\xd8\x3d\x95\x73\x1c\x36\x89\xee\x6d\xca\x9c\x4c\xa7\x34\x17\x3a\xec\xfc\x7f\x2f\xd2\xcc\x3c\xcf\x87\xbf\xdf\xbf\xf9\xed\xfc\x1f\x71\x74\x0f\xb0\xba\x21\x74\xf3\x41\xd8\x2c\x4d\x74\xb6\x0f\xa7\x53\xe3\xf4\xe2\x70\x80\xec\x5a\x79\x56\x36\xbc\xe1\x8d\x29\x96\x4e\x18\x59\x76\x44\x3f\x85\xbf\xe2\x6b\x9e\x5a\x85\x25\xae\x5f\x74\xea\x24\x63\x38\x3e\x77\x17\x22\x85\xfe\x69\x95\x49\x0e\x4c\xa6\x93\xf6\x51\x50\x13\xa6\xc7\x9f\x2e\x6a\x0e\x39\xf0\x64\x9c\xba\x2a\x61\xd4\x8a\x31\x39\xe7\x10\xa9\x02\x5d\x74\xc7\xd1\x64\x13\xde\x24\x2c\x21\x34\xa6\x40\x77\xe4\x63\x87\x5a\x78\xb5\xc5\x00\x39\xa9\x8b\xc0\xf5\xc8\xcf\x47\x39\xd9\x2b\x47\xcd\xb2\x50\xee\x72\x1a\x7f\x7e\xd3\xbf\x70\x0e\xc6\x09\x2f\x98\xa7\x8c\x13\x9e\x05\x3b\xab\x76\x54\x27\x18\x7c\x26\x74\xa7\xce\xb3\x73\x7b\xcf\x31\x0d\x9c\x3e\xff\xa6\x12\xea\xa4\x00\xc8\x1b\x1d\x87\x8e\x6a\x78\xa3\x3d\xe9\x0e\xe4\x52\xb2\xb3\x6c\x50\x34\xe1\xf9\x8e\xed\xc4\x1d\x5b\xf9\xa3\x01\x3c\xb5\x55\xdb\xfb\xda\xce\xb6\x78\xa2\xd5\x75\x27\x5a\x5e\x7c\x6a\xf1\xf7\x0d\xee\x41\x15\x3f\xf6\x64\x4f\xc0\x99\x44\x2a\x66\x21\x7c\xe3\x70\xf4\x0a\x70\xe2\xae\xb0\xbd\x9f\xf5\xf4\x34\x2a\x57\x5d\xb5\x06\xe5\xa1\x14\x14\x5a\xb1\x35\x7a\x0f\x42\x4a\xa4\x58\xd1\x4b\x8c\x0f\x69\x2f\xba\x37\x9b\xfb\x95\xd0\x84\xf7\xe7\x67\x87\xc3\xac\x73\xc4\x6d\xdb\xc3\x4f\xf9\xa2\x63\x1a\xe8\x1f\xe6\xc3\x69\xb2\x13\x7e\x22\xef\x1a\xe9\xa3\xbc\xbb\x30\xce\x33\xc4\x6b\x3c\xd0\xde\x48\x58\x5a\xbb\xd9\x20\xd6\x1c\xf5\xbd\xa8\x93\xb5\xf2\x93\x29\x54\x28\xd8\xe0\x5c\xd0\x40\x84\x19\xbb\x4d\x84\xa6\x26\xef\x50\x54\x7d\x46\x9c\x1f\x09\xc6\xac\x67\xe4\x85\xc7\x05\x17\x98\x47\xe3\xc6\xe0\x1f\xbe\x0b\x9e\xa4\xe3\x09\x03\x93\xee\x8e\x49\xd7\x8f\x12\x26\x2f\x30\x5b\x67\x53\xf8\x37\x32\xb2\x7c\xa5\x6d\x53\x9c\x67\xe1\x81\xc8\xdb\x0d\xcf\x27\x04\xb5\x70\x5e\xc9\x46\x0b\xd7\x39\xa3\xe5\x72\xdc\x4a\xdb\x5b\x17\x3b\xe2\x3a\x2a\x99\x57\xb6\x63\xbe\xd9\xce\xba\x0d\xf5\xc3\xe6\xd1\xb1\x70\xd1\x42\x2c\xe5\xe5\x37\x57\x0f\xff\x4f\x15\x7e\x13\xa3\xaf\xab\x4a\xfd\x83\xb5\x35\x4f\x84\xc6\x87\x96\xfa\x7a\x20\x3e\x8a\x90\x8e\xdf\x6c\xe0\xb7\x08\x38\xf0\xf1\x68\x39\x75\x24\x5c\xfc\x48\xe8\xdc\xa1\xdb\x9e\xf8\x94\xc1\x03\xc1\x80\x80\x38\x57\x7f\x48\x5b\xb1\xd8\x70\x1b\x8b\x51\x46\xe8\x93\xef\x23\xcf\x93\x4f\x2c\xc9\xb7\x12\x76\x4e\x78\xba\x0b\xa0\x3c\x1b\x69\xa9\x15\x79\x34\xb3\x56\x84\x45\x7e\x75\x71\x75\xd9\x19\xc9\x58\x0f\xd9\x2d\xae\x15\x79\xb7\xbf\x93\xc2\x84\x58\x3d\x32\x93\x6b\xf7\x67\xd4\x12\xb0\xc6\x23\x85\xdb\xaa\xf8\xb2\x28\x54\x7c\x5e\xe1\xb6\xfd\x92\x61\xfb\xc8\x80\xc3\xfe\x80\xdc\x0e\x07\x70\x01\x04\x7c\xe1\xf4\x2c\x7c\xf6\x1a\x55\xd2\xe1\xb7\xee\x82\x5f\xeb\x96\xfd\xeb\x8f\x77\x1d\xe4\xa2\x69\x3b\x0a\x35\xae\x05\x60\x60\x0a\xeb\x09\x6c\x20\x86\x4a\xec\xc3\xb3\x94\xde\x0e\x8f\x93\x86\xb4\xb5\x9b\xa6\x06\x45\xd4\x20\x81\x35\x40\xb6\x42\x78\xdf\x7f\x2c\x62\xee\x4d\x4d\xc3\xdb\x63\x61\xa8\x7b\xf9\x9a\x7c\xb4\x06\x27\xe9\xce\xab\x20\x40\xfa\xfa\x18\x2f\xa7\xf1\x83\x64\x37\xd2\x04\xf9\x46\x3b\xfd\xb4\x35\xb9\x9c\x9c\xfd\x37\x00\x00\xff\xff\xcb\xbc\x2d\x04\x60\x1c\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 931,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\xcb\x6e\x9c\x40\x10\xbc\xf3\x15\x25\xed\x35\xe0\x60\xc9\x17\x6e\x51\x9c\x44\x96\x12\x6b\xa5\xc8\xb9\xf7\x0e\x0d\x1e\x79\x5e\x99\xe9\xd9\x2c\x41\xfe\xf7\x08\xf6\x05\xb1\xfb\x04\x54\x55\x57\x75\xcf\x50\x96\x65\xb1\x81\x65\xab\x48\x3d\x73\x8b\x96\x83\xf1\x83\x65\x27\xc8\x89\x5b\xec\x06\x7c\x35\xf9\x00\xf1\x98\x19\xc5\x06\xca\x3b\x21\xed\x38\x42\x5b\xea\x19\x96\x85\x5a\x12\xaa\x0a\x0a\xfa\x17\xc7\xa4\xbd\x6b\x40\x21\xa4\x9b\x7d\x5d\xbc\x68\xd7\x36\xb8\xbf\xb4\x2d\xce\xf4\xa6\x00\x1c\x59\x6e\xae\xee\xe3\x08\xdd\xa1\x7a\x24\xcb\x29\x90\x62\xbc\xbe\x9e\x48\xf3\x6b\x83\x71\x5c\xa3\xe3\x08\x76\xed\x44\x4b\x81\xd5\xd4\x31\x72\x30\x5a\x51\x6a\x50\x17\x40\x62\xc3\x4a\x7c\x9c\x10\xc0\x92\xa8\xe7\xef\xb4\x63\x93\x8e\x1f\xde\x04\x28\x00\x61\x1b\x0c\x09\x9f\x24\x8b\xb0\x53\x99\x95\xfa\x3d\x3d\x70\x8e\x32\xe3\xbe\xe5\x9f\xab\x10\x53\xed\x58\xa8\x7a\xc9\x3b\x8e\x8e\x85\x53\xa5\xfd\x8d\x4f\x0d\x8c\x76\xf9\x70\x22\x5d\x96\x7c\x31\x2b\xdf\x35\x9b\x6a\x3e\x86\x05\xd0\xd4\xd5\x5d\x75\xfb\x71\x8d\x6f\xb3\x31\x5b\x6f\xb4\x1a\x1a\x3c\x74\x8f\x5e\xb6\x91\xd3\x74\x1e\x67\x16\xc5\x7e\x31\x58\x89\xd2\xe2\xae\xbe\x05\xb0\xc1\x0f\x3a\x68\x9b\xed\xe4\xe0\xe3\x30\xdd\x85\x9c\xf8\x03\xb4\x83\xe5\x9e\x76\x83\x70\x5a\x0a\x1f\x70\x67\xb1\x12\x26\xfd\x97\xd1\xf9\x08\xef\x18\x5a\xd8\x2e\xe9\x01\x75\x7d\x5b\xd7\xd8\xe0\x9e\x3b\xca\x46\x10\x7c\xbc\xe6\xda\x4c\x9c\xfd\xfe\xf8\xf8\xe4\x94\xb7\xf3\xed\x14\x8f\x9e\x05\xc6\xf7\x09\xbe\x03\x93\x7a\x46\xe4\xdf\x99\x93\x80\x5c\x8b\xc8\x29\x78\x97\xb8\xba\x34\x9a\xba\xae\x26\x3c\xee\x53\x19\xcd\x4e\xae\x03\x2c\x76\xbf\xf5\x51\x9a\x63\xba\x0b\x9c\x58\xe5\xa8\x65\xf8\xec\x9d\xf0\x41\x9a\x85\x2e\x66\xf7\x29\x3d\x25\x8e\xff\x6b\x4e\xd0\xb7\xe8\x73\x78\x8b\x91\x31\xfe\xcf\x36\xea\xbd\x36\xdc\xf3\x97\xa4\xc8\x90\xcc\xff\x50\x47\x26\x71\xf1\x2f\x00\x00\xff\xff\x68\x3b\xcf\xad\xa3\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
