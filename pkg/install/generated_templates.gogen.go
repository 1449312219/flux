// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 7129,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x6d\x6f\x1b\x37\xf2\x7f\xef\x4f\x31\x50\xfe\x40\x62\x40\x5a\xd9\x75\xdb\xff\x61\x7b\x2a\x2e\xcd\x83\x9b\x4b\x93\x1a\x71\x72\x87\xbe\xaa\x29\xee\x48\x4b\x88\x4b\xee\x71\xb8\x52\x05\xa1\xdf\xfd\x30\xe4\x3e\x70\x65\xd9\x2e\xf2\xee\xf2\x22\x96\x76\x67\x86\xf3\x3c\xbf\xa1\x66\xb3\xd9\x99\xa8\xd5\xbf\xd0\x91\xb2\x26\x07\x51\xd7\x34\xdf\x5e\x9e\x6d\x94\x29\x72\x78\x8d\xb5\xb6\xfb\x0a\x8d\x3f\xab\xd0\x8b\x42\x78\x91\x9f\x01\x18\x51\x61\x0e\x2b\xdd\xfc\x71\x38\x80\x5a\x41\xf6\x51\x54\x48\xb5\x90\x08\x7f\xfe\xd9\xbe\x0f\x5f\x73\x38\x1c\xc6\x6f\x0f\x07\x40\x53\x30\x19\xd5\x28\x59\x98\xc3\x5a\x2b\x29\x28\x87\xcb\x33\x00\x42\x8d\xd2\x5b\xc7\x6f\x00\x2a\xe1\x65\xf9\x8b\x58\xa2\xa6\xf8\x20\x3d\x9b\xa9\xbd\x13\x1e\xd7\xfb\xf8\xd2\xef\x6b\xcc\xe1\x13\x4a\x87\xc2\xe3\x19\x80\xc7\xaa\xd6\xc2\x63\x2b\x2c\xb1\x80\xff\x09\x63\xac\x17\x5e\x59\xd3\x0b\x07\xa8\x9d\xad\xd0\x97\xd8\x50\xa6\xec\xbc\xb6\xce\xe7\x30\xb9\xba\xb8\xba\x9c\xc0\x33\xf0\xa8\x75\x42\x01\xde\x02\x49\x27\x6a\x84\x79\x85\xde\x29\x49\x6c\x5c\x6d\x95\xf1\xcf\x09\x98\x39\x6b\x05\xeb\x91\x0d\x47\x56\x00\x74\xbe\x08\x9f\xd1\x6d\x95\xc4\x97\x52\xda\xc6\xf8\x8f\x63\x42\x80\xad\xd5\x4d\x85\xbd\xa8\x59\x2b\x6a\xad\xfc\x6c\x83\xfb\xfe\x00\x62\x2f\xf8\xe1\xc0\xee\xc9\x20\x6f\xc6\x2c\x45\x08\x70\x42\x55\xe0\x4a\x34\xda\x7f\xb0\x05\xe6\x70\xf1\xed\xc5\x05\x3c\x83\x5d\x89\x06\x2a\xd6\x06\x0b\x70\x28\x8a\x99\x35\x7a\x3f\x85\x1d\xc2\xce\x9a\xe7\x1e\x96\x08\x62\xa9\x91\xfd\x21\xcb\xca\x16\x67\xad\xc0\x67\xf0\xb9\x54\x04\x8a\x40\x80\xaf\xea\x15\x41\x43\x58\xc0\xca\x3a\x58\xa3\x41\x27\xbc\x32\x6b\xb8\xbd\xfd\x19\x36\xb8\xa7\x0c\xde\x19\x78\xff\x37\x82\x1f\x17\x70\x99\x5d\x5e\x4c\x7b\x29\xdd\xd9\xd1\x04\x02\xe1\x30\xd5\x83\x2c\xab\x62\x10\x0b\x10\x40\x58\x0b\x4e\x8a\xd6\x51\xb0\xc3\x5e\x8c\x14\x06\x76\x4e\x79\x56\x34\x3b\xed\xbf\x35\x9a\xde\x19\x58\xd5\x7e\xff\x5a\xb9\xd4\x89\x15\x16\xaa\xa9\x72\xf8\x80\x95\x75\xfb\xd4\x4e\x84\x95\xd5\xda\xee\xd8\xa2\xf6\x68\x45\xc1\xd4\x86\xf8\x99\x00\xd9\x90\xb7\x95\x62\x0f\x6c\x8c\xdd\x99\xdf\x4b\x4b\x9e\x7a\x11\x2b\xa5\x71\x0a\xbb\x52\xc9\x12\xf6\xb6\x81\x9d\xd2\x3a\x1a\xe5\x2d\x14\x96\xeb\x8c\x1f\x33\x13\x7f\x70\x60\x77\x86\xd5\xee\x05\x38\xac\x2d\x38\xe1\x4b\x74\xe0\x4b\x61\xda\x83\xd7\xca\x97\xcd\x12\x2c\x3f\x44\xd0\x6a\x83\x19\xfc\x66\x9b\xe7\x5a\x83\xd0\x64\xbb\x23\xc6\xce\x06\xe5\x41\x19\x6f\x03\x8f\xb4\xc6\x0b\x65\xd0\x4d\x61\x89\xda\xee\x32\xb8\xc5\xc1\xab\xa5\xf7\x35\xe5\xf3\x79\x61\x25\x65\x9c\x58\xb2\xe0\xd2\x41\x33\xe7\xd2\x23\x3f\x5f\x37\xaa\x40\x9a\x37\x84\xb3\xda\xa9\xad\xf0\x18\x52\x8f\x0d\xc9\x4a\x5f\xe9\x5e\x52\x17\x0b\xa2\x72\x26\xad\x59\xa9\x75\xff\x0a\x20\x3e\xf8\x20\xea\x3c\x79\x98\x16\xd2\x2c\x61\xfb\xda\xb8\x64\x9b\x66\x89\xf3\x28\x64\x48\xbf\x27\x63\xb2\x53\x54\xf2\x93\x52\x6c\x11\x04\x14\x6a\xb5\x42\xc7\x4d\xb3\x93\xd0\x56\xd5\xd0\x18\x43\x08\xa2\xb8\x34\x08\xdc\x5c\xb6\xaa\xc0\xce\xed\x2b\xb5\xae\x44\x3d\x28\xa2\x7c\x09\xc2\x00\x1a\xef\xf6\xc1\x86\xbb\x48\x74\x37\x05\x61\x0a\x68\x8c\xb4\x15\x77\xeb\xc0\x1f\xad\xfd\x10\xc2\x29\x4c\xd1\x4b\x41\xb3\x0d\x12\x14\x52\x1b\xcf\x7b\x11\x60\x37\x7c\x45\x04\x12\xb6\x27\x23\x10\x3a\x81\xb7\xa0\x2a\xee\x93\x70\x7d\x73\x1d\x9a\x00\xbc\x60\xb3\x48\xad\x8d\x32\xc3\xe1\x6c\xdc\x16\x9d\x5a\x29\x19\x1a\x36\xd4\x8d\xab\x2d\x21\x9d\xff\x05\x47\xf6\x52\x62\xfb\x88\x5e\x64\x07\xf1\x79\x7f\xc1\x71\x20\xdc\x7a\x28\xd3\x07\x3c\xb6\xae\xd7\xdc\x3f\x28\x71\xcd\xb8\x05\x3f\x7b\xa0\x09\xdf\xe7\x3b\xd1\x84\x3b\x77\xf6\x95\x78\xaf\xff\x27\x13\xa2\xf5\xba\xc3\xd0\x27\x8d\x85\x49\x1e\x2b\x71\x02\xaa\x12\x6b\x8c\xd9\xcf\x0c\x19\xbc\x55\xa6\x08\x36\x57\xdc\x56\x1c\xca\x21\x6b\x63\x4b\xd1\x28\x08\xb9\x79\x04\x56\x0e\x02\xe3\x04\x10\xbe\xaf\xfb\xb2\x59\x66\x85\x95\x1b\x74\x99\xb4\xd5\xdc\xcd\x63\x0f\x08\x7f\xe6\x5e\xf4\xae\xeb\xe2\xc8\xf3\x9e\xb1\x00\x9f\xea\xc5\x1a\x58\xd3\xac\xa7\x09\xc7\xe4\xd0\x0a\x54\x36\x95\x96\x5f\x66\x97\xff\x9f\x5d\x8c\x69\x6f\x1a\xad\x6f\xac\x56\x72\x9f\xc3\xbb\xd5\x47\xeb\x6f\x1c\x52\x6a\x85\x43\xb2\x8d\x93\x48\x69\x1f\x77\xf8\x9f\x06\xc9\x8f\x9e\x01\xc8\xba\xc9\xe1\xbb\x8b\x6a\xf4\xb0\x0a\xad\x3e\x87\xef\xbf\xfd\xa0\x06\x98\x60\x5d\xca\x3c\x1b\x22\x73\x13\x20\xc3\xd5\xc5\x15\x4f\x4e\x65\x56\xd6\x55\x21\x65\x85\xee\xa9\xb5\xda\xa2\x41\xa2\x1b\x67\x97\x98\x6a\xc0\x2e\xbd\x1e\x4f\xed\x78\x54\x14\x38\x7e\x2c\x7c\x99\xc3\x5c\xd4\x2a\x7a\x7a\xfb\xfd\x5c\x15\x68\xbc\xf2\xfb\xac\x6e\x96\x09\xad\x32\xca\x2b\xa1\x5f\xa3\x16\xfb\x5b\xae\xcf\x82\x72\xf8\x2e\x21\xf0\xaa\x42\xdb\xf8\x13\xef\x78\xc8\xaa\xff\x0d\x55\x93\xa2\x1d\x05\xe6\x34\x3c\x82\x38\xe6\x6e\xa2\x66\xe8\x65\xd0\xac\x98\x13\x95\x8c\xf3\x6c\x44\x9e\xa0\x6d\xdb\x6f\xd6\x1c\x32\x50\x26\xe6\xdc\x73\x8a\x3c\x44\xe5\x7c\xd4\x26\x3b\x9f\xfd\x6a\xf4\x3e\x07\xef\x1a\x64\x69\x8c\x81\x42\x87\x5a\xb6\x8d\x9d\x4b\xaa\x46\xb7\xb2\x4e\x22\x0b\x8d\xa0\x87\x31\xcf\x43\x8a\xa7\xb8\x64\xac\xfb\x56\xb8\x56\xf7\x48\xf6\x75\xea\x27\x35\xfa\xce\x48\xdd\x84\xce\xc9\xd0\x2d\x0e\xb8\xae\xab\x46\x6c\xf0\x04\x94\xe9\xc0\xcc\x0f\xcc\x7a\x04\x33\xfa\xee\x0a\x05\x4a\x2d\x1c\x43\xb6\xa5\xdd\x26\x0d\xe0\x11\x18\x10\xdb\x63\x6a\xbc\xb3\xd6\xcf\x33\xa2\xf2\x41\x03\x84\x19\x9d\x3a\x19\x46\xd4\x24\x9e\x3c\xed\x48\x12\x09\x68\xb6\xca\x59\x13\x06\x42\x9c\xb5\x93\xf7\x5f\x7e\x7a\xf3\xea\xd7\x8f\x6f\xdf\x5d\x4f\xe2\x08\x98\xb2\x3f\xec\x16\x9d\x1b\xcf\xeb\x44\x4c\x18\x71\xcb\x7d\x9c\xa6\x5e\x9f\xb2\xf1\xde\xa0\xbd\x6f\xe3\x90\x9c\x4c\xfc\xa0\xa1\x3c\xf3\x78\xf1\xe8\x4e\xe3\x16\x9d\x40\x91\x56\xbb\x10\x93\x44\xc4\x31\xa0\x49\x83\x1e\xd0\x4c\x07\xbd\x85\x01\xa1\x3d\x3a\xc3\xd0\xfa\x9e\xc6\x2b\x67\x2b\x4e\x8b\x0e\xb1\x4c\x41\x10\xa7\x5b\x3b\x55\xd9\x0d\xda\xca\x0d\xdd\x0f\x36\x9a\x6d\x7e\xc2\x2f\x83\xbb\x47\x7e\xd9\x0a\xdd\xe0\x3d\x9f\x3c\x95\xc4\xc7\x39\xd0\xcd\xdc\x47\x32\x80\x47\xfe\x78\xd4\x3f\x32\xec\x1f\xc8\x4b\xa6\x8a\xe8\x66\x44\x37\xee\x0f\x4f\x55\xde\x4e\x30\x28\xb1\x40\x4d\x5d\xeb\x3d\xfc\xfc\xf9\xf3\x0d\x2c\x05\x29\x09\xa2\xf1\x25\x48\x87\xa1\x93\x0a\x1d\xa7\xfa\xb0\x0f\xb0\xc0\xad\x12\xc1\xf0\xbb\xeb\x77\x9f\x7f\x7f\xf9\xe5\xf3\xcf\x5f\x6e\xdf\x7c\xba\x0b\xe6\xf6\x8f\xde\xbf\xf9\xed\x6e\x94\xf0\x5b\xe1\x14\x6f\x73\xd4\x01\xe4\x44\x60\x84\x2f\x47\xf1\x7b\xeb\x6c\x35\x8e\x61\x24\xfb\x84\xab\x7c\x64\xf9\x08\x2b\x72\x63\x63\x13\x06\x07\xb0\xcf\xf3\x91\x3f\xa2\x0b\xe2\x8e\x8a\x05\x4f\x62\x29\x64\x89\x05\xa7\x56\x9a\xdb\x3d\xac\x66\x4f\xb1\xf4\x69\x22\xc5\xba\x16\x37\x27\x0c\xed\x8e\x1d\x18\xa7\xe1\x10\xde\x0d\x5b\x1f\xfb\x12\x29\xcd\x85\x01\xbd\xfa\x9d\x65\x2d\x1b\xf6\x53\xa8\xb8\x70\x21\x10\x12\x11\x4a\xbb\x0b\xfb\xaf\x35\x06\x65\x08\x99\xf2\xe3\xdc\x99\xcd\x7a\x03\xc2\xf2\xc3\x87\x2f\xfa\x47\x59\x0b\xfa\x32\xda\xca\x4c\xea\x86\x3c\xba\x8c\x1b\xb8\x4e\x5d\xf2\x85\x62\xaf\x19\x5c\xf1\x2a\x92\xbe\xbb\x19\x19\xc5\x6d\x87\xd0\x87\xfd\x7a\x9c\xd9\x83\x0e\x1d\x3d\x67\x97\x77\x4c\x19\x36\xde\x64\x04\xa5\x1a\xb7\xd4\x8b\xb3\x11\xca\x54\x04\x55\x43\xe1\x06\x20\x78\x4f\x61\x11\xcb\x69\x19\x06\x5b\xc0\x78\x61\xf1\x7f\xd1\x6d\xd3\xe7\xa9\x2e\x5d\x73\x89\x65\xc8\x09\x9c\xec\xff\x23\x45\x78\x18\xc4\x01\x37\x2b\x94\x5b\xdc\x1b\x7b\xa9\x5a\x9f\x12\x84\x39\x04\xef\xcb\xa7\x5f\xe2\x05\x85\x30\xeb\xf8\xee\x5a\xf9\xb0\x34\x93\xf2\xd6\xed\xfb\x76\xfd\x96\x91\x71\x22\xee\xb1\x9a\xe3\xb4\x49\x6c\x6f\x4b\xe6\x64\x39\xa5\xb5\xd0\x61\xe7\xff\x7b\x91\x56\xe6\x79\x3e\x7c\x7f\xff\xe6\xb7\xf3\x7f\xc4\xd5\x3d\xc0\xea\x86\xd0\xcd\x07\x65\xb3\xb4\xd0\xd9\x3f\x5c\x4e\x8d\xd3\x8b\xc3\x01\xb2\x6b\xe5\xd9\xd8\x70\x15\x37\xa6\x58\x3a\x61\x64\xd9\x11\xfd\x14\xbe\xc5\x4b\x39\xb5\x0a\x8f\xb8\x7f\xd1\x29\x4e\xc6\x70\xcc\x77\x1b\x32\x85\xfe\x69\x95\x49\x18\x26\xd3\x49\x7b\xb7\xa7\x09\x53\xf6\xc7\x9b\x9a\x43\x4e\x3c\x19\xb7\xae\x4a\x18\xb5\x62\x4c\xce\x35\x44\xaa\x40\x17\xc3\x71\xb4\xd9\x84\x3b\x09\x4b\x08\x8d\x29\xd0\x1d\xc5\xd8\xa1\x16\x5e\x6d\x31\x40\x4e\xea\x32\x70\x3d\x8a\xf3\x51\x4d\xf6\xc6\x51\xb3\x2c\x94\xbb\x9c\xc6\xbf\xdf\xf4\x17\x95\x83\x73\xc2\x45\xe4\x29\xe7\x84\xdb\xbd\xce\xab\x1d\xd5\x09\x01\x5f\x08\xdd\x29\x7e\x0e\x6e\x1f\x39\xa6\x81\xd3\xfc\x6f\x2a\xa1\x4e\x2a\x80\xfc\xa2\x93\xd0\x51\x0d\x57\xad\x27\xc3\x81\xdc\x4a\x76\x96\x1d\x8a\x26\x5c\xdf\xb1\x9f\x78\x62\x2b\x7f\xb4\x80\xa7\xbe\x6a\x67\x5f\x3b\xd9\x16\x8f\x8c\xba\x8e\xa3\x95\xc5\x5c\x8b\xbf\x6f\x70\x0f\xaa\xf8\xb1\x27\x7b\x04\xce\x24\x5a\xb1\x08\xe1\x1b\x87\xa3\x5b\x80\x13\x67\x85\xd7\xfb\x59\x4f\x4f\xa3\x76\xd5\x75\x6b\x50\x1e\x4a\x41\x61\x14\x5b\xa3\xf7\x20\xa4\x44\x8a\x1d\xbd\xc4\x78\x91\xf6\xa2\xbb\xb3\xb9\x5b\x09\x4d\x78\x77\x7e\x76\x38\xcc\xba\x40\x7c\x6a\x67\xf8\xa9\x58\x74\x42\x03\xfd\xfd\x7a\x38\x4d\x76\x22\x4e\xe4\x5d\x23\x7d\xd4\x77\x17\xd6\x79\x86\x78\x8d\x07\xda\x1b\x09\x4b\x6b\x37\x1b\xc4\x9a\xb3\xbe\x57\x75\xb2\x56\x7e\x32\x85\x0a\x05\x3b\x9c\x1b\x1a\x88\xb0\x63\xb7\x85\xd0\xd4\xe4\x1d\x8a\xaa\xaf\x88\xf3\x23\xc5\x58\xf4\x8c\xbc\xf0\xb8\xe0\x06\xf3\x60\xde\x18\xfc\xc3\x77\xc9\x93\x4c\x3c\x61\x60\xd2\x9d\x31\xe9\xe6\x51\x22\xe4\x05\x66\xeb\x6c\x0a\xff\x46\x46\x96\xaf\xb4\x6d\x8a\xf3\x2c\x5c\x10\x79\xbb\xe1\xfd\x84\xa0\x16\xce\x2b\xd9\x68\xe1\xba\x60\xb4\x52\x8e\x47\x69\x7b\xea\x62\x47\xdc\x47\x25\xcb\xca\x76\x2c\x37\xdb\x59\xb7\xa1\x7e\xd9\x3c\x62\x0b\x07\x2d\xc4\x52\x5e\x7e\x73\x75\xff\xff\xd4\xe0\x37\x31\xfb\xba\xae\xd4\x5f\x58\x5b\xf3\x48\x6a\x7c\x68\xa9\xaf\x07\xe2\xa3\x0c\xe9\xe4\xcd\x06\x79\x8b\x80\x03\x1f\xce\x96\x53\x2c\xe1\xe0\x07\x52\xe7\x16\xdd\xf6\xc4\x2f\x12\xbc\x10\x0c\x08\x88\x6b\xf5\x87\x74\x14\x8b\x0d\x8f\xb1\x98\x65\x84\x3e\xf9\x99\xe3\x79\xf2\x4b\x49\xf2\x93\x07\x07\x27\x5c\xdd\x05\x50\x9e\x8d\xac\xd4\x8a\x3c\x9a\x59\xab\xc2\x22\xbf\xba\xb8\xba\x3c\x6b\xfb\xd8\xcb\xa2\x50\xf1\x42\x84\x07\xed\x4b\x06\xda\x23\x93\x87\xf7\x03\xd6\x3a\x1c\xc0\x85\xb1\xfd\x04\xf7\x2c\xfc\xde\x34\xea\x7d\xc3\xa7\xee\x80\x5f\xeb\x56\xfc\xeb\x8f\xb7\x1d\x48\xa2\x69\xbb\xbc\x34\xae\x85\x4c\x60\x0a\xeb\x09\x6c\x20\x86\x4a\xec\xc3\x45\x92\xde\x0e\xd7\x89\x86\xb4\xb5\x9b\xa6\x06\x45\xd4\x20\x81\x35\x40\xb6\x42\x78\xdf\x2c\xd1\x19\xf4\x48\x2c\xbd\xa9\x69\xb8\x2d\x2c\x0c\x75\x77\x55\x93\x8f\xd6\xe0\x24\x7d\xf3\x2a\x28\x90\xde\x17\xc6\xc3\x69\x7c\x85\xd8\x2d\x21\x41\xbf\xd1\x9b\x7e\x3f\x9a\x5c\x4e\xce\xfe\x1b\x00\x00\xff\xff\x67\x51\x58\x04\xd9\x1b\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 874,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x93\xcd\x8e\x9b\x40\x10\x84\xef\x3c\x45\x49\xbe\x06\x27\x58\xf2\x85\x5b\x94\x4d\xa2\x95\x92\x95\x2f\x9b\x7b\x7b\x68\xf0\x28\xf3\x97\xe9\xc6\x31\x41\xfb\xee\x11\xfe\xc5\xbb\x3b\x27\xa0\xea\xeb\xa9\x29\xa0\x2c\xcb\x62\x01\xcf\xde\x90\xd9\x71\x83\x86\x93\x8b\x83\xe7\xa0\xe8\x85\x1b\x6c\x07\x7c\x73\xfd\x01\x1a\x71\x74\x14\x0b\x98\x18\x94\x6c\xe0\x0c\xeb\xa9\x63\x78\x56\x6a\x48\x69\x59\x50\xb2\xbf\x38\x8b\x8d\xa1\x06\xa5\x24\x1f\xf7\x55\xf1\xdb\x86\xa6\xc6\xc3\x75\x6c\x71\xb1\xd7\x05\x10\xc8\x73\x7d\xdb\x7d\x1c\x61\x5b\x2c\x9f\xc8\xb3\x24\x32\x8c\x97\x97\xb3\xe9\x78\x5b\x63\x1c\xef\xd5\x71\x04\x87\x66\xb2\x49\x62\x33\x4d\xcc\x9c\x9c\x35\x24\x35\xaa\x02\x10\x76\x6c\x34\xe6\x49\x01\x3c\xa9\xd9\xfd\xa0\x2d\x3b\x39\x3d\x78\x13\xa0\x00\x94\x7d\x72\xa4\x7c\x46\x66\x61\xa7\xe5\xee\xe8\xf7\x78\xe0\x12\x65\x5a\xd7\xae\xae\x4c\xf9\x2e\x33\xad\x63\x9b\x33\xa1\xae\x96\xeb\xe5\xea\xd3\xbd\xbe\xe9\x9d\xdb\x44\x67\xcd\x50\xe3\xb1\x7d\x8a\xba\xc9\x2c\x53\xad\x17\x17\xe5\x6e\x96\xaf\x44\xe9\xb1\xae\x56\x00\x16\xf8\x49\x07\xeb\x7b\x3f\xed\x10\xf3\x30\xbd\xd2\x5e\xf8\x03\x6c\x80\xe7\x8e\xb6\x83\xb2\xcc\xc1\x47\xac\x3d\xee\x40\xb1\xff\x18\x6d\xcc\x88\x81\x61\x95\xfd\xdc\x9e\x50\x55\xab\xaa\xc2\x02\x0f\xdc\x52\xef\x14\x29\xe6\x5b\xae\xc5\xe4\xd9\xef\x4f\x97\xcf\xc1\x44\x7f\xfc\xc8\x34\xa2\x63\x85\x8b\x9d\x20\xb6\x60\x32\x3b\x64\xfe\xd3\xb3\x28\x28\x34\xc8\x2c\x29\x06\xe1\xe5\x75\xd0\x34\xf5\xee\x84\xa7\x3e\x8d\xb3\x1c\xf4\x76\x80\x59\xf7\x9b\x98\xb5\x3e\xa5\xbb\xca\xc2\xa6\xcf\x56\x87\x2f\x31\x28\x1f\xb4\x9e\x71\xb9\x0f\x9f\xe5\x59\x38\xbf\x66\xce\xd2\xf7\x1c\xfb\xf4\x56\x23\xe7\xe2\xdf\x4d\xb6\x7b\xeb\xb8\xe3\xaf\x62\xc8\x91\x1e\x7f\x85\x96\x9c\x70\xf1\x3f\x00\x00\xff\xff\x15\x98\xb4\xee\x6a\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
