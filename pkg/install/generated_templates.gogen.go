// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 6929,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xdd\x6f\x1b\x37\x12\x7f\xf7\x5f\x31\x50\x0e\x48\x0c\x48\x2b\xbb\x6e\x8b\xc3\xf6\x5c\x5c\x9a\x0f\xd7\x97\xc6\x35\xec\xf8\x0e\x7d\xaa\x29\xee\x48\x4b\x88\x4b\xee\x71\xb8\x52\x05\xa3\xff\xfb\x61\xc8\xfd\xe0\xca\xb2\x5d\xe4\xed\xf2\x10\x4b\xe4\xcc\x70\xbe\xe7\x47\x6a\x36\x9b\x1d\x89\x5a\xfd\x1b\x1d\x29\x6b\x72\x10\x75\x4d\xf3\xcd\xe9\xd1\x5a\x99\x22\x87\xf7\x58\x6b\xbb\xab\xd0\xf8\xa3\x0a\xbd\x28\x84\x17\xf9\x11\x80\x11\x15\xe6\xb0\xd4\xcd\x1f\x0f\x0f\xa0\x96\x90\x5d\x89\x0a\xa9\x16\x12\xe1\xcf\x3f\xdb\xfd\xf0\x35\x87\x87\x87\xf1\xee\xc3\x03\xa0\x29\x98\x8c\x6a\x94\x2c\xcc\x61\xad\x95\x14\x94\xc3\xe9\x11\x00\xa1\x46\xe9\xad\xe3\x1d\x80\x4a\x78\x59\xfe\x22\x16\xa8\x29\x2e\xa4\x67\x33\xb5\x77\xc2\xe3\x6a\x17\x37\xfd\xae\xc6\x1c\x6e\x50\x3a\x14\x1e\x8f\x00\x3c\x56\xb5\x16\x1e\x5b\x61\x89\x05\xfc\x4f\x18\x63\xbd\xf0\xca\x9a\x5e\x38\x40\xed\x6c\x85\xbe\xc4\x86\x32\x65\xe7\xb5\x75\x3e\x87\xc9\xd9\xc9\xd9\xe9\x04\x5e\x81\x47\xad\x13\x0a\xf0\x16\x48\x3a\x51\x23\xcc\x2b\xf4\x4e\x49\x62\xe3\x6a\xab\x8c\x7f\x4d\xc0\xcc\x59\x2b\x58\x8f\x6c\xd8\xb3\x02\xa0\xf3\x45\xf8\x8c\x6e\xa3\x24\xbe\x95\xd2\x36\xc6\x5f\x8d\x09\x01\x36\x56\x37\x15\xf6\xa2\x66\xad\xa8\x95\xf2\xb3\x35\xee\xfa\x03\x88\xbd\xe0\x87\x03\xbb\x95\x41\xde\x8c\x59\x8a\x10\xe0\x84\xaa\xc0\xa5\x68\xb4\xff\x6c\x0b\xcc\xe1\xe4\xdb\x93\x13\x78\x05\xdb\x12\x0d\x54\xac\x0d\x16\xe0\x50\x14\x33\x6b\xf4\x6e\x0a\x5b\x84\xad\x35\xaf\x3d\x2c\x10\xc4\x42\x23\xfb\x43\x96\x95\x2d\x8e\x5a\x81\xaf\xe0\x4b\xa9\x08\x14\x81\x00\x5f\xd5\x4b\x82\x86\xb0\x80\xa5\x75\xb0\x42\x83\x4e\x78\x65\x56\x70\x7b\xfb\x33\xac\x71\x47\x19\x5c\x1a\xf8\xf4\x77\x82\x1f\xcf\xe1\x34\x3b\x3d\x99\xf6\x52\xba\xb3\xa3\x09\x04\xc2\x61\xaa\x07\x59\x56\xc5\x20\x16\x20\x80\xb0\x16\x9c\x14\xad\xa3\x60\x8b\xbd\x18\x29\x0c\x6c\x9d\xf2\xac\x68\x76\xd8\x7f\x2b\x34\xbd\x33\xb0\xaa\xfd\xee\xbd\x72\xa9\x13\x2b\x2c\x54\x53\xe5\xf0\x19\x2b\xeb\x76\xa9\x9d\x08\x4b\xab\xb5\xdd\xb2\x45\xed\xd1\x8a\x82\xa9\x0d\xf1\x9a\x00\xd9\x90\xb7\x95\x62\x0f\xac\x8d\xdd\x9a\xdf\x4b\x4b\x9e\x7a\x11\x4b\xa5\x71\x0a\xdb\x52\xc9\x12\x76\xb6\x81\xad\xd2\x3a\x1a\xe5\x2d\x14\x96\xeb\x8c\x97\x99\x89\x3f\x38\xb0\x5b\xc3\x6a\xf7\x02\x1c\xd6\x16\x9c\xf0\x25\x3a\xf0\xa5\x30\xed\xc1\x2b\xe5\xcb\x66\x01\x96\x17\x11\xb4\x5a\x63\x06\xbf\xd9\xe6\xb5\xd6\x20\x34\xd9\xee\x88\xb1\xb3\x41\x79\x50\xc6\xdb\xc0\x23\xad\xf1\x42\x19\x74\x53\x58\xa0\xb6\xdb\x0c\x6e\x71\xf0\x6a\xe9\x7d\x4d\xf9\x7c\x5e\x58\x49\x19\x27\x96\x2c\xb8\x74\xd0\xcc\xb9\xf4\xc8\xcf\x57\x8d\x2a\x90\xe6\x0d\xe1\xac\x76\x6a\x23\x3c\x86\xd4\x63\x43\xb2\xd2\x57\xba\x97\xd4\xc5\x82\xa8\x9c\x49\x6b\x96\x6a\xd5\x6f\x01\xc4\x85\xcf\xa2\xce\x93\xc5\xb4\x90\x66\x09\xdb\xd7\xc6\x25\x5b\x37\x0b\x9c\x47\x21\x43\xfa\xbd\x18\x93\xad\xa2\x92\x57\x4a\xb1\x41\x10\x50\xa8\xe5\x12\x1d\x37\xcd\x4e\x42\x5b\x55\x43\x63\x0c\x21\x88\xe2\xd2\x20\x70\x73\xd9\xa8\x02\x3b\xb7\x2f\xd5\xaa\x12\xf5\xa0\x88\xf2\x25\x08\x03\x68\xbc\xdb\x05\x1b\xee\x23\xd1\xfd\x14\x84\x29\xa0\x31\xd2\x56\xdc\xad\x03\x7f\xb4\xf6\x73\x08\xa7\x30\x45\x2f\x05\xcd\x26\x48\x50\x48\x6d\x3c\x1f\x45\x80\xdd\xf0\x15\x11\x48\xd8\x5e\x8c\x40\xe8\x04\xde\x82\xaa\xb8\x4f\xc2\xc5\xf5\x45\x68\x02\xf0\x86\xcd\x22\xb5\x32\xca\x0c\x87\xb3\x71\x1b\x74\x6a\xa9\x64\x68\xd8\x50\x37\xae\xb6\x84\x74\xfc\x17\x1c\xd9\x4b\x89\xed\x23\x7a\x91\x1d\xc4\xe7\xfd\x05\xc7\x81\x70\xab\xa1\x4c\x9f\xf0\xd8\xaa\x5e\x71\xff\xa0\xc4\x35\xe3\x16\xfc\xea\x89\x26\xfc\x98\xef\x40\x13\xee\xdc\xd9\x57\xe2\xa3\xfe\x9f\x4c\x88\xd6\xeb\x0e\x43\x9f\x34\x16\x26\x79\xac\xc4\x09\xa8\x4a\xac\x30\x66\x3f\x33\x64\xf0\x51\x99\x22\xd8\x5c\x71\x5b\x71\x28\x87\xac\x8d\x2d\x45\xa3\x20\xe4\xe6\x11\x58\x39\x08\x8c\x13\x40\xf8\xbe\xee\xcb\x66\x91\x15\x56\xae\xd1\x65\xd2\x56\x73\x37\x8f\x3d\x20\xfc\x99\x7b\xd1\xbb\xae\x8b\x23\xcf\x7b\xc6\x02\x7c\xaa\x17\x2b\x60\x4d\xb3\x9e\x26\x1c\x93\x43\x2b\x50\xd9\x54\x5a\x7e\x9a\x9d\x7e\x97\x9d\x8c\x69\xaf\x1b\xad\xaf\xad\x56\x72\x97\xc3\xe5\xf2\xca\xfa\x6b\x87\x94\x5a\xe1\x90\x6c\xe3\x24\x52\xda\xc7\x1d\xfe\xb7\x41\xf2\xa3\x35\x00\x59\x37\x39\x7c\x77\x52\x8d\x16\xab\xd0\xea\x73\xf8\xfe\xdb\xcf\x6a\x80\x09\xd6\xa5\xcc\xb3\x21\x32\xd7\x01\x32\x9c\x9d\x9c\xf1\xe4\x54\x66\x69\x5d\x15\x52\x56\xe8\x9e\x5a\xab\x0d\x1a\x24\xba\x76\x76\x81\xa9\x06\xec\xd2\x8b\xf1\xd4\x8e\x47\x45\x81\xe3\x65\xe1\xcb\x1c\xe6\xa2\x56\xd1\xd3\x9b\xef\xe7\xaa\x40\xe3\x95\xdf\x65\x75\xb3\x48\x68\x95\x51\x5e\x09\xfd\x1e\xb5\xd8\xdd\x72\x7d\x16\x94\xc3\x77\x09\x81\x57\x15\xda\xc6\x1f\xd8\xe3\x21\xab\xfe\x3f\x54\x4d\x8a\x76\x14\x98\xc3\xf0\x08\xe2\x98\xbb\x8e\x9a\xa1\x97\x41\xb3\x62\x4e\x54\x32\xce\xb3\x11\x79\x82\xb6\x6d\xbf\x59\x71\xc8\x40\x99\x98\x73\xaf\x29\xf2\x10\x95\xf3\x51\x9b\xec\x7c\xf6\xab\xd1\xbb\x1c\xbc\x6b\x90\xa5\x31\x06\x0a\x1d\x6a\xd1\x36\x76\x2e\xa9\x1a\xdd\xd2\x3a\x89\x2c\x34\x82\x1e\xc6\x3c\x4f\x29\x9e\xe2\x92\xb1\xee\x1b\xe1\x5a\xdd\x23\xd9\xd7\xa9\x9f\xd4\xe8\xa5\x91\xba\x09\x9d\x93\xa1\x5b\x1c\x70\x5d\x57\x8d\xd8\xe0\x05\x28\xd3\x81\x99\x1f\x98\x75\x0f\x66\xf4\xdd\x15\x0a\x94\x5a\x38\x86\x6c\x0b\xbb\x49\x1a\xc0\x33\x30\x20\xb6\xc7\xd4\x78\x67\xad\x9f\x67\x44\xe5\x93\x06\x08\x33\x3a\x75\x32\x8c\xa8\x49\x3c\x79\xda\x91\x24\x12\xd0\x6c\x94\xb3\x26\x0c\x84\x38\x6b\x27\x9f\xee\x7e\xfa\xf0\xee\xd7\xab\x8f\x97\x17\x93\x38\x02\xa6\xec\x0f\xbb\x41\xe7\xc6\xf3\x3a\x11\x13\x46\xdc\x62\x17\xa7\xa9\xd7\x87\x6c\x7c\x34\x68\x1f\xdb\x38\x24\x27\x13\x3f\x69\x28\xcf\x3c\xbe\x78\x74\xa7\x71\x8b\x4e\xa0\x48\xab\x5d\x88\x49\x22\x62\x1f\xd0\xa4\x41\x0f\x68\xa6\x83\xde\xc2\x80\xd0\x1e\x9d\x61\x68\xfd\x48\xe3\xa5\xb3\x15\xa7\x45\x87\x58\xa6\x20\x88\xd3\xad\x9d\xaa\xec\x06\x6d\xe5\x9a\x1e\x07\x1b\xcd\x26\x3f\xe0\x97\xc1\xdd\x23\xbf\x6c\x84\x6e\xf0\x91\x4f\x5e\x4a\xe2\xfd\x1c\xe8\x66\xee\x33\x19\xc0\x23\x7f\x3c\xea\x9f\x19\xf6\x4f\xe4\x25\x53\x45\x74\x33\xa2\x1b\xf7\x87\x97\x2a\x6f\x2b\x18\x94\x58\xa0\xa6\xae\xf5\x0e\x7e\xfe\xf2\xe5\x1a\x16\x82\x94\x04\xd1\xf8\x12\xa4\xc3\xd0\x49\x85\x8e\x53\x7d\xb8\x0f\xb0\xc0\x8d\x12\xc1\xf0\xfb\x8b\xcb\x2f\xbf\xbf\xbd\xfb\xf2\xf3\xdd\xed\x87\x9b\xfb\x60\x6e\xbf\xf4\xe9\xc3\x6f\xf7\xa3\x84\xdf\x08\xa7\xf8\x36\x47\x1d\x40\x4e\x04\x46\xf8\xb2\x17\xbf\x8f\xce\x56\xe3\x18\x46\xb2\x1b\x5c\xe6\x23\xcb\x47\x58\x91\x1b\x1b\x9b\x30\x38\x80\x7d\x9e\x8f\xfc\x11\x5d\x10\xef\xa8\x58\xf0\x24\x96\x42\x96\x58\x70\x6a\xa5\xb9\xdd\xc3\x6a\xf6\x14\x4b\x9f\x26\x52\xac\x6b\x71\x73\xc2\xd0\xde\xb1\x03\xe3\x34\x1c\xc2\x77\xc3\xd6\xc7\xbe\x44\x4a\x73\x61\x40\xaf\x7e\x6b\x59\xcb\x86\xfd\x14\x2a\x2e\x3c\x08\x84\x44\x84\xd2\x6e\xc3\xfd\xd7\x1a\x83\x32\x84\x4c\xf9\x71\xee\xcc\x66\xbd\x01\xe1\xf2\xc3\x87\x9f\xf7\x4b\x59\x0b\xfa\x32\xda\xc8\x4c\xea\x86\x3c\xba\x8c\x1b\xb8\x4e\x5d\x72\x47\xb1\xd7\x0c\xae\x78\x17\x49\x2f\xaf\x47\x46\x71\xdb\x21\xf4\xe1\x7e\x3d\xce\xec\x41\x87\x8e\x9e\xb3\xcb\x3b\xa6\x0c\x37\xde\x64\x04\xa5\x1a\xb7\xd4\xe7\x47\x23\x94\xa9\x08\xaa\x86\xc2\x0b\x40\xf0\x9e\xc2\x22\x96\xd3\x22\x0c\xb6\x80\xf1\xc2\xc5\xff\x4d\x77\x9b\x3e\x4e\x75\xe9\x9a\x4b\x2c\x43\x4e\xe0\xe4\xfe\x3f\x52\x84\x87\x41\x1c\x70\xb3\x42\xb9\xf3\x47\x63\x2f\x55\xeb\x26\x41\x98\x43\xf0\xee\x6e\x7e\x89\x0f\x14\xc2\xac\xe2\xde\x85\xf2\xe1\xd2\x4c\xca\x5b\xb7\xeb\xdb\xf5\x47\x46\xc6\x89\xb8\xe7\x6a\x8e\xd3\x26\xb1\xbd\x2d\x99\x83\xe5\x94\xd6\x42\x87\x9d\xff\xf6\x26\xad\xcc\xe3\x7c\xf8\xfe\xe9\xc3\x6f\xc7\xff\x8c\x57\xf7\x00\xab\x1b\x42\x37\x1f\x94\xcd\xd2\x42\x67\xff\x70\x39\x35\x4e\x9f\x3f\x3c\x40\x76\xa1\x3c\x1b\x1b\x9e\xe2\xc6\x14\x0b\x27\x8c\x2c\x3b\xa2\x9f\xc2\xb7\xf8\x28\xa7\x96\x61\x89\xfb\x17\x1d\xe2\x64\x0c\xc7\x7c\xb7\x21\x53\xe8\x5f\x56\x99\x84\x61\x32\x9d\xb4\x6f\x7b\x9a\x30\x65\x7f\xbe\xa9\x39\xe4\xc4\x93\xf1\xd6\x55\x09\xa3\x96\x8c\xc9\xb9\x86\x48\x15\xe8\x62\x38\xf6\x6e\x36\xe1\x4d\xc2\x12\x42\x63\x0a\x74\x7b\x31\x76\xa8\x85\x57\x1b\x0c\x90\x93\xba\x0c\x5c\x8d\xe2\xbc\x57\x93\xbd\x71\xd4\x2c\x0a\xe5\x4e\xa7\xf1\xef\x37\xfd\x43\xe5\xe0\x9c\xf0\x10\x79\xc8\x39\xe1\x75\xaf\xf3\x6a\x47\x75\x40\xc0\x1d\xa1\x3b\xc4\xcf\xc1\xed\x23\xc7\x34\x70\x98\xff\x43\x25\xd4\x41\x05\x90\x37\x3a\x09\x1d\xd5\xf0\xd4\x7a\x30\x1c\xc8\xad\x64\x6b\xd9\xa1\x68\xc2\xf3\x1d\xfb\x89\x27\xb6\xf2\x7b\x17\xf0\xd4\x57\xed\xec\x6b\x27\xdb\xf9\x33\xa3\xae\xe3\x68\x65\x31\xd7\xf9\x3f\xd6\xb8\x03\x55\xfc\xd8\x93\x3d\x03\x67\x12\xad\x58\x84\xf0\x8d\xc3\xd1\x2b\xc0\x81\xb3\xc2\xf6\x6e\xd6\xd3\xd3\xa8\x5d\x75\xdd\x1a\x94\x87\x52\x50\x18\xc5\xd6\xe8\x1d\x08\x29\x91\x62\x47\x2f\x31\x3e\xa4\xbd\xe9\xde\x6c\xee\x97\x42\x13\xde\x1f\x1f\x38\xad\xe3\x3f\x1a\x42\x74\xd3\x4e\xf7\x43\x51\x4a\xc9\x0f\x45\x86\xbc\x6b\xa4\x8f\x1a\x6e\xc3\x05\x9e\x41\x5d\xe3\x81\x76\x46\xc2\xc2\xda\xf5\x1a\xb1\xe6\x3c\xef\x95\x9b\xac\x94\x9f\x4c\xa1\x42\xc1\x2e\xe6\x16\x06\x22\xdc\xaa\xdb\xd4\x6f\x6a\xf2\x0e\x45\xd5\xd7\xc0\xbe\x19\x2c\x7a\x46\x5e\x78\x3c\xe7\x96\xf2\x64\xa6\x18\xfc\xc3\x77\xe9\x92\xcc\x38\x61\x60\xd2\x9d\x31\xe9\x26\x50\x22\xe4\x0d\x66\xab\x6c\x0a\xff\x41\xc6\x92\xef\xb4\x6d\x8a\xe3\x2c\x3c\x09\x79\xbb\xe6\x1b\x09\x41\x2d\x9c\x57\xb2\xd1\xc2\x75\xee\x6f\xa5\xec\x0f\xcf\xf6\xd4\xf3\x2d\x71\xe7\x94\x2c\x2b\xdb\xb2\xdc\x6c\x6b\xdd\x9a\xfa\xeb\xe5\x1e\x5b\x38\xe8\x5c\x2c\xe4\xe9\x37\x67\x8f\xff\x4f\x0d\xbe\x45\xb7\x39\xf0\x92\xcf\x40\x7a\x40\x0e\x9c\xe3\x3f\xa4\x23\x4c\xac\xb9\xfd\xc7\x58\x11\xfa\xe4\xe7\x81\xd7\xc9\x2f\x0c\xc9\x4f\x05\x6c\x62\x78\xf2\x0a\x60\x36\x1b\x65\x89\x56\xe4\xd1\xcc\x5a\x15\xce\xf3\xb3\x93\xb3\xd3\x2e\xb9\xde\x16\x85\x8a\x0f\x09\x3c\xa0\xde\x32\x40\x1d\x35\xda\x61\x7f\xc0\x28\x0f\x0f\xe0\xc2\xb8\x7b\x81\x7b\x16\x7e\xa7\x19\xf5\x8c\xe1\x53\x77\xc0\xaf\x75\x2b\xfe\xfd\xd5\x6d\x07\x2e\x68\xda\x82\xfe\xc6\xb5\x50\x03\x4c\x61\x3d\x81\x0d\xc4\x50\x89\x5d\x78\x80\xd1\x9b\xe1\x19\xce\x90\xb6\x76\xdd\xd4\xa0\x88\x1a\x24\xb0\x06\xc8\x56\x08\x9f\x9a\x05\x3a\x83\x1e\x89\xa5\x37\x35\x0d\xaf\x6c\x85\xa1\xee\x8d\x67\x72\x65\x0d\x4e\xd2\x9d\x77\x41\x81\xf4\x9d\x2d\x1e\x4e\xe3\xa7\xb7\x0e\xbc\x07\xfd\x46\x3b\xfd\xbd\x62\x72\x3a\x39\xfa\x5f\x00\x00\x00\xff\xff\xa0\xfd\xff\x6d\x11\x1b\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 874,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x93\xcd\x6e\x9c\x40\x10\x84\xef\x3c\x45\x49\x7b\x0d\x1b\x61\x69\x2f\xdc\xa2\x38\x89\x2c\x25\xd6\x5e\x9c\x7b\x7b\x68\xf0\x28\xf3\x97\xe9\x66\xb3\x04\xf9\xdd\xa3\xd9\x5f\x36\xf6\x9c\x80\xaa\xaf\xa7\xa6\x80\xba\xae\xab\x15\x3c\x7b\x43\xe6\x85\x3b\x74\x9c\x5c\x9c\x3c\x07\xc5\x28\xdc\xe1\x79\xc2\x57\x37\xee\xa1\x11\x07\x47\xb5\x82\x89\x41\xc9\x06\xce\xb0\x9e\x06\x86\x67\xa5\x8e\x94\xd6\x15\x25\xfb\x93\xb3\xd8\x18\x5a\x50\x4a\xf2\x71\xd7\x54\xbf\x6c\xe8\x5a\xdc\x5f\xc6\x56\x67\x7b\x5b\x01\x81\x3c\xb7\xd7\xdd\xe7\x19\xb6\xc7\xfa\x91\x3c\x4b\x22\xc3\x78\x7d\x3d\x99\x0e\xb7\x2d\xe6\xf9\x56\x9d\x67\x70\xe8\x8a\x4d\x12\x9b\x32\x31\x73\x72\xd6\x90\xb4\x68\x2a\x40\xd8\xb1\xd1\x98\x8b\x02\x78\x52\xf3\xf2\x9d\x9e\xd9\xc9\xf1\xc1\x9b\x00\x15\xa0\xec\x93\x23\xe5\x13\xb2\x08\x5b\x96\xbb\xa1\xdf\xe3\x81\x73\x94\xb2\x2e\x5d\x5d\x98\xfa\x5d\xa6\xac\x43\x9b\x0b\xa1\x6d\xd6\x9b\x75\xb3\xb9\xd5\xb7\xa3\x73\xdb\xe8\xac\x99\x5a\x3c\xf4\x8f\x51\xb7\x99\xa5\xd4\x7a\x76\x51\x1e\x16\xf9\x6a\xd4\x1e\x9b\xe6\x0e\xc0\x0a\x3f\x68\x6f\xfd\xe8\xcb\x0e\x31\x4f\xe5\x95\x8e\xc2\x1f\x60\x03\x3c\x0f\xf4\x3c\x29\xcb\x12\x7c\xc0\xc6\xe3\x06\x14\xfb\x97\xd1\xc7\x8c\x18\x18\x56\xd9\x2f\xed\x09\x4d\x73\xd7\x34\x58\xe1\x9e\x7b\x1a\x9d\x22\xc5\x7c\xcd\xb5\x2a\x9e\xdd\xee\x78\xf9\x14\x4c\xf4\x87\x8f\x4c\x23\x06\x56\xb8\x38\x08\x62\x0f\x26\xf3\x82\xcc\xbf\x47\x16\x05\x85\x0e\x99\x25\xc5\x20\xbc\xbe\x0c\x2a\x53\x6f\x4e\x78\xec\xd3\x38\xcb\x41\xaf\x07\x58\x74\xbf\x8d\x59\xdb\x63\xba\x8b\x2c\x6c\xc6\x6c\x75\xfa\x1c\x83\xf2\x5e\xdb\x05\x97\xc7\xf0\x49\x9e\x84\xf3\xff\xcc\x49\xfa\x96\xe3\x98\xde\x6a\xe4\x5c\xfc\xb3\xcd\x76\x67\x1d\x0f\xfc\x45\x0c\x39\xd2\xc3\xaf\xd0\x93\x13\xae\xfe\x05\x00\x00\xff\xff\x5d\x9a\x63\xab\x6a\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
