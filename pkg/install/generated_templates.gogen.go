// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 7265,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x6d\x6f\x1b\x37\xf2\x7f\xef\x4f\x31\x50\xfe\x40\x62\x40\x5a\xd9\x75\xdb\xff\x61\x7b\x2e\x2e\xcd\x83\x9b\x4b\x93\x1a\x76\x72\x87\xbe\xaa\x29\xee\x48\x4b\x88\x4b\xee\x71\xb8\x52\x05\xa1\xdf\xfd\x30\xe4\x3e\x70\x25\xd9\x29\xf2\xee\xf2\x22\xb6\xc9\xe1\x70\x9e\xe7\x37\xdc\xd9\x6c\x76\x26\x6a\xf5\x2f\x74\xa4\xac\xc9\x41\xd4\x35\xcd\x37\x97\x67\x6b\x65\x8a\x1c\x5e\x63\xad\xed\xae\x42\xe3\xcf\x2a\xf4\xa2\x10\x5e\xe4\x67\x00\x46\x54\x98\xc3\x52\x37\x7f\xec\xf7\xa0\x96\x90\x7d\x14\x15\x52\x2d\x24\xc2\x9f\x7f\xb6\xfb\xe1\xcf\x1c\xf6\xfb\xf1\xee\x7e\x0f\x68\x0a\x26\xa3\x1a\x25\x33\x73\x58\x6b\x25\x05\xe5\x70\x79\x06\x40\xa8\x51\x7a\xeb\x78\x07\xa0\x12\x5e\x96\xbf\x88\x05\x6a\x8a\x0b\xe9\xdd\x4c\xed\x9d\xf0\xb8\xda\xc5\x4d\xbf\xab\x31\x87\x3b\x94\x0e\x85\xc7\x33\x00\x8f\x55\xad\x85\xc7\x96\x59\xa2\x01\xff\x13\xc6\x58\x2f\xbc\xb2\xa6\x67\x0e\x50\x3b\x5b\xa1\x2f\xb1\xa1\x4c\xd9\x79\x6d\x9d\xcf\x61\x72\x75\x71\x75\x39\x81\x67\xe0\x51\xeb\x84\x02\xbc\x05\x92\x4e\xd4\x08\xf3\x0a\xbd\x53\x92\x58\xb9\xda\x2a\xe3\x9f\x13\xf0\xe1\xac\x65\xac\x47\x3a\x1c\x68\x01\xd0\xd9\x22\x6c\xd9\x02\xef\x47\x56\xe0\x7f\x0b\xf4\x22\x5b\x37\x0b\x74\x06\x3d\x06\xe1\x2c\xe5\xa0\x95\x69\x59\xb0\xe9\xdc\x46\x49\x7c\x29\xa5\x6d\x8c\xff\x38\xbe\x01\x60\x63\x75\x53\x61\x2f\xc3\xac\x95\x61\xa5\xfc\x6c\x8d\xbb\xfe\x22\x62\xf3\xf9\xe1\xe2\x6e\x65\xe0\x37\xe3\x23\x45\x88\x8c\x84\xaa\xc0\xa5\x68\xb4\xff\x60\x0b\xcc\xe1\xe2\xdb\x8b\x0b\x78\x06\xdb\x12\x0d\x54\x2c\x0d\x16\xe0\x50\x14\x33\x6b\xf4\x6e\x0a\x5b\x84\xad\x35\xcf\x3d\x2c\x10\xc4\x42\x23\x1b\x52\x96\x95\x2d\xce\x5a\x86\xcf\xe0\x53\xa9\x08\x14\x81\x00\x5f\xd5\x4b\x82\x86\xb0\x80\xa5\x75\xb0\x42\x83\x4e\x78\x65\x56\x70\x7f\xff\x33\xac\x71\x47\x19\xbc\x33\xf0\xfe\x6f\x04\x3f\x5e\xc3\x65\x76\x79\x31\xed\xb9\x74\x77\x47\x15\x08\x84\xc3\x54\x0e\xb2\x2c\x8a\x41\x2c\x40\x00\x61\x2d\x38\x9a\x5a\x43\xc1\x16\x7b\x36\x52\x18\xd8\x3a\xe5\x59\xd0\xec\xb4\xfd\x56\x68\x7a\x63\x60\x55\xfb\xdd\x6b\xe5\x52\x23\x56\x58\xa8\xa6\xca\xe1\x03\x56\xd6\xed\x52\x3d\x11\x96\x56\x6b\xbb\x65\x8d\xda\xab\x15\x05\x55\x1b\xe2\x35\x01\xb2\x21\x6f\x2b\xc5\x16\x58\x1b\xbb\x35\xbf\x97\x96\x3c\xf5\x2c\x96\x4a\xe3\x14\xb6\xa5\x92\x25\xec\x6c\x03\x5b\xa5\x75\x54\xca\x5b\x28\x2c\x27\x28\x2f\xf3\x21\xfe\xc5\x81\xdd\x1a\x16\xbb\x67\xe0\xb0\xb6\xe0\x84\x2f\xd1\x81\x2f\x85\x69\x2f\x5e\x29\x5f\x36\x0b\xb0\xbc\x88\xa0\xd5\x1a\x33\xf8\xcd\x36\xcf\xb5\x06\xa1\xc9\x76\x57\x8c\x8d\x0d\xca\x83\x32\xde\x86\x33\xd2\x1a\x2f\x94\x41\x37\x85\x05\x6a\xbb\xcd\xe0\x1e\x07\xab\x96\xde\xd7\x94\xcf\xe7\x85\x95\x94\x71\x60\xc9\x82\xc3\x1a\xcd\x9c\x73\x96\xfc\x7c\xd5\xa8\x02\x69\xde\x10\xce\x6a\xa7\x36\xc2\x63\x08\x3d\x56\x24\x2b\x7d\xa5\x7b\x4e\x9d\x2f\x88\xca\x99\xb4\x66\xa9\x56\xfd\x16\x40\x5c\xf8\x20\xea\x3c\x59\x4c\x33\x70\x96\x1c\xfb\x5a\xbf\x84\xd4\x9c\x47\x26\x43\xf8\x7d\xd1\x27\x5b\x45\x25\xaf\x94\x62\x83\x20\xa0\x50\xcb\x25\x3a\xae\xb6\x1d\x87\x36\xab\x86\x8a\x1a\x5c\x10\xd9\xa5\x4e\xe0\xaa\xb4\x51\x05\x76\x66\x5f\xaa\x55\x25\xea\x41\x10\xe5\x4b\x10\x06\xd0\x78\xb7\x0b\x3a\x3c\x44\xa2\x87\x29\x08\x53\x40\x63\xa4\xad\xb8\xcc\x87\xf3\x51\xdb\x0f\xc1\x9d\xc2\x14\x3d\x17\x34\x9b\xc0\x41\x21\xb5\xfe\x3c\xf2\x00\x9b\xe1\x2b\x3c\x90\x1c\xfb\xa2\x07\x42\x25\xf0\x16\x54\xc5\x05\x16\x6e\x6e\x6f\x42\x11\x80\x17\xac\x16\xa9\x95\x51\x66\xb8\x9c\x95\xdb\xa0\x53\x4b\x25\x43\xa5\x87\xba\x71\xb5\x25\xa4\xf3\xbf\x60\xc8\x9e\x4b\x2c\x1f\xd1\x8a\x6c\x20\xbe\xef\x2f\x18\x0e\x84\x5b\x0d\x69\xfa\x88\xc5\x56\xf5\x8a\xeb\x07\x25\xa6\x19\x97\xe0\x67\x8f\x14\xe1\xe3\x73\x27\x8a\x70\x67\xce\x3e\x13\x8f\xea\x7f\xd2\x21\x5a\xab\x3b\x0c\x75\xd2\x58\x98\xe4\x31\x13\x27\xa0\x2a\xb1\xc2\x18\xfd\x7c\x20\x83\xb7\xca\x14\x41\xe7\x8a\xcb\x8a\x43\x39\x44\x6d\x2c\x29\x1a\x05\x21\x17\x8f\x70\x94\x9d\xc0\x00\x03\x84\xef\xf3\xbe\x6c\x16\x59\x61\xe5\x1a\x5d\x26\x6d\x35\x77\xf3\x58\x03\xc2\x8f\xb9\x17\xbd\xe9\x3a\x3f\x32\x50\x60\x10\xc1\xb7\x7a\xb1\x02\x96\x34\xeb\x69\xc2\x35\x39\xb4\x0c\x95\x4d\xb9\xe5\x97\xd9\xe5\xff\x67\x97\x63\xda\xdb\x46\xeb\x5b\xab\x95\xdc\xe5\xf0\x6e\xf9\xd1\xfa\x5b\x87\x94\x6a\xe1\x90\x6c\xe3\x24\x52\x5a\xc7\x1d\xfe\xa7\x41\xf2\xa3\x35\x00\x59\x37\x39\x7c\x77\x51\x8d\x16\xab\x50\xea\x73\xf8\xfe\xdb\x0f\x6a\xc0\x17\xd6\xa5\x87\x67\x83\x67\x6e\x03\xd6\xb8\xba\xb8\xe2\xce\xa9\xcc\xd2\xba\x2a\x84\xac\xd0\x3d\xb5\x56\x1b\x34\x48\x74\xeb\xec\x02\x53\x09\xd8\xa4\x37\xe3\xae\x1d\xaf\x8a\x0c\xc7\xcb\xc2\x97\x39\xcc\x45\xad\xa2\xa5\x37\xdf\xcf\x55\x81\xc6\x2b\xbf\xcb\xea\x66\x91\xd0\x2a\xa3\xbc\x12\xfa\x35\x6a\xb1\xbb\xe7\xfc\x2c\x28\x87\xef\x12\x02\xaf\x2a\xb4\x8d\x3f\xb1\xc7\x4d\x56\xfd\x6f\x88\x9a\x24\xed\xc8\x31\xa7\xe1\x11\xc4\x36\x77\x1b\x25\x43\x2f\x83\x64\xc5\x9c\xa8\x64\x80\x68\x23\x64\x05\x6d\xdb\x7a\xb3\x62\x97\x81\x32\x31\xe6\x9e\x53\x3c\x43\x54\xce\x47\x65\xb2\xb3\xd9\xaf\x46\xef\x72\xf0\xae\x41\xe6\xc6\x18\x28\x54\xa8\x45\x5b\xd8\x39\xa5\x6a\x74\x4b\xeb\x24\x32\xd3\x08\x7a\x18\xf3\x3c\x26\x78\x8a\x4b\xc6\xb2\x6f\x84\x6b\x65\x8f\x64\x5f\x27\x7e\x92\xa3\xef\x8c\xd4\x4d\xa8\x9c\x0c\xdd\x62\x83\xeb\xaa\x6a\xc4\x06\x5f\x80\x32\x1d\x98\xf9\x81\x8f\x1e\xc0\x8c\xbe\xba\x42\x81\x52\x0b\xc7\x90\x6d\x61\x37\x49\x01\x78\x02\x06\xc4\xf2\x98\x2a\xef\xac\xf5\xf3\x8c\xa8\x7c\x54\x01\x61\x46\xb7\x4e\x86\x16\x35\x89\x37\x4f\x3b\x92\x84\x03\x9a\x8d\x72\xd6\x84\x86\x10\x7b\xed\xe4\xfd\xe7\x9f\xde\xbc\xfa\xf5\xe3\xdb\x77\x37\x93\xd8\x02\xa6\x6c\x0f\xbb\x41\xe7\xc6\xfd\x3a\x61\x13\x5a\xdc\x62\x17\xbb\xa9\xd7\xa7\x74\x3c\x6a\xb4\xc7\x3a\x0e\xc1\xc9\xc4\x8f\x2a\xca\x3d\x8f\x27\x96\xee\x36\x2e\xd1\x09\x14\x69\xa5\x0b\x3e\x49\x58\x1c\x02\x9a\xd4\xe9\x01\xcd\x74\xd0\x5b\x18\x10\xda\xa3\x33\x0c\xad\x8f\x24\x5e\x3a\x5b\x71\x58\x74\x88\x65\x0a\x82\x38\xdc\xda\xae\xca\x66\xd0\x56\xae\xe9\xd8\xd9\x68\x36\xf9\x09\xbb\x0c\xe6\x1e\xd9\x65\x23\x74\x83\x47\x36\xf9\x52\x10\x1f\xc6\x40\xd7\x73\x9f\x88\x00\x6e\xf9\xe3\x56\xff\x44\xb3\x7f\x24\x2e\x99\x2a\xa2\x9b\x11\xdd\xb8\x3e\x7c\x29\xf3\xb6\x82\x41\x89\x05\x6a\xea\x5a\xef\xe0\xe7\x4f\x9f\x6e\x61\x21\x48\x49\x10\x8d\x2f\x41\x3a\x0c\x95\x54\xe8\xd8\xd5\x87\x79\x80\x19\x6e\x94\x08\x8a\x3f\xdc\xbc\xfb\xf4\xfb\xcb\xcf\x9f\x7e\xfe\x7c\xff\xe6\xee\x21\xa8\xdb\x2f\xbd\x7f\xf3\xdb\xc3\x28\xe0\x37\xc2\x29\x9e\xe6\xa8\x03\xc8\x09\xc3\x08\x5f\x0e\xfc\xf7\xd6\xd9\x6a\xec\xc3\x48\x76\x87\xcb\x7c\xa4\xf9\x08\x2b\x72\x61\x63\x15\x06\x03\xb0\xcd\xf3\x91\x3d\xa2\x09\xe2\x8c\x8a\x05\x77\x62\x29\x64\x89\x05\x87\x56\x1a\xdb\x3d\xac\x66\x4b\x31\xf7\x69\xc2\xc5\xba\x16\x37\x27\x07\xda\x19\x3b\x1c\x9c\x86\x4b\x78\x36\x6c\x6d\xec\x4b\xa4\x34\x16\x06\xf4\xea\xb7\x96\xa5\x6c\xd8\x4e\x21\xe3\xc2\x4b\x42\x08\x44\x28\xed\x36\xcc\xbf\xd6\x18\x94\xc1\x65\xca\x8f\x63\x67\x36\xeb\x15\x08\xc3\x0f\x5f\x7e\xdd\x2f\x65\x2d\xe8\xcb\x68\x23\x33\xa9\x1b\xf2\xe8\x32\x2e\xe0\x3a\x35\xc9\x67\x8a\xb5\x66\x30\xc5\xab\x48\xfa\xee\x76\xa4\x14\x97\x1d\x42\x1f\xe6\xeb\x71\x64\x0f\x32\x74\xf4\x1c\x5d\xde\x31\x65\x98\x78\x93\x16\x94\x4a\xdc\x52\x5f\x9f\x8d\x50\xa6\x22\xa8\x1a\x0a\x2f\x00\xc1\x7a\x0a\x8b\x98\x4e\x8b\xd0\xd8\x02\xc6\x0b\x83\xff\x8b\x6e\x9a\x3e\x4f\x65\xe9\x8a\x4b\x4c\x43\x0e\xe0\x64\xfe\x1f\x09\xc2\xcd\x20\x36\xb8\x59\xa1\xdc\xf5\x51\xdb\x4b\xc5\xba\x4b\x10\xe6\xe0\xbc\xcf\x77\xbf\xc4\x07\x0a\x61\x56\x71\xef\x46\xf9\x30\x34\x93\xf2\xd6\xed\xfa\x72\xfd\x96\x91\x71\xc2\xee\xa9\x9c\xe3\xb0\x49\x74\x6f\x53\xe6\x64\x3a\xa5\xb9\xd0\x61\xe7\xff\x7b\x91\x66\xe6\x79\x3e\xfc\xfd\xfe\xcd\x6f\xe7\xff\x88\xa3\x7b\x80\xd5\x0d\xa1\x9b\x0f\xc2\x66\x69\xa2\xb3\x7d\x38\x9d\x1a\xa7\xaf\xf7\x7b\xc8\x6e\x94\x67\x65\xc3\x1b\xde\x98\x62\xe1\x84\x91\x65\x47\xf4\x53\xf8\x2b\xbe\xe6\xa9\x65\x58\xe2\xfa\x45\xa7\x4e\x32\x86\xe3\x73\xf7\x21\x52\xe8\x9f\x56\x99\xe4\xc0\x64\x3a\x69\x1f\x05\x35\x61\x7a\xfc\xe9\xa2\xe6\x90\x03\x4f\xc6\xa9\xab\x12\x46\x2d\x19\x93\x73\x0e\x91\x2a\xd0\x45\x77\x1c\x4c\x36\xe1\x4d\xc2\x12\x42\x63\x0a\x74\x07\x3e\x76\xa8\x85\x57\x1b\x0c\x90\x93\xba\x08\x5c\x8d\xfc\x7c\x90\x93\xbd\x72\xd4\x2c\x0a\xe5\x2e\xa7\xf1\xe7\x37\xfd\x0b\xe7\x60\x9c\xf0\x82\x79\xca\x38\xe1\x59\xb0\xb3\x6a\x47\x75\x82\xc1\x67\x42\x77\xea\x3c\x3b\xb7\xf7\x1c\xd3\xc0\xe9\xf3\x6f\x2a\xa1\x4e\x0a\x80\xbc\xd1\x71\xe8\xa8\x86\x37\xda\x93\xee\x40\x2e\x25\x5b\xcb\x06\x45\x13\x9e\xef\xd8\x4e\xdc\xb1\x95\x3f\x18\xc0\x53\x5b\xb5\xbd\xaf\xed\x6c\xd7\x4f\xb4\xba\xee\x44\xcb\x8b\x4f\x5d\xff\x7d\x8d\x3b\x50\xc5\x8f\x3d\xd9\x13\x70\x26\x91\x8a\x59\x08\xdf\x38\x1c\xbd\x02\x9c\xb8\x2b\x6c\xef\x66\x3d\x3d\x8d\xca\x55\x57\xad\x41\x79\x28\x05\x85\x56\x6c\x8d\xde\x81\x90\x12\x29\x56\xf4\x12\xe3\x43\xda\x8b\xee\xcd\xe6\x61\x29\x34\xe1\xc3\xf9\xd9\x7e\x3f\xeb\x1c\x71\xd7\xf6\xf0\x53\xbe\xe8\x98\x06\xfa\xe3\x7c\x38\x4d\x76\xc2\x4f\xe4\x5d\x23\x7d\x94\x77\x1b\xc6\x79\x86\x78\x8d\x07\xda\x19\x09\x0b\x6b\xd7\x6b\xc4\x9a\xa3\xbe\x17\x75\xb2\x52\x7e\x32\x85\x0a\x05\x1b\x9c\x0b\x1a\x88\x30\x63\xb7\x89\xd0\xd4\xe4\x1d\x8a\xaa\xcf\x88\xf3\x03\xc1\x98\xf5\x8c\xbc\xf0\x78\xcd\x05\xe6\xd1\xb8\x31\xf8\x87\xef\x82\x27\xe9\x78\xc2\xc0\xa4\xbb\x63\xd2\xf5\xa3\x84\xc9\x0b\xcc\x56\xd9\x14\xfe\x8d\x8c\x2c\x5f\x69\xdb\x14\xe7\x59\x78\x20\xf2\x76\xcd\xf3\x09\x41\x2d\x9c\x57\xb2\xd1\xc2\x75\xce\x68\xb9\x1c\xb6\xd2\xf6\xd6\xeb\x2d\x71\x1d\x95\xcc\x2b\xdb\x32\xdf\x6c\x6b\xdd\x9a\xfa\x61\xf3\xe0\x58\xb8\xe8\x5a\x2c\xe4\xe5\x37\x57\xc7\xff\xa7\x0a\xbf\x89\xd1\xd7\x55\xa5\xfe\xc1\xda\x9a\x27\x42\xe3\x43\x4b\x7d\x33\x10\x1f\x44\x48\xc7\x6f\x36\xf0\xbb\x0e\x38\xf0\xf1\x68\x39\x75\x24\x5c\xfc\x48\xe8\xdc\xa3\xdb\x9c\xf8\x94\xc1\x03\xc1\x80\x80\x38\x57\x7f\x48\x5b\xb1\x58\x73\x1b\x8b\x51\x46\xe8\x93\xef\x23\xcf\x93\x4f\x2c\xc9\xb7\x12\x76\x4e\x78\xba\x0b\xa0\x3c\x1b\x69\xa9\x15\x79\x34\xb3\x56\x84\xeb\xfc\xea\xe2\xea\xb2\x33\x92\xb1\x1e\xb2\x3b\x5c\x29\xf2\x6e\x77\x2f\x85\x09\xb1\x7a\x60\x26\xd7\xee\xcf\xa8\x25\x38\xd6\xb8\x2d\x8b\x2f\x8b\x42\xc5\xf7\x15\xee\xdb\x2f\x19\xb7\x8f\x2c\x38\xec\x0f\xd0\x6d\xbf\x07\x17\x50\xc0\x17\x4e\xcf\xc2\x77\xaf\x51\x29\x1d\x7e\xeb\x2e\xf8\xb5\x6e\xd9\xbf\xfe\x78\xdf\x61\x2e\x9a\xb6\xb3\x50\xe3\x5a\x04\x06\xa6\xb0\x9e\xc0\x06\x62\xa8\xc4\x2e\xbc\x4b\xe9\xcd\xf0\x3a\x69\x48\x5b\xbb\x6e\x6a\x50\x44\x0d\x12\x58\x03\x64\x2b\x84\xf7\xfd\xd7\x22\xe6\xde\xd4\x34\x3c\x3e\x16\x86\xba\xa7\xaf\xc9\x47\x6b\x70\x92\xee\xbc\x0a\x02\xa4\xcf\x8f\xf1\x72\x1a\xbf\x48\x76\x33\x4d\x90\x6f\xb4\xd3\x8f\x5b\x93\xcb\xc9\xd9\x7f\x03\x00\x00\xff\xff\x79\x0b\x87\xdd\x61\x1c\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 931,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\xcb\x6e\x9c\x40\x10\xbc\xf3\x15\x25\xed\x35\xe0\x60\xc9\x17\x6e\x51\x9c\x44\x96\x12\x6b\xa5\xc8\xb9\xf7\x0e\x0d\x1e\x79\x5e\x99\xe9\xd9\x2c\x41\xfe\xf7\x08\xf6\x05\xb1\xfb\x04\x54\x55\x57\x75\xcf\x50\x96\x65\xb1\x81\x65\xab\x48\x3d\x73\x8b\x96\x83\xf1\x83\x65\x27\xc8\x89\x5b\xec\x06\x7c\x35\xf9\x00\xf1\x98\x19\xc5\x06\xca\x3b\x21\xed\x38\x42\x5b\xea\x19\x96\x85\x5a\x12\xaa\x0a\x0a\xfa\x17\xc7\xa4\xbd\x6b\x40\x21\xa4\x9b\x7d\x5d\xbc\x68\xd7\x36\xb8\xbf\xb4\x2d\xce\xf4\xa6\x00\x1c\x59\x6e\xae\xee\xe3\x08\xdd\xa1\x7a\x24\xcb\x29\x90\x62\xbc\xbe\x9e\x48\xf3\x6b\x83\x71\x5c\xa3\xe3\x08\x76\xed\x44\x4b\x81\xd5\xd4\x31\x72\x30\x5a\x51\x6a\x50\x17\x40\x62\xc3\x4a\x7c\x9c\x10\xc0\x92\xa8\xe7\xef\xb4\x63\x93\x8e\x1f\xde\x04\x28\x00\x61\x1b\x0c\x09\x9f\x24\x8b\xb0\x53\x99\x95\xfa\x3d\x3d\x70\x8e\x32\xe3\xbe\xe5\x9f\xab\x10\x53\xed\x58\xa8\x7a\xc9\x3b\x8e\x8e\x85\x53\xa5\xfd\x8d\x4f\x0d\x8c\x76\xf9\x70\x22\x5d\x96\x7c\x31\x2b\xdf\x35\x9b\x6a\x3e\x86\x05\xd0\xd4\xd5\x5d\x75\xfb\x71\x8d\x6f\xb3\x31\x5b\x6f\xb4\x1a\x1a\x3c\x74\x8f\x5e\xb6\x91\xd3\x74\x1e\x67\x16\xc5\x7e\x31\x58\x89\xd2\xe2\xae\xbe\x05\xb0\xc1\x0f\x3a\x68\x9b\xed\xe4\xe0\xe3\x30\xdd\x85\x9c\xf8\x03\xb4\x83\xe5\x9e\x76\x83\x70\x5a\x0a\x1f\x70\x67\xb1\x12\x26\xfd\x97\xd1\xf9\x08\xef\x18\x5a\xd8\x2e\xe9\x01\x75\x7d\x5b\xd7\xd8\xe0\x9e\x3b\xca\x46\x10\x7c\xbc\xe6\xda\x4c\x9c\xfd\xfe\xf8\xf8\xe4\x94\xb7\xf3\xed\x14\x8f\x9e\x05\xc6\xf7\x09\xbe\x03\x93\x7a\x46\xe4\xdf\x99\x93\x80\x5c\x8b\xc8\x29\x78\x97\xb8\xba\x34\x9a\xba\xae\x26\x3c\xee\x53\x19\xcd\x4e\xae\x03\x2c\x76\xbf\xf5\x51\x9a\x63\xba\x0b\x9c\x58\xe5\xa8\x65\xf8\xec\x9d\xf0\x41\x9a\x85\x2e\x66\xf7\x29\x3d\x25\x8e\xff\x6b\x4e\xd0\xb7\xe8\x73\x78\x8b\x91\x31\xfe\xcf\x36\xea\xbd\x36\xdc\xf3\x97\xa4\xc8\x90\xcc\xff\x50\x47\x26\x71\xf1\x2f\x00\x00\xff\xff\x68\x3b\xcf\xad\xa3\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
