// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 7270,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x6d\x6f\x1b\x37\xf2\x7f\xef\x4f\x31\x50\xfe\x40\x62\x40\x5a\xd9\x75\xdb\xff\x61\x7b\x2a\x2e\xcd\x83\x9b\x4b\x93\x1a\x76\x72\x87\xbe\xaa\x29\xee\x48\x4b\x88\x4b\xee\x71\xb8\x52\x05\xa1\xdf\xfd\x30\xe4\x3e\x70\x65\xd9\x29\xf2\xee\xf2\x22\xb6\x77\x87\xc3\x99\xdf\x3c\xfd\xc8\x9d\xcd\x66\x67\xa2\x56\xff\x42\x47\xca\x9a\x1c\x44\x5d\xd3\x7c\x7b\x79\xb6\x51\xa6\xc8\xe1\x35\xd6\xda\xee\x2b\x34\xfe\xac\x42\x2f\x0a\xe1\x45\x7e\x06\x60\x44\x85\x39\xac\x74\xf3\xc7\xe1\x00\x6a\x05\xd9\x47\x51\x21\xd5\x42\x22\xfc\xf9\x67\xfb\x3e\xfc\x99\xc3\xe1\x30\x7e\x7b\x38\x00\x9a\x82\xc5\xa8\x46\xc9\xca\x1c\xd6\x5a\x49\x41\x39\x5c\x9e\x01\x10\x6a\x94\xde\x3a\x7e\x03\x50\x09\x2f\xcb\x5f\xc4\x12\x35\xc5\x07\xe9\xde\x2c\xed\x9d\xf0\xb8\xde\xc7\x97\x7e\x5f\x63\x0e\xb7\x28\x1d\x0a\x8f\x67\x00\x1e\xab\x5a\x0b\x8f\xad\xb2\xc4\x03\xfe\x27\x8c\xb1\x5e\x78\x65\x4d\xaf\x1c\xa0\x76\xb6\x42\x5f\x62\x43\x99\xb2\xf3\xda\x3a\x9f\xc3\xe4\xea\xe2\xea\x72\x02\xcf\xc0\xa3\xd6\x89\x04\x78\x0b\x24\x9d\xa8\x11\xe6\x15\x7a\xa7\x24\xb1\x73\xb5\x55\xc6\x3f\x27\xe0\xc5\x59\xab\x58\x8f\x7c\x38\xf2\x02\xa0\xc3\x22\xbc\xb2\x05\xde\x8d\x50\xe0\x7f\x4b\xf4\x22\xdb\x34\x4b\x74\x06\x3d\x06\xe3\x2c\xe5\xa0\x95\x69\x55\x30\x74\x6e\xab\x24\xbe\x94\xd2\x36\xc6\x7f\x1c\xef\x00\xb0\xb5\xba\xa9\xb0\xb7\x61\xd6\xda\xb0\x56\x7e\xb6\xc1\x7d\xbf\x11\x31\x7c\x7e\xd8\xb8\x7b\x32\xe8\x9b\xf1\x92\x22\x64\x46\x22\x55\xe0\x4a\x34\xda\x7f\xb0\x05\xe6\x70\xf1\xed\xc5\x05\x3c\x83\x5d\x89\x06\x2a\xb6\x06\x0b\x70\x28\x8a\x99\x35\x7a\x3f\x85\x1d\xc2\xce\x9a\xe7\x1e\x96\x08\x62\xa9\x91\x81\x94\x65\x65\x8b\xb3\x56\xe1\x33\xf8\x54\x2a\x02\x45\x20\xc0\x57\xf5\x8a\xa0\x21\x2c\x60\x65\x1d\xac\xd1\xa0\x13\x5e\x99\x35\xdc\xdd\xfd\x0c\x1b\xdc\x53\x06\xef\x0c\xbc\xff\x1b\xc1\x8f\x0b\xb8\xcc\x2e\x2f\xa6\xbd\x96\x6e\xef\xe8\x02\x81\x70\x98\xda\x41\x96\x4d\x31\x88\x05\x08\x20\xac\x05\x67\x53\x0b\x14\xec\xb0\x57\x23\x85\x81\x9d\x53\x9e\x0d\xcd\x4e\xe3\xb7\x46\xd3\x83\x81\x55\xed\xf7\xaf\x95\x4b\x41\xac\xb0\x50\x4d\x95\xc3\x07\xac\xac\xdb\xa7\x7e\x22\xac\xac\xd6\x76\xc7\x1e\xb5\x5b\x2b\x0a\xae\x36\xc4\xcf\x04\xc8\x86\xbc\xad\x14\x23\xb0\x31\x76\x67\x7e\x2f\x2d\x79\xea\x55\xac\x94\xc6\x29\xec\x4a\x25\x4b\xd8\xdb\x06\x76\x4a\xeb\xe8\x94\xb7\x50\x58\x2e\x50\x7e\xcc\x8b\xf8\x17\x07\x76\x67\xd8\xec\x5e\x81\xc3\xda\x82\x13\xbe\x44\x07\xbe\x14\xa6\xdd\x78\xad\x7c\xd9\x2c\xc1\xf2\x43\x04\xad\x36\x98\xc1\x6f\xb6\x79\xae\x35\x08\x4d\xb6\xdb\x62\x0c\x36\x28\x0f\xca\x78\x1b\xd6\x48\x6b\xbc\x50\x06\xdd\x14\x96\xa8\xed\x2e\x83\x3b\x1c\x50\x2d\xbd\xaf\x29\x9f\xcf\x0b\x2b\x29\xe3\xc4\x92\x05\xa7\x35\x9a\x39\xd7\x2c\xf9\xf9\xba\x51\x05\xd2\xbc\x21\x9c\xd5\x4e\x6d\x85\xc7\x90\x7a\xec\x48\x56\xfa\x4a\xf7\x9a\xba\x58\x10\x95\x33\x69\xcd\x4a\xad\xfb\x57\x00\xf1\xc1\x07\x51\xe7\xc9\xc3\xb4\x02\x67\xc9\xb2\xaf\x8d\x4b\x28\xcd\x79\x54\x32\xa4\xdf\x17\x63\xb2\x53\x54\xf2\x93\x52\x6c\x11\x04\x14\x6a\xb5\x42\xc7\xdd\xb6\xd3\xd0\x56\xd5\xd0\x51\x43\x08\xa2\xba\x34\x08\xdc\x95\xb6\xaa\xc0\x0e\xf6\x95\x5a\x57\xa2\x1e\x0c\x51\xbe\x04\x61\x00\x8d\x77\xfb\xe0\xc3\x7d\x14\xba\x9f\x82\x30\x05\x34\x46\xda\x8a\xdb\x7c\x58\x1f\xbd\xfd\x10\xc2\x29\x4c\xd1\x6b\x41\xb3\x0d\x1a\x14\x52\x1b\xcf\x07\x11\x60\x18\xbe\x22\x02\xc9\xb2\x2f\x46\x20\x74\x02\x6f\x41\x55\xdc\x60\xe1\xfa\xe6\x3a\x34\x01\x78\xc1\x6e\x91\x5a\x1b\x65\x86\xcd\xd9\xb9\x2d\x3a\xb5\x52\x32\x74\x7a\xa8\x1b\x57\x5b\x42\x3a\xff\x0b\x40\xf6\x5a\x62\xfb\x88\x28\x32\x40\xbc\xdf\x5f\x00\x0e\x84\x5b\x0f\x65\xfa\x08\x62\xeb\x7a\xcd\xfd\x83\x12\x68\xc6\x2d\xf8\xd9\x23\x4d\xf8\xe1\xba\x13\x4d\xb8\x83\xb3\xaf\xc4\x07\xfd\x3f\x99\x10\x2d\xea\x0e\x43\x9f\x34\x16\x26\x79\xac\xc4\x09\xa8\x4a\xac\x31\x66\x3f\x2f\xc8\xe0\xad\x32\x45\xf0\xb9\xe2\xb6\xe2\x50\x0e\x59\x1b\x5b\x8a\x46\x41\xc8\xcd\x23\x2c\xe5\x20\x30\xc1\x00\xe1\xfb\xba\x2f\x9b\x65\x56\x58\xb9\x41\x97\x49\x5b\xcd\xdd\x3c\xf6\x80\xf0\x63\xee\x45\x0f\x5d\x17\x47\x26\x0a\x4c\x22\x78\x57\x2f\xd6\xc0\x96\x66\xbd\x4c\xd8\x26\x87\x56\xa1\xb2\xa9\xb6\xfc\x32\xbb\xfc\xff\xec\x72\x2c\x7b\xd3\x68\x7d\x63\xb5\x92\xfb\x1c\xde\xad\x3e\x5a\x7f\xe3\x90\x52\x2f\x1c\x92\x6d\x9c\x44\x4a\xfb\xb8\xc3\xff\x34\x48\x7e\xf4\x0c\x40\xd6\x4d\x0e\xdf\x5d\x54\xa3\x87\x55\x68\xf5\x39\x7c\xff\xed\x07\x35\xf0\x0b\xeb\xd2\xc5\xb3\x21\x32\x37\x81\x6b\x5c\x5d\x5c\xf1\xe4\x54\x66\x65\x5d\x15\x52\x56\xe8\x5e\x5a\xab\x2d\x1a\x24\xba\x71\x76\x89\xa9\x05\x0c\xe9\xf5\x78\x6a\xc7\xad\xa2\xc2\xf1\x63\xe1\xcb\x1c\xe6\xa2\x56\x11\xe9\xed\xf7\x73\x55\xa0\xf1\xca\xef\xb3\xba\x59\x26\xb2\xca\x28\xaf\x84\x7e\x8d\x5a\xec\xef\xb8\x3e\x0b\xca\xe1\xbb\x44\xc0\xab\x0a\x6d\xe3\x4f\xbc\xe3\x21\xab\xfe\x37\x4c\x4d\x8a\x76\x14\x98\xd3\xf4\x08\xe2\x98\xbb\x89\x96\xa1\x97\xc1\xb2\x62\x4e\x54\x32\x41\xb4\x91\xb2\x82\xb6\x6d\xbf\x59\x73\xc8\x40\x99\x98\x73\xcf\x29\xae\x21\x2a\xe7\xa3\x36\xd9\x61\xf6\xab\xd1\xfb\x1c\xbc\x6b\x90\xb5\x31\x07\x0a\x1d\x6a\xd9\x36\x76\x2e\xa9\x1a\xdd\xca\x3a\x89\xac\x34\x92\x1e\xe6\x3c\x8f\x19\x9e\xf2\x92\xb1\xed\x5b\xe1\x5a\xdb\xa3\xd8\xd7\x99\x9f\xd4\xe8\x3b\x23\x75\x13\x3a\x27\x53\xb7\x38\xe0\xba\xae\x1a\xb9\xc1\x17\xa8\x4c\x47\x66\x7e\xe0\xa5\x47\x34\xa3\xef\xae\x50\xa0\xd4\xc2\x31\x65\x5b\xda\x6d\xd2\x00\x9e\xa0\x01\xb1\x3d\xa6\xce\x3b\x6b\xfd\x3c\x23\x2a\x1f\x75\x40\x98\xd1\xae\x93\x61\x44\x4d\xe2\xce\xd3\x4e\x24\xd1\x80\x66\xab\x9c\x35\x61\x20\xc4\x59\x3b\x79\xff\xf9\xa7\x37\xaf\x7e\xfd\xf8\xf6\xdd\xf5\x24\x8e\x80\x29\xe3\x61\xb7\xe8\xdc\x78\x5e\x27\x6a\xc2\x88\x5b\xee\xe3\x34\xf5\xfa\x94\x8f\x0f\x06\xed\x43\x1f\x87\xe4\x64\xe1\x47\x1d\xe5\x99\xc7\x27\x96\x6e\x37\x6e\xd1\x09\x15\x69\xad\x0b\x31\x49\x54\x1c\x13\x9a\x34\xe8\x81\xcd\x74\xd4\x5b\x18\x10\xda\xa3\x33\x4c\xad\x1f\x58\xbc\x72\xb6\xe2\xb4\xe8\x18\xcb\x14\x04\x71\xba\xb5\x53\x95\x61\xd0\x56\x6e\xe8\x61\xb0\xd1\x6c\xf3\x13\xb8\x0c\x70\x8f\x70\xd9\x0a\xdd\xe0\x03\x4c\xbe\x94\xc4\xc7\x39\xd0\xcd\xdc\x27\x32\x80\x47\xfe\x78\xd4\x3f\x31\xec\x1f\xc9\x4b\x96\x8a\xec\x66\x24\x37\xee\x0f\x5f\xaa\xbc\x9d\x60\x52\x62\x81\x9a\xba\xd6\x7b\xf8\xf9\xd3\xa7\x1b\x58\x0a\x52\x12\x44\xe3\x4b\x90\x0e\x43\x27\x15\x3a\x4e\xf5\xe1\x3c\xc0\x0a\xb7\x4a\x04\xc7\xef\xaf\xdf\x7d\xfa\xfd\xe5\xe7\x4f\x3f\x7f\xbe\x7b\x73\x7b\x1f\xdc\xed\x1f\xbd\x7f\xf3\xdb\xfd\x28\xe1\xb7\xc2\x29\x3e\xcd\x51\x47\x90\x13\x85\x91\xbe\x1c\xc5\xef\xad\xb3\xd5\x38\x86\x51\xec\x16\x57\xf9\xc8\xf3\x11\x57\xe4\xc6\xc6\x2e\x0c\x00\x30\xe6\xf9\x08\x8f\x08\x41\x3c\xa3\x62\xc1\x93\x58\x0a\x59\x62\xc1\xa9\x95\xe6\x76\x4f\xab\x19\x29\xd6\x3e\x4d\xb4\x58\xd7\xf2\xe6\x64\x41\x7b\xc6\x0e\x0b\xa7\x61\x13\x3e\x1b\xb6\x18\xfb\x12\x29\xcd\x85\x81\xbd\xfa\x9d\x65\x2b\x1b\xc6\x29\x54\x5c\xb8\x49\x08\x89\x08\xa5\xdd\x85\xf3\xaf\x35\x06\x65\x08\x99\xf2\xe3\xdc\x99\xcd\x7a\x07\xc2\xe1\x87\x37\x5f\xf4\x8f\xb2\x96\xf4\x65\xb4\x95\x99\xd4\x0d\x79\x74\x19\x37\x70\x9d\x42\xf2\x99\x62\xaf\x19\xa0\x78\x15\x45\xdf\xdd\x8c\x9c\xe2\xb6\x43\xe8\xc3\xf9\x7a\x9c\xd9\x83\x0d\x9d\x3c\x67\x97\x77\x2c\x19\x4e\xbc\xc9\x08\x4a\x2d\x6e\xa5\x17\x67\x23\x96\xa9\x08\xaa\x86\xc2\x0d\x40\x40\x4f\x61\x11\xcb\x69\x19\x06\x5b\xe0\x78\xe1\xe0\xff\xa2\x3b\x4d\x9f\xa7\xb6\x74\xcd\x25\x96\x21\x27\x70\x72\xfe\x1f\x19\xc2\xc3\x20\x0e\xb8\x59\xa1\xdc\xe2\xc1\xd8\x4b\xcd\xba\x4d\x18\xe6\x10\xbc\xcf\xb7\xbf\xc4\x0b\x0a\x61\xd6\xf1\xdd\xb5\xf2\xe1\xd0\x4c\xca\x5b\xb7\xef\xdb\xf5\x5b\x66\xc6\x89\xba\xa7\x6a\x8e\xd3\x26\xf1\xbd\x2d\x99\x93\xe5\x94\xd6\x42\xc7\x9d\xff\xef\x45\x5a\x99\xe7\xf9\xf0\xf7\xfb\x37\xbf\x9d\xff\x23\x1e\xdd\x03\xad\x6e\x08\xdd\x7c\x30\x36\x4b\x0b\x9d\xf1\xe1\x72\x6a\x9c\x5e\x1c\x0e\x90\x5d\x2b\xcf\xce\x86\x3b\xbc\xb1\xc4\xd2\x09\x23\xcb\x4e\xe8\xa7\xf0\x57\xbc\xcd\x53\xab\xf0\x88\xfb\x17\x9d\x5a\xc9\x1c\x8e\xd7\xdd\x85\x4c\xa1\x7f\x5a\x65\x92\x05\x93\xe9\xa4\xbd\x14\xd4\x84\xe9\xf2\xa7\x9b\x9a\x43\x4e\x3c\x19\x4f\x5d\x95\x30\x6a\xc5\x9c\x9c\x6b\x88\x54\x81\x2e\x86\xe3\xe8\x64\x13\xee\x24\x2c\x21\x34\xa6\x40\x77\x14\x63\x87\x5a\x78\xb5\xc5\x40\x39\xa9\xcb\xc0\xf5\x28\xce\x47\x35\xd9\x3b\x47\xcd\xb2\x50\xee\x72\x1a\x7f\x7e\xd3\xdf\x70\x0e\xe0\x84\x1b\xcc\x53\xe0\x84\x6b\xc1\x0e\xd5\x4e\xea\x84\x82\xcf\x84\xee\xd4\x7a\x0e\x6e\x1f\x39\x96\x81\xd3\xeb\xdf\x54\x42\x9d\x34\x00\xf9\x45\xa7\xa1\x93\x1a\xee\x68\x4f\x86\x03\xb9\x95\xec\x2c\x03\x8a\x26\x5c\xdf\x31\x4e\x3c\xb1\x95\x3f\x3a\x80\xa7\x58\xb5\xb3\xaf\x9d\x6c\x8b\x27\x46\x5d\xb7\xa2\xd5\xc5\xab\x16\x7f\xdf\xe0\x1e\x54\xf1\x63\x2f\xf6\x04\x9d\x49\xac\x62\x15\xc2\x37\x0e\x47\xb7\x00\x27\xf6\x0a\xaf\xf7\xb3\x5e\x9e\x46\xed\xaa\xeb\xd6\xa0\x3c\x94\x82\xc2\x28\xb6\x46\xef\x41\x48\x89\x14\x3b\x7a\x89\xf1\x22\xed\x45\x77\x67\x73\xbf\x12\x9a\xf0\xfe\xfc\xec\x70\x98\x75\x81\xb8\x6d\x67\xf8\xa9\x58\x74\x4a\x83\xfc\xc3\x7a\x38\x2d\x76\x22\x4e\xe4\x5d\x23\x7d\xb4\x77\x17\x8e\xf3\x4c\xf1\x1a\x0f\xb4\x37\x12\x96\xd6\x6e\x36\x88\x35\x67\x7d\x6f\xea\x64\xad\xfc\x64\x0a\x15\x0a\x06\x9c\x1b\x1a\x88\x70\xc6\x6e\x0b\xa1\xa9\xc9\x3b\x14\x55\x5f\x11\xe7\x47\x86\xb1\xea\x19\x79\xe1\x71\xc1\x0d\xe6\xd1\xbc\x31\xf8\x87\xef\x92\x27\x99\x78\xc2\xc0\xa4\xdb\x63\xd2\xcd\xa3\x44\xc9\x0b\xcc\xd6\xd9\x14\xfe\x8d\xcc\x2c\x5f\x69\xdb\x14\xe7\x59\xb8\x20\xf2\x76\xc3\xe7\x13\x82\x5a\x38\xaf\x64\xa3\x85\xeb\x82\xd1\x6a\x39\x1e\xa5\xed\xae\x8b\x1d\x71\x1f\x95\xac\x2b\xdb\xb1\xde\x6c\x67\xdd\x86\xfa\xc3\xe6\xd1\xb2\xb0\xd1\x42\x2c\xe5\xe5\x37\x57\x0f\xff\x4f\x1d\x7e\x13\xb3\xaf\xeb\x4a\xfd\x85\xb5\x35\x4f\xa4\xc6\x87\x56\xfa\x7a\x10\x3e\xca\x90\x4e\xdf\x6c\xd0\xb7\x08\x3c\xf0\xf1\x6c\x39\xb5\x24\x6c\xfc\x48\xea\xdc\xa1\xdb\x9e\xf8\x94\xc1\x07\x82\x81\x01\x71\xad\xfe\x90\x8e\x62\xb1\xe1\x31\x16\xb3\x8c\xd0\x27\xdf\x47\x9e\x27\x9f\x58\x92\x6f\x25\x1c\x9c\x70\x75\x17\x48\x79\x36\xf2\x52\x2b\xf2\x68\x66\xad\x09\x8b\xfc\xea\xe2\xea\xb2\x07\xe9\x16\xd7\x8a\xbc\xdb\xbf\x56\xc4\x10\xdf\x49\x61\x42\xba\x1e\x21\xe5\x5a\xb1\x59\x11\xe5\x66\xd4\x0a\xa6\x6e\xb7\xbd\xf1\x65\x51\xa8\x78\xc9\xc2\xc3\xfb\x25\x93\xf7\x11\x8c\xc3\xfb\x81\xbf\x1d\x0e\xe0\x02\x15\xf8\xc2\xea\x59\xf8\xf8\x35\xea\xa7\xc3\x6f\xdd\x06\xbf\xd6\xad\xfa\xd7\x1f\xef\x3a\xe2\x45\xd3\xf6\x40\xd4\xb8\x96\x86\x81\x29\xac\x27\xb0\x41\x18\x2a\xb1\x0f\x97\x53\x7a\x3b\x5c\x51\x1a\xd2\xd6\x6e\x9a\x1a\x14\x51\x83\x04\xd6\x00\xd9\x0a\xe1\x7d\xff\xc9\x88\xb5\x37\x35\x0d\x37\x90\x85\xa1\xee\xfe\x6b\xf2\xd1\x1a\x9c\xa4\x6f\x5e\x05\x03\xd2\x3b\xc8\xb8\x39\x8d\xaf\x25\xbb\x83\x4d\xb0\x6f\xf4\xa6\x3f\x73\x4d\x2e\x27\x67\xff\x0d\x00\x00\xff\xff\x3d\x76\x24\xe3\x66\x1c\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 967,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\x4d\x6f\x9b\x40\x10\xbd\xf3\x2b\x9e\xe4\x6b\x21\x25\x52\x2e\xdc\xa2\xa6\xad\x22\xb5\x91\xa5\x28\xbd\x8f\x97\x81\xac\xb2\x5f\xdd\x9d\x75\x4d\x51\xfe\x7b\x05\x76\x6c\x68\x32\x27\xe0\xbd\x79\xf3\x76\xf6\x51\x96\x65\xb1\x81\x65\xab\x48\x3d\x73\x8b\x96\x83\xf1\x83\x65\x27\xc8\x89\x5b\xec\x06\x7c\x33\xf9\x00\xf1\x98\x19\xc5\x06\xca\x3b\x21\xed\x38\x42\x5b\xea\x19\x96\x85\x5a\x12\xaa\x0a\x0a\xfa\x17\xc7\xa4\xbd\x6b\x40\x21\xa4\xab\x7d\x5d\xbc\x68\xd7\x36\xb8\x3b\xcb\x16\x6f\xf4\xa6\x00\x1c\x59\x6e\x2e\xd3\xc7\x11\xba\x43\xf5\x40\x96\x53\x20\xc5\x78\x7d\x3d\x91\xe6\xd7\x06\xe3\xb8\x46\xc7\x11\xec\xda\x89\x96\x02\xab\x49\x31\x72\x30\x5a\x51\x6a\x50\x17\x40\x62\xc3\x4a\x7c\x9c\x10\xc0\x92\xa8\xe7\x1f\xb4\x63\x93\x8e\x1f\xde\x19\x28\x00\x61\x1b\x0c\x09\x9f\x5a\x16\x66\xa7\x32\xab\xee\x8f\xfa\x81\x37\x2b\x33\xee\x5b\x7e\x5c\x99\x98\x6a\xc7\x42\xd5\x4b\xde\x71\x74\x2c\x9c\x2a\xed\xaf\x7c\x6a\x60\xb4\xcb\x87\x13\xe9\xbc\xe4\xf3\xb0\xf2\xc3\x61\x53\xcd\xd7\xb0\x00\x9a\xba\xba\xa9\xae\x3f\xaf\xf1\x6d\x36\x66\xeb\x8d\x56\x43\x83\xfb\xee\xc1\xcb\x36\x72\x9a\xee\xe3\x8d\x45\xb1\x5f\x1c\xac\x44\x69\x71\x53\x5f\x03\xd8\xe0\x27\x1d\xb4\xcd\x76\x9a\xe0\xe3\x30\x65\x21\x27\xfe\x04\xed\x60\xb9\xa7\xdd\x20\x9c\x96\x8d\xf7\xb8\xb1\x58\x35\x26\xfd\x97\xd1\xf9\x08\xef\x18\x5a\xd8\x2e\xe9\x01\x75\x7d\x5d\xd7\xd8\xe0\x8e\x3b\xca\x46\x10\x7c\xbc\xf8\xda\x4c\x9c\xfd\xfe\xf8\xf8\xe4\x94\xb7\x73\x3a\xc5\xa3\x67\x81\xf1\x7d\x82\xef\xc0\xa4\x9e\x11\xf9\x77\xe6\x24\x20\xd7\x22\x72\x0a\xde\x25\xae\xce\x42\x93\xea\xea\x84\xc7\x7d\x2a\xa3\xd9\xc9\xe5\x00\x8b\xdd\x6f\x7d\x94\xe6\xe8\xee\x14\xcd\xdb\xb6\x7d\x64\x95\xa3\x96\xe1\x8b\x77\xc2\x07\x99\x23\x7a\xac\xb4\x46\x9a\x85\x64\xcc\xee\x36\x3d\x25\x8e\x27\xb9\xff\xa1\xef\xd1\xe7\xf0\x1e\x23\x63\xfc\x9f\x6d\xd4\x7b\x6d\xb8\xe7\xaf\x49\x91\x21\x99\x7f\xaf\x8e\x4c\xe2\x4b\xfc\xff\x05\x00\x00\xff\xff\xec\xf7\xcf\x04\xc7\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
