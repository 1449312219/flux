// Code generated by go-bindata.
// sources:
// deploy/flux-account.yaml
// deploy/flux-deployment.yaml
// deploy/flux-secret.yaml
// deploy/memcache-dep.yaml
// deploy/memcache-svc.yaml
// DO NOT EDIT!

package setup-assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployFluxAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x51\xbd\x6e\xf3\x30\x0c\xdc\xf5\x14\x04\x32\xe4\xfb\x8a\xd8\x45\xb6\xc2\x5b\x92\xa1\x43\x3b\xb9\x3f\x4b\xd1\x81\x92\xe8\x46\x8d\x22\x1a\x94\xe4\xfe\x3c\x7d\xe1\x38\x01\x62\xa4\x2d\x10\xa0\x1b\x79\x38\xf2\xee\xc8\xa2\x28\xd4\x04\xee\xd7\x04\x91\xa4\x73\x86\x00\x8d\xe1\x1c\xd2\x0c\x8c\xcf\x31\x91\x80\xb0\xa7\x38\x03\x0c\x76\x04\x81\x76\xc1\xba\xf0\x02\x28\xa4\x26\xc0\xc1\x7f\x40\x20\xb2\x64\xa1\x61\x81\x9b\xac\x49\x02\x25\x8a\xf0\xe6\xd2\x7a\x37\x52\x68\x8c\x64\x7b\x05\x8a\x11\x0c\x87\x24\xec\xe1\x5f\xbd\x5c\xac\xfe\x97\x0a\x5b\xf7\x48\x12\x1d\x87\x0a\xba\xb9\xda\xb8\x60\x2b\xb8\x1b\x5c\x2d\x06\x53\x6a\x4b\x09\x2d\x26\xac\x14\x80\x47\x4d\x3e\xf6\x15\x40\xc0\x2d\x55\xd0\xf8\xfc\xae\x46\x4d\x1f\xef\x78\xaf\x68\x34\x25\xe6\xb4\x66\x71\x9f\x98\x1c\x87\x72\x73\x15\x4b\xc7\x97\xdd\x5c\x53\xc2\x83\xec\x6a\x08\x5a\xb3\xa7\xb3\x35\x25\x7b\xda\x51\x0a\xc0\xd6\x5d\x0b\xe7\x36\x56\xf0\x34\xbd\x98\x3e\xef\xe6\x84\x22\x67\x31\x34\x02\x3b\x12\x7d\x04\x14\x10\x38\xd4\x7b\xe2\x43\x7d\xfb\x33\xf7\x0f\x12\x2e\x87\x47\x9e\x1f\x94\x3d\xd5\xd4\xf4\xa4\x43\xd0\x5f\xf4\x15\xc0\xe9\x6d\x47\xfb\x62\xd6\xaf\x64\xd2\xfe\x76\xdf\xfe\xff\xc4\xce\xd0\xc6\x16\x0d\x55\x60\xa9\xc1\xec\x93\xfa\x0a\x00\x00\xff\xff\xb1\x6e\xe4\xd9\xd5\x02\x00\x00")

func deployFluxAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployFluxAccountYaml,
		"deploy/flux-account.yaml",
	)
}

func deployFluxAccountYaml() (*asset, error) {
	bytes, err := deployFluxAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/flux-account.yaml", size: 725, mode: os.FileMode(384), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployFluxDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x58\x5f\x8f\x1b\xb7\x11\x7f\xbf\x4f\x31\x90\x1f\x9c\x00\xd2\xea\xe4\x4b\x8b\x62\x53\x05\x6d\xed\xc6\x35\x1c\xdb\x07\xbb\x6e\xd1\xa7\x86\xe2\x8e\xb4\x84\xb8\xe4\x96\x33\x2b\x45\xdf\xbe\x18\x72\xff\x70\x4f\x77\x76\xe0\x3c\xc4\x07\xee\x70\xfe\xfc\x66\xf8\x9b\x19\xad\x56\xab\x1b\xd5\x9a\x7f\x61\x20\xe3\x5d\x09\xaa\x6d\x69\x7d\xda\xdc\x1c\x8d\xab\x4a\x78\x85\xad\xf5\x97\x06\x1d\xdf\x34\xc8\xaa\x52\xac\xca\x1b\x00\xa7\x1a\x2c\x61\x6f\xbb\xdf\x6e\xa8\x45\x2d\x47\x01\x5b\x6b\xb4\xa2\x12\x36\x37\x00\x84\x16\x35\xfb\x20\x5f\x00\x1a\xc5\xba\xfe\x45\xed\xd0\x52\x3a\x98\x69\x00\x20\x0e\x8a\xf1\x70\x49\x1f\xf9\xd2\x62\x09\x1f\x51\x07\x54\x8c\x37\x00\x8c\x4d\x6b\x15\x63\xaf\x2c\xf3\x43\xfe\x53\xce\x79\x56\x6c\xbc\x1b\x95\x03\xb4\xc1\x37\xc8\x35\x76\x54\x18\x5f\xb4\x3e\x70\x09\x8b\xbb\xdb\xbb\xcd\x02\x9e\x01\xa3\xb5\x99\x04\xb0\x07\xd2\x41\xb5\x08\xeb\x06\x39\x18\x4d\x80\xae\x6a\xbd\x71\xfc\x9c\x40\x2e\x17\xbd\x62\x3b\x8b\xe1\x41\x14\x00\x03\x16\xf1\x6f\x0c\x27\xa3\xf1\xaf\x5a\xfb\xce\xf1\xfb\xb9\x20\xc0\xc9\xdb\xae\xc1\x51\xd5\xaa\x57\x75\x30\xbc\x3a\xe2\x65\x34\x40\x82\x02\x4f\x06\x87\x93\x49\xdf\x4a\xae\x54\x31\x4d\x99\x54\x85\x7b\xd5\x59\x7e\xe7\x2b\x2c\xe1\xf6\x87\xdb\x5b\x78\x06\xe7\x1a\x1d\x34\xe2\x0d\x56\x10\x50\x55\x2b\xef\xec\x65\x09\x67\x84\xb3\x77\xcf\x19\x76\x08\x6a\x67\x51\xf0\xd0\x75\xe3\xab\x9b\x5e\xe1\x33\xf8\x67\x6d\x08\x0c\x81\x02\x6e\xda\x3d\x41\x47\x58\xc1\xde\x07\x38\xa0\xc3\xa0\xd8\xb8\x03\x7c\xfa\xf4\x0f\x38\xe2\x85\x0a\x78\xe3\xe0\xed\x9f\x08\x7e\xda\xc2\xa6\xd8\xdc\x2e\x47\x2d\x83\xed\x14\x02\x81\x0a\x98\xfb\x41\x5e\x5c\x71\x88\x15\x28\x20\x6c\x95\x14\x45\x0f\x14\x9c\x71\x54\xa3\x95\x83\x73\x30\x2c\x8e\x16\x8f\xe3\x77\x40\x37\x82\x81\x4d\xcb\x97\x57\x26\xe4\x20\x36\x58\x99\xae\x29\xe1\x1d\x36\x3e\x5c\xf2\x38\x11\xf6\xde\x5a\x7f\x96\x88\x7a\xd3\x86\x62\xa8\x1d\xc9\x99\x02\xdd\x11\xfb\xc6\x08\x02\x47\xe7\xcf\xee\xbf\xb5\x27\xa6\x51\xc5\xde\x58\x5c\xc2\xb9\x36\xba\x86\x8b\xef\xe0\x6c\xac\x4d\x41\xb1\x87\xca\x83\xd9\xc7\x63\xb9\x24\x7f\x04\xf0\x67\x27\x6e\x8f\x0a\x02\xb6\x1e\x82\xe2\x1a\x03\x70\xad\x5c\x6f\xf8\x60\xb8\xee\x76\xe0\xe5\x10\xc1\x9a\x23\x16\xf0\x1f\xdf\x3d\xb7\x16\x94\x25\x3f\x98\x98\x83\x0d\x86\xc1\x38\xf6\xf1\x8e\xf6\x8e\x95\x71\x18\x96\xb0\x43\xeb\xcf\x05\x7c\xc2\x09\xd5\x9a\xb9\xa5\x72\xbd\x4e\x76\x0a\xed\x9b\xf5\x19\xd5\x09\xcf\x3e\x1c\x69\x2d\x95\xb6\xde\x59\xbf\x5b\x37\x8a\x18\xc3\x9a\x0c\xe3\x9a\x58\xb9\x4a\x59\xef\x70\x45\xc8\x5d\x5b\x34\xd5\xb3\xe8\xed\x4a\xad\xda\x60\x4e\x8a\x31\x96\xa7\x04\x3b\x1a\x1a\x52\x45\x54\xaf\xb4\x77\x7b\x73\x18\x3f\x01\xa4\x83\x77\xaa\x2d\xb3\xc3\xfc\x9d\xad\xb2\x6b\xdf\x9a\xb6\xe2\xd8\xed\x70\x9d\x94\x4c\xd5\xf9\xd5\x94\x9d\x0d\xd5\x72\x52\xab\x13\x82\x82\xca\xec\xf7\x18\x84\x19\x07\x0d\xfd\xa3\x8b\xde\x52\xab\x74\xca\x50\x52\x97\xe7\x48\xb8\xe7\x64\x2a\x1c\xb2\xb2\x37\x87\x46\xb5\x93\x23\x86\x6b\x50\x0e\xd0\x71\xb8\xc4\x18\x7e\x4d\x42\xbf\x2e\x41\xb9\x0a\x3a\xa7\x7d\x23\x94\x1c\xef\xa7\x68\xdf\xc5\x6c\x2b\x57\x8d\x5a\xd0\x9d\xa2\x06\x83\xd4\xa7\xfb\x2a\x03\x02\xc3\x37\x64\x20\xbb\xf6\xd5\x0c\x44\xa2\x60\x0f\xa6\x11\x1a\x85\xd7\xf7\xaf\x23\x47\xc0\x77\x12\x16\x99\x83\x33\x6e\x32\x2e\xc1\x9d\x30\x98\xbd\xd1\x91\xcf\xa1\xed\x42\xeb\x09\xe9\xfb\xdf\x01\xe4\xa8\x25\xb1\x4b\x42\x51\x00\x12\x7b\xbf\x03\x38\x50\xe1\x30\xbd\xe2\x27\x10\x3b\xb4\x07\xa1\x17\xca\xa0\x99\x33\xf4\xb3\x27\x38\xfa\xfa\xde\x23\x1c\x3d\xc0\x39\x3e\xd4\xab\xf6\x90\x35\x90\x1e\xf5\x80\x91\x46\x9d\x87\x45\x29\x3d\x92\x78\x01\xa6\x51\x07\x4c\xd5\x2f\x17\x0a\xf8\xd9\xb8\x2a\xc6\xdc\x08\xeb\x04\xd4\x53\xd5\x26\xc6\xb1\xa8\x08\x85\x5b\xe2\x55\x49\x82\x0c\x03\xa0\x78\xa4\x05\xe1\x84\xca\xeb\x23\x86\x48\x0d\xe1\x8a\x1c\x58\x8d\xf0\x0d\xb9\x94\x91\x40\xe9\x54\xe6\xac\x0e\x20\xde\x16\xa3\x4c\x34\x55\x42\xaf\xd4\xf8\xa8\x46\x57\xf1\x9f\x72\x53\x6c\xee\x8a\x17\x73\xd9\xfb\xce\xda\x7b\x6f\x8d\xbe\x94\xf0\x66\xff\xde\xf3\x7d\x40\xca\x23\x09\x48\xbe\x0b\x1a\x29\xa7\xfa\x80\xff\xeb\x90\x78\x76\x06\xa0\xdb\xae\x84\x3f\xdc\x36\xb3\xc3\x26\x76\x83\x12\xfe\xf8\xc3\x3b\x33\x4d\x12\x3e\xe4\x97\x57\x53\x76\xee\xe3\x54\x71\x77\x7b\x27\xcd\xd5\xb8\xbd\x0f\x4d\x2c\x5b\x65\x47\xe9\xac\xc6\x66\x3a\x1e\x6f\xf6\x90\x48\xfb\x5e\x71\x5d\xc2\x1a\x59\x47\x2c\xaa\x35\x51\x2d\x53\x8b\x4f\x73\x14\x58\xdf\x3f\x8f\x83\x39\xa1\x03\xe3\x12\x3c\xcf\x29\xdd\x21\xaa\xd7\xb3\x57\x9d\x50\x50\xd5\x07\x67\x2f\x25\x70\xe8\x50\xb4\x49\x47\x8f\x0f\x6a\xd7\xf3\x90\x54\x40\x8b\x61\xef\x83\x46\x51\x9a\x5a\xb8\x74\xf0\xa7\x1c\xcf\xbb\xec\xdc\xf7\x93\x0a\xbd\xef\x49\xec\xdb\xdc\xcf\xca\xe9\x8d\xd3\xb6\x8b\x0f\x5d\x06\x91\xc4\xc7\x03\x09\xa4\x4e\xf7\x95\xc6\x3c\xb4\xe6\x1f\xe5\xea\x83\xa6\x39\x92\x01\x54\xa8\xad\x0a\x32\x80\xec\xfc\x29\xab\xd5\x2f\x74\xad\xf4\x9a\xf3\xe0\x83\xf7\xbc\x2e\x88\xea\x27\x03\x50\x6e\x66\x75\x31\x31\xea\x22\x59\x5e\x0e\x22\x99\x06\x74\x27\x13\xbc\x8b\xfc\x95\x5a\xc3\xe2\xed\xe7\xbf\xfd\xfd\xe5\x87\xf7\x3f\xbf\x79\xbd\x48\x8c\xb5\x14\x3c\xfc\x09\x43\x98\xb7\x97\x4c\x4d\x64\xe4\xdd\x25\x91\x3f\xdb\xc7\x62\xbc\xea\x0b\xd7\x31\x4e\xc5\x29\xc2\x4f\x06\x2a\x14\x2d\x63\xf4\x60\x4d\x18\x25\xeb\x9c\xbd\x77\x31\x27\x99\x8a\x87\xfd\x37\x4f\x7a\x6c\xbe\xc3\x20\xa9\x1c\x28\xcb\x18\x9c\x0c\x8a\x57\x1e\xef\x83\x6f\xa4\x2c\x86\x06\xbb\x04\x45\x52\x6e\x7d\x13\x10\x18\xac\xd7\x47\xba\x4e\x36\xba\x53\xf9\x08\x2e\x13\xdc\x33\x5c\x4e\xca\x76\x78\x85\xc9\xd7\x8a\xf8\x61\x0d\x0c\x2d\xe2\x0b\x15\x20\x1d\x6a\xde\x99\xbe\xd0\x9b\x9e\xa8\x4b\x91\x4a\xcd\x78\x26\x37\xe7\x87\xc9\x69\x31\x59\xce\x62\x48\x69\x48\x0b\x07\x56\xc2\x99\x5a\xe9\x1a\x2b\x41\x36\x4f\xed\x38\x04\x49\x12\x05\x96\x65\xa6\xc5\x87\x7e\xca\xc9\x2e\xf4\x0b\x53\xbc\xb8\x8c\x46\x64\xd0\xa7\xae\x6d\xed\x45\x80\xa0\x1c\x8a\x69\xd6\xe0\xb3\x17\x2f\x3b\x49\x69\x2c\xb8\xb8\xdd\xc5\x3c\x40\xed\xcf\x71\x99\xf1\xce\xa1\xe6\x38\x87\xf0\x1c\xba\xd5\x6a\x0c\x20\x4e\xa9\x62\x7c\x3b\x1e\x15\x7d\x8b\x2e\xe8\xa4\x0b\x6d\x3b\x99\x7c\x0b\xe1\x2f\x9b\x43\xf2\x99\xd2\x53\x9b\xa0\x78\x99\x44\xdf\xdc\xcf\x82\x92\x57\x47\xc8\x71\x59\x9a\x27\x76\xf2\x61\x90\x97\x95\x94\x83\x48\xc6\xf5\x25\x63\xe0\xdc\xe3\x5e\x7a\x7b\x33\x9b\x09\x0c\x41\xd3\x51\x5c\xe7\x22\x7a\x06\xab\x54\x4d\xbb\xc8\xeb\xb1\x1b\xc7\x2d\xee\xbb\x61\x35\xfa\x3e\xf7\x65\x78\x5b\xa9\x0a\x65\x88\xc8\x96\xb9\x99\x23\xc2\x85\x89\xdf\x57\x95\x09\xdb\x2b\xd6\xcf\xdd\xfa\xd8\xcf\x02\x3e\x40\xc0\xc6\x9f\x12\x64\x53\x1a\x3f\x7f\xfc\xa5\x98\x29\x97\x1e\xd3\x05\xbb\x3d\x18\xfe\xcb\xb4\x93\x94\x0f\xc6\x8e\xd5\x01\x79\x45\xac\x02\x63\x75\x75\x7d\x17\x94\xd3\xf5\x36\x6d\x2c\x99\x2f\xe6\x91\x66\x72\x56\x2e\x16\x48\x40\xc1\x5d\xa7\x11\xb1\x51\xce\xec\x65\x78\x90\x12\x22\x53\x61\x48\xdc\xf9\x60\x0c\x8b\xfb\x95\x27\x84\xce\x55\x18\x1e\x04\x16\xd0\x2a\x36\x27\x84\x56\x71\x4d\x43\x02\x0e\x86\xe3\xa2\x47\x86\x65\x01\x9d\x97\xa4\xf8\x2e\xd2\x5b\xea\x76\x95\x09\x9b\x65\xfa\xf7\xc5\xe3\x5c\x82\x52\x7e\x67\x2f\x5e\xa0\x8b\xfb\xbb\x28\x17\x92\x33\xfc\x60\xc4\xce\x0d\xf4\x74\xd1\x93\xc1\xf6\x0b\xec\x30\xdc\xe8\x75\xc9\xad\xed\x9f\x8f\x78\x01\x53\xfd\x34\x8a\x7d\xa1\x03\x64\x5e\x89\x0a\xc5\x5d\xc0\xd9\x9c\xff\x88\xad\xf8\xf9\xb2\x1a\xe5\xe9\xe9\xd8\x1d\xfe\xc6\x03\x00\xd9\x4b\x57\x0e\x16\x5d\x4b\x1c\x50\x35\x8b\xe1\x1d\x66\x4a\xbe\xc3\xe2\x50\x2c\xe1\xdf\x52\x4f\xf0\xd2\xfa\xae\xfa\xbe\x88\x6b\x0c\xfb\xa3\x8c\x25\x04\xad\x0a\x6c\x74\x67\x55\x80\x7e\x83\xee\xb5\x3c\xa4\x90\xde\xea\xf6\x4c\x32\x29\x6b\xd1\x55\xc4\x3a\x2d\x52\xa1\xaa\xd6\xac\x1f\x94\x8c\x5c\x8b\x86\xb6\x6a\xa7\x37\x2f\xee\xae\xff\x9f\x07\xfc\x09\xc3\xe9\x91\x1f\xa7\xa4\x9b\x4e\xfc\x29\x59\xfb\x31\x7f\xc8\xea\x28\x04\x10\x12\x99\x20\x67\xbf\x78\x3d\xcf\x7e\x34\xcb\x7e\xfd\x92\x10\xe3\x9a\x16\x3b\xda\xfc\x39\x5a\x43\x8c\x6e\xd5\xbb\xb0\x2d\xef\x6e\xef\x36\xd3\xfa\xf7\xa1\x4d\x83\x2f\xbc\x7a\xff\x69\xe0\x38\x5a\xf6\xad\xb7\x0b\x3d\xe3\x81\xab\x3c\x13\xf8\x28\x0c\x8d\xba\xc4\x89\xdd\x9e\xa6\xdd\xcd\x91\xf5\xfe\xd8\xb5\x60\x88\x3a\x24\xf0\x0e\xc8\x37\x08\x6f\xbb\x1d\x06\x87\x8c\x04\xf1\x87\x06\x9a\x56\xb3\xca\xd1\xb0\x14\x2c\xde\x7b\x87\x8b\xfc\xcb\xcb\xe8\x40\xbe\x9c\x25\xe3\x34\xdf\xd7\x86\x16\x1a\xfd\x9b\x7d\x19\xbb\xfb\x62\xb3\xb8\xf9\x7f\x00\x00\x00\xff\xff\xe2\xd9\xda\x0a\x2b\x15\x00\x00")

func deployFluxDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployFluxDeploymentYaml,
		"deploy/flux-deployment.yaml",
	)
}

func deployFluxDeploymentYaml() (*asset, error) {
	bytes, err := deployFluxDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/flux-deployment.yaml", size: 5419, mode: os.FileMode(384), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployFluxSecretYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xbb\x0d\x02\x31\x0c\x06\xe0\xde\x53\x78\x01\x17\xb4\x5e\x82\x02\x89\xde\x22\x3f\xc8\x22\x0f\x13\x9c\xd3\x65\xfb\xfb\x44\x84\x2c\xfc\x89\xf9\xf7\xd1\x95\x8f\x1b\x7d\xbd\x17\xe5\x07\x5e\x13\x49\x0d\x69\xc5\xd2\x94\x98\xbb\x35\x28\xbf\xeb\x3a\xe5\xe3\x29\x05\x51\xc7\xa6\xdc\x01\xe5\x7b\xd8\x6f\x81\xae\x00\x00\x00\xff\xff\x86\x01\x49\x4e\x4f\x00\x00\x00")

func deployFluxSecretYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployFluxSecretYaml,
		"deploy/flux-secret.yaml",
	)
}

func deployFluxSecretYaml() (*asset, error) {
	bytes, err := deployFluxSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/flux-secret.yaml", size: 79, mode: os.FileMode(384), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployMemcacheDepYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x4f\x6f\xd3\x40\x10\xc5\xef\xfe\x14\x4f\xca\x15\x07\xb9\x52\x2e\xbe\x21\x0a\xa8\x12\xa0\x5c\xca\x7d\xb2\x9e\x38\x2b\x76\x77\x96\x9d\x71\x88\xf9\xf4\xc8\x49\xe3\x38\x6d\xe7\x64\xed\x7b\xbf\xf9\xe7\xa9\xeb\xba\x5a\x21\x72\x74\xe4\x0e\xdc\xa1\xe3\x1c\x64\x8c\x9c\x0c\x83\x72\x87\xdd\x88\xaf\x61\x38\xc1\x04\x67\x47\xb5\x82\x93\x64\xe4\x13\x17\xf8\x48\x3d\x23\xb2\x51\x47\x46\xeb\x8a\xb2\xff\xc5\x45\xbd\xa4\x16\x94\xb3\x7e\x3c\x36\xd5\x6f\x9f\xba\x16\x8f\x73\xda\xea\x6a\x6f\x2b\x20\x51\xe4\xf6\x56\xbd\xd2\xcc\x6e\x7a\x2f\x9c\x83\x77\xa4\x2d\x9a\x0a\x50\x0e\xec\x4c\xca\xa4\x00\x91\xcc\x1d\xbe\xd3\x8e\x83\x5e\x1e\xde\xa6\x01\x8c\x63\x0e\x64\xfc\x82\x2c\x4a\x4e\x11\xee\xe8\xf7\x78\xe0\xda\xca\x14\xf3\xc4\x33\x53\xbf\xcb\x4c\x71\xde\xc9\x42\x68\x9b\xf5\x66\xdd\x6c\xee\xf5\xed\x10\xc2\x56\x82\x77\x63\x8b\xa7\xfd\x4f\xb1\x6d\x61\x9d\x96\x73\x75\x51\xe9\x17\xfd\xd5\xa8\x23\x36\xcd\x03\x80\x15\x7e\xd0\xc9\xc7\x21\x4e\x15\xa4\x8c\xd3\x8f\x19\x94\x3f\xc0\x27\x44\xee\x69\x37\x1a\xeb\x12\x7c\xc2\x26\xe2\x0e\x54\xff\x8f\xb1\x97\x02\x49\x0c\x6f\x1c\x97\xf6\x8c\xa6\x79\x68\x1a\xac\xf0\xc8\x7b\x1a\x82\x21\x4b\xb9\xf5\xb5\x9a\x3c\xc7\xe3\xe5\xf3\x39\x39\x89\xe7\x53\x31\x41\xcf\x86\x20\xbd\x42\xf6\x60\x72\x07\x14\xfe\x33\xb0\x1a\x28\x75\x28\xac\x59\x92\xf2\x7a\x4e\x34\x65\xbd\x9b\xf0\xb2\x4f\x17\x3c\x27\xbb\x0d\xb0\xd8\xfd\x56\x8a\xb5\x97\xee\x66\x59\xd9\x0d\xc5\xdb\xf8\x59\x92\xf1\xc9\xda\x05\x57\x86\xf4\x49\x9f\x95\xcb\x6b\xe6\x45\xfa\x56\x64\xc8\x6f\x35\x0a\x41\xfe\x6e\x8b\x3f\xfa\xc0\x3d\x7f\x51\x47\x81\xec\x7c\xd0\x7b\x0a\xca\xd5\xff\x00\x00\x00\xff\xff\x55\xe1\x76\x95\x30\x03\x00\x00")

func deployMemcacheDepYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployMemcacheDepYaml,
		"deploy/memcache-dep.yaml",
	)
}

func deployMemcacheDepYaml() (*asset, error) {
	bytes, err := deployMemcacheDepYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/memcache-dep.yaml", size: 816, mode: os.FileMode(384), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployMemcacheSvcYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8b\x3d\xaa\x83\x31\x0c\x04\x7b\x9d\x62\x2f\xe0\x42\xaf\xd4\x35\x1e\xa4\x17\xf2\x42\x4c\xe2\x1f\x6c\xf3\x9d\x3f\x38\xe9\x92\xad\x96\x61\x26\xa5\x24\x3e\xca\x8d\x73\x95\xde\x0c\x97\xca\xa3\xb4\x6c\xf8\xe7\xbc\x4a\x50\x2a\xb7\x67\xdf\x6e\x02\x34\xaf\x34\x54\xd6\xf0\xb8\x33\xcb\x1a\x8c\xc3\x47\x9f\x7b\x9d\x03\xa4\x1f\x09\xef\x1d\xc5\xa0\xfa\xa7\x2a\xc0\xe2\x93\xb1\xfb\xfc\x34\x5f\xc5\x2b\x00\x00\xff\xff\xa8\x56\xba\x05\x93\x00\x00\x00")

func deployMemcacheSvcYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployMemcacheSvcYaml,
		"deploy/memcache-svc.yaml",
	)
}

func deployMemcacheSvcYaml() (*asset, error) {
	bytes, err := deployMemcacheSvcYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/memcache-svc.yaml", size: 147, mode: os.FileMode(384), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/flux-account.yaml": deployFluxAccountYaml,
	"deploy/flux-deployment.yaml": deployFluxDeploymentYaml,
	"deploy/flux-secret.yaml": deployFluxSecretYaml,
	"deploy/memcache-dep.yaml": deployMemcacheDepYaml,
	"deploy/memcache-svc.yaml": deployMemcacheSvcYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		"flux-account.yaml": &bintree{deployFluxAccountYaml, map[string]*bintree{}},
		"flux-deployment.yaml": &bintree{deployFluxDeploymentYaml, map[string]*bintree{}},
		"flux-secret.yaml": &bintree{deployFluxSecretYaml, map[string]*bintree{}},
		"memcache-dep.yaml": &bintree{deployMemcacheDepYaml, map[string]*bintree{}},
		"memcache-svc.yaml": &bintree{deployMemcacheSvcYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

