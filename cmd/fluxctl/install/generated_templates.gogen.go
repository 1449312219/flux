// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 7, 24, 14, 59, 5, 476026678, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(2019, 7, 24, 14, 31, 52, 545386882, time.UTC),
			uncompressedSize: 764,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xbb\x6e\xc2\x30\x14\xdd\xfd\x15\x47\x62\xa0\xad\x48\x2a\xb6\x2a\x1b\x30\x74\x68\xd5\x21\x7d\x2c\x55\x87\x6b\xe7\x52\x5c\x8c\x1d\xf9\x91\x3e\x10\xff\x5e\x85\x80\x04\x82\x22\x21\x75\xcb\x3d\x3a\x37\xe7\x71\x9d\x65\x99\xe8\xe1\x69\xc6\x08\xec\x1b\xad\x18\xa4\x94\x4b\x36\x0e\xa0\x4c\x0a\x91\x3d\xbc\x33\x1c\x06\x20\x5b\xed\x41\x90\xda\x56\xda\xbe\x83\x3c\x8b\x1e\x9c\x35\xdf\xb0\xcc\x15\x57\x98\x3a\x8f\xbb\x24\xd9\x5b\x8e\x1c\xf0\xa9\xe3\x6c\xbd\x92\x49\x0a\x5c\xb5\x0a\x1c\x02\x94\xb3\xd1\x3b\x83\x8b\x72\x3c\x9a\x5c\xe6\x82\x6a\xfd\xc2\x3e\x68\x67\x0b\x34\x43\x31\xd7\xb6\x2a\xf0\xd8\xb9\x1a\x75\xa6\xc4\x82\x23\x55\x14\xa9\x10\x80\x21\xc9\x26\xb4\x5f\x80\xa5\x05\x17\x98\x9a\xf4\x25\x8e\x0c\xa1\x26\xc5\x05\x96\x4b\xe4\x0f\xdb\x11\xab\x95\x68\xc3\xef\xaa\x7a\x49\x2a\xa7\x14\x67\xce\xeb\x1f\x8a\xda\xd9\x7c\x7e\x13\x72\xed\xae\x9b\xa1\xe4\x48\x5b\x53\x93\xae\x86\xd2\x19\x3e\xdb\x91\x4f\x86\xd7\x94\x0c\x54\xeb\x5b\xef\x52\x1d\x0a\xbc\xf6\xaf\xfa\x6f\xeb\x3d\xcf\xc1\x25\xaf\x78\x0f\x6c\xd8\xcb\x1d\x20\x83\x75\xb6\xdc\x10\x9f\xcb\xfb\xbf\xb9\xff\x90\x70\xdc\x9d\xf9\xfc\xa0\xce\x70\xc9\xd3\x96\xb4\x0d\x7a\x42\x5f\x00\x87\xdd\xee\xfd\x2f\x24\xf9\xc1\x2a\x6e\xba\x3b\xfa\x3a\x0e\xec\x9c\x3e\xff\x6f\x00\x00\x00\xff\xff\xd0\x46\x0b\xa3\xfc\x02\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(2019, 7, 24, 14, 54, 42, 529577876, time.UTC),
			uncompressedSize: 5418,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x58\x6d\x6f\xdb\x46\xf2\x7f\xaf\x4f\x31\x50\x5e\x38\x01\x24\xca\xaa\xfb\xff\xe3\xc0\x9e\x0a\xa4\x49\x93\xf3\xa5\x76\x8c\xfa\x72\x87\x7b\x75\x5d\x2d\x47\xe2\x42\xcb\x5d\xde\xce\x52\x8a\x60\xf8\xbb\x1f\x66\x97\x0f\x4b\x4b\x76\x8a\xf4\x45\x63\x91\xf3\xfc\xf0\x9b\x19\xce\xe7\xf3\x89\xa8\xd5\x3f\xd1\x91\xb2\x26\x07\x51\xd7\xb4\xd8\x2f\x27\x3b\x65\x8a\x1c\xde\x63\xad\xed\xb1\x42\xe3\x27\x15\x7a\x51\x08\x2f\xf2\x09\x80\x11\x15\xe6\xb0\xd1\xcd\xd7\xf6\x07\xd5\x42\x62\x0e\x0f\x0f\x90\xdd\x76\x3f\xe1\xf1\x71\x42\x35\x4a\x66\x70\x58\x6b\x25\x05\xe5\xb0\x9c\x00\x10\x6a\x94\xde\x3a\x7e\x03\x50\x09\x2f\xcb\xdf\xc4\x1a\x35\xc5\x07\x4f\xe4\x93\x77\xc2\xe3\xf6\x18\x5f\xfa\x63\x8d\x39\xfc\x8e\xd2\xa1\xf0\x38\x01\xf0\x58\xd5\x5a\x78\x6c\x85\x25\x56\xf2\x7f\xc2\x18\xeb\x85\x57\xd6\xf4\xc2\x01\x6a\x67\x2b\xf4\x25\x36\x94\x29\x9b\xd5\xd6\xf9\x1c\xa6\x57\x97\x57\xcb\x29\xbc\x02\x8f\x5a\x27\x14\xe0\x2d\x90\x74\xa2\x46\x58\x54\xe8\x9d\x92\x04\x68\x8a\xda\x2a\xe3\x2f\x08\x98\x39\x6b\x05\xeb\x91\x0f\x4f\xbc\x00\xe8\x62\x11\xfe\x46\xb7\x57\x12\xdf\x4a\x69\x1b\xe3\x6f\xc7\x84\x00\x7b\xab\x9b\x0a\x7b\x51\xf3\x56\xd4\x56\xf9\xf9\x0e\x8f\xbd\x02\xe2\x28\xf8\x41\x61\xf7\x64\x90\x37\x67\x96\x22\x24\x31\xa1\x2a\x70\x23\x1a\xed\x6f\x6c\x81\x39\x5c\xfe\x78\x79\x09\xaf\xe0\x50\xa2\x81\x8a\xad\xc1\x02\x1c\x8a\x62\x6e\x8d\x3e\xce\xe0\x80\x70\xb0\xe6\xc2\xc3\x1a\x41\xac\x35\x72\x3c\x64\x59\xd9\x62\xd2\x0a\x7c\x05\xff\x28\x15\x81\x22\x10\xe0\xab\x7a\x43\xd0\x10\x16\xb0\xb1\x0e\xb6\x68\xd0\x09\xaf\xcc\x16\xee\xef\xff\x06\x3b\x3c\x52\x06\xd7\x06\x3e\xfd\x85\xe0\xe7\x15\x2c\xb3\xe5\xe5\xac\x97\xd2\xe9\x8e\x2e\x10\x08\x87\xa9\x1d\x64\xd9\x14\x83\x58\x80\x00\xc2\x5a\x70\x51\xb4\x81\x82\x03\xf6\x62\xa4\x30\x70\x70\xca\xb3\xa1\xd9\xf9\xf8\x6d\xd1\xf4\xc1\xc0\xaa\xf6\xc7\xf7\xca\xa5\x41\xac\xb0\x50\x4d\x95\xc3\x0d\x56\xd6\x1d\x53\x3f\x11\x36\x56\x6b\x7b\x60\x8f\x5a\xd5\x8a\x82\xab\x0d\xf1\x33\x01\xb2\x21\x6f\x2b\xc5\x11\xd8\x19\x7b\x30\xff\x29\x2d\x79\xea\x45\x6c\x94\xc6\x19\x1c\x4a\x25\x4b\x38\xda\x06\x0e\x4a\xeb\xe8\x94\xb7\x50\x58\x50\x9b\xf0\x98\x99\xf8\x0f\x07\xf6\x60\xd8\xec\x5e\x80\xc3\xda\x82\x13\xbe\x44\x07\xbe\x14\xa6\x55\xbc\x55\xbe\x6c\xd6\x60\xf9\x21\x82\x56\x3b\xcc\xe0\xdf\xb6\xb9\xd0\x1a\x84\x26\xdb\xa9\x18\x07\x1b\x94\x07\x65\xbc\x0d\x3c\xd2\x1a\x2f\x94\x41\x37\x83\x35\x6a\x7b\xc8\xe0\x1e\x87\xa8\x96\xde\xd7\x94\x2f\x16\x51\x4f\x26\x6d\xb5\x38\xa0\xd8\xe3\xc1\xba\x1d\x2d\xb8\xd2\x16\x6b\x6d\xd7\x8b\x4a\x90\x47\xb7\x20\xe5\x71\x41\x5e\x98\x42\x68\x6b\x70\x4e\xe8\x9b\x3a\xab\x8a\x57\xc1\xda\xb9\x98\xd7\x4e\xed\x85\xc7\x50\x9e\xec\x6c\xaf\xa8\x4b\x15\x51\x39\x97\xd6\x6c\xd4\xb6\x7f\x05\x10\x1f\xdc\x88\x3a\x4f\x1e\xa6\x7d\x36\x4f\xd8\xbe\x37\x6d\xd9\xae\x59\xe3\x22\x0a\x19\xaa\xf3\x9b\x29\x3b\x28\x2a\xf9\x49\x29\xf6\x08\x02\x0a\xb5\xd9\xa0\x63\xdc\xec\x24\xb4\x4d\x37\xc0\x65\xc8\x50\x14\x97\xe6\x88\xb1\x67\xaf\x0a\xec\xb2\xb2\x51\xdb\x4a\xd4\x83\x21\xca\x97\x20\x0c\xa0\xf1\xee\x18\x7c\xf8\x23\x12\xfd\x31\x03\x61\x0a\x68\x8c\xb4\x15\x03\x76\xe0\x8f\xde\xde\x84\x6c\x0b\x53\xf4\x52\xd0\xec\x83\x04\x85\xd4\xa6\xfb\x24\x03\x1c\x86\xef\xc8\x40\xc2\xf6\xcd\x0c\x04\xa0\xf0\x16\x54\xc5\x30\x0a\x1f\xef\x3e\x06\x8c\x80\xd7\xec\x16\xa9\xad\x51\x66\x50\xce\xce\xed\xd1\xa9\x8d\x92\x01\xcf\xa1\x6e\x5c\x6d\x09\xe9\xcd\x9f\x08\x64\x2f\x25\xa2\x4b\x8c\x22\x07\x88\xf5\xfd\x89\xc0\x81\x70\xdb\xa1\x8b\x9f\x89\xd8\xb6\xde\x32\xbc\x50\x12\x9a\x31\x42\xbf\x7a\x06\xa3\x4f\xf9\xce\x60\x74\x17\xce\xbe\x51\x4f\xc6\x43\x32\x40\xda\xa8\x3b\x0c\x30\x6a\x2c\x4c\x73\x9e\x91\xe4\xa7\xa0\x2a\xb1\xc5\x58\xfd\xcc\x90\xc1\x07\x65\x8a\xe0\x73\xc5\xa8\xe3\x50\x0e\x55\x1b\x11\x47\xa3\x20\x64\x6c\x09\xac\x9c\x04\x5e\x15\x40\xf8\x1e\x16\x18\x13\x0a\x2b\x77\xe8\x02\x34\xb8\x13\x70\xf0\xa2\x0f\x5f\x97\x4b\x5e\x09\x78\x4b\x60\xcd\x5e\x6c\x81\xad\xcd\x7a\x9a\xa0\x2a\x87\x56\xa8\xb2\x41\x8c\x2c\xc2\x3f\xf9\x32\x5b\x5e\x65\x3f\x8c\x69\xef\x1a\xad\xef\xac\x56\xf2\x98\xc3\xf5\xe6\xd6\xfa\x3b\x87\x94\x7a\xe2\x90\x6c\xe3\x24\x52\x0a\xf5\x0e\xff\xdb\x20\xf9\xd1\x33\x00\x59\x37\x39\xfc\xdf\x65\x35\x7a\x58\x85\x69\x90\xc3\xff\xff\x78\xa3\x86\x4d\xc2\xba\x94\x79\x3e\x64\xe7\x2e\x6c\x15\x57\x97\x57\x3c\x5c\x95\xd9\x58\x57\x85\xb2\x15\xba\xa7\x4e\x6a\x6c\x24\xe3\xfc\xb0\x87\x08\xda\x77\xc2\x97\x39\x2c\xd0\xcb\x10\x8b\x62\x41\x54\xf2\xd6\x62\xe3\x1e\x05\xda\xb6\xed\xb1\x55\x7b\x34\xa0\x4c\x0c\xcf\x05\x45\x1e\xa2\x72\x31\xea\xea\x18\x05\x51\x7c\x36\xfa\x98\x83\x77\x0d\xb2\x34\x9e\xe8\xa1\xa1\xd6\x2d\x0e\x71\x05\xd4\xe8\x36\xd6\x49\x64\xa1\x71\x84\xf3\x04\x7f\xce\xf0\x74\xca\x8e\x6d\xdf\x0b\xd7\xda\x1e\xc9\xbe\xcf\xfc\xa4\x9c\xae\x8d\xd4\x4d\x68\x74\x5e\x44\x22\x1e\x77\x20\x10\x27\xdd\x37\x06\x73\x37\x9a\x7f\x62\xd6\x27\x43\xb3\x07\x03\x28\x50\x6a\xe1\x78\x01\x59\xdb\x7d\x52\xab\x2f\x4c\xad\xd8\xcd\xa9\xf3\xce\x5a\xbf\xc8\x88\xca\x67\x1d\x10\x66\xa4\x75\x3a\x20\xea\x34\x6a\x9e\x75\x24\x89\x04\x34\x7b\xe5\xac\x09\xf8\x15\x47\xc3\xf4\xd3\x97\x5f\x7e\x7d\xf7\xf9\xf6\xc3\xf5\xc7\x69\x44\xac\x19\xc7\xc3\xee\xd1\xb9\xf1\x78\x49\xc4\x04\x44\x5e\x1f\x23\xf8\x7b\x7d\xce\xc7\x93\xb9\x70\xea\xe3\x50\x9c\x4c\xfc\xac\xa3\x0c\xd1\xbc\x46\x77\xda\x18\x51\x92\xc9\xd9\x5a\x17\x72\x92\x88\x78\x3a\x7f\xd3\xa4\x87\xe1\xdb\x2d\x92\xc2\x80\xd0\x1e\x9d\xe1\x45\xf1\xc4\xe2\x8d\xb3\x15\x97\x45\x37\x60\x67\x20\x88\xcb\xad\x1d\x02\x1c\x06\x6d\xe5\x8e\x4e\x93\x8d\x66\x9f\x9f\x89\xcb\x10\xee\x51\x5c\xf6\x42\x37\x78\x12\x93\x6f\x15\xf1\xd3\x1a\xe8\x46\xc4\x0b\x15\xc0\x13\x6a\x3c\x99\x5e\x98\x4d\xcf\xd4\x25\x53\xc5\x61\x3c\xa2\x1b\xe3\xc3\x60\x34\xab\xcc\x47\x3e\xc4\x34\xc4\x83\x03\x0b\xc6\x4c\x29\x64\x89\x05\x47\x36\x4d\x6d\xbf\x04\x71\x12\x39\x2c\xb3\x44\x8a\x75\xed\x96\x93\x30\xb4\x07\x53\x60\x9c\x05\x25\xbc\xe8\x53\x53\xd7\xfa\xc8\x81\xa0\x34\x14\xc3\xae\xe1\x0f\x96\xad\x6c\x38\xa5\xa1\xe0\xc2\x75\x17\xf2\x00\xa5\x3d\x84\x63\xc6\x1a\x83\xd2\x87\x3d\xc4\x8f\x43\x37\x9f\xf7\x0e\x84\x2d\x95\x95\xaf\xfa\x47\x59\x3b\xa2\x33\xda\xcb\x4c\xea\x86\x37\xdf\x8c\xf1\x4b\xa7\x21\xf9\x42\xb1\xd5\x86\x50\xbc\x8b\xa4\xd7\x77\x23\xa7\xb8\xeb\x08\x7d\x38\x96\xc6\x89\x1d\x6c\xe8\xe8\xf9\x24\xf5\x8e\x29\xc3\xf9\x92\x20\x70\x6a\x71\x4b\xbd\x9a\x8c\x76\x02\x45\x50\x35\x14\xce\xb9\x10\x3d\x85\x45\xac\xa6\x75\xc0\xf5\x30\x8d\xc3\x15\xf7\xba\x3b\x8d\xde\xa4\xb6\x74\xbd\x15\xab\x90\x97\x88\xe4\x98\x1b\x19\xc2\x58\x18\xf1\x7d\x5e\x28\xb7\x3a\x41\xfd\xc9\x88\x9a\x87\x46\xe3\xf4\xea\xe1\x01\xb2\x8f\xca\x7f\xf9\xfd\x37\x78\x7c\x3c\xa1\x58\x3b\x61\x64\xd9\x11\xfd\x12\x7e\x9d\xa3\xab\x85\x0f\x54\xf7\x21\x4a\xf4\x77\xab\x4c\xe0\xe0\x5a\x27\x98\xce\xa6\xe7\x98\xc2\xf9\xde\xc9\x0e\xdf\x23\xce\x51\x35\x84\xae\xb7\x92\xd0\x9d\xa3\xc1\x4a\xa8\x5e\xd2\xaf\xfc\x23\xa5\x3a\xdb\xf3\xc8\x65\x72\xb0\x9c\x5a\x34\xe1\xce\xde\x2a\x1f\xc0\x48\xf9\x27\xab\x70\x57\x9b\xac\xa9\x6d\xeb\xb6\x69\x57\x2f\x74\x71\xc7\xd1\xca\x62\xae\xd5\x5f\x77\x78\x04\x55\xfc\xfc\xb2\x69\x11\xa9\x13\xab\x58\x84\xf0\x8d\xc3\xd1\x3e\x7e\x46\x57\x78\x7d\x9c\xf7\xf4\x74\x1e\xef\xd8\x77\x83\x5f\x7d\x17\x80\xa4\x23\x85\x81\x69\x53\x93\x77\x28\xaa\x69\xd7\x2f\x89\x90\xd7\x98\x6d\xb3\x19\xfc\x8b\xd7\x4d\x78\xa7\x6d\x53\xbc\xc9\xc2\xb9\xe1\xed\x8e\xd7\x07\x82\x5a\x38\xaf\x64\xa3\x85\x83\xf6\xd2\x6d\xa5\x3c\x6d\xf5\x56\xeb\xea\x40\xbc\xd1\x4a\x96\x95\x85\x35\x36\x8b\x7b\xac\xa8\xd5\xe2\xc9\x86\xcd\x6c\x41\xd1\x4a\xac\xe5\xf2\x87\xab\xd3\xff\xa7\x0e\xdf\xa3\xdb\x9f\xf9\x88\xc4\x53\x6f\xc0\x39\xce\xda\x4f\x69\xc3\x89\x1d\x37\xaa\x8b\x4d\x8f\x3e\xf9\x32\x75\x91\x7c\xdc\x4a\xbe\x52\xb1\x8b\xe1\x9c\x0a\x93\x27\x1b\x15\xa7\x56\xe4\xd1\xcc\x5b\x13\x56\xf9\xd5\xe5\xd5\x72\x32\x79\x78\x70\xc2\x6c\x11\xb2\xb7\x45\xa1\xe2\x8e\xfa\x41\x37\x5f\xdf\xf2\x40\x79\x7c\x1c\xf8\xb9\xa0\xb9\x90\x1f\x1e\xd0\x14\x8f\x8f\xc3\x7d\xf7\xb9\x8e\x5c\xf0\xfe\xf6\xbe\x03\x31\x9a\xb5\xb3\xb5\x71\x2d\xa4\x81\x29\xac\x27\xb0\x81\x18\x2a\x71\x0c\x2b\xb9\xde\x0f\xc7\x99\x21\x6d\xed\xae\xa9\x41\x11\x35\x48\x60\x0d\x90\xad\x10\x3e\x35\x6b\x74\x06\x3d\x12\x84\x2f\x09\x34\xdc\x5e\x85\xa1\x6e\xeb\x9f\xde\x5a\x83\xd3\xf4\xcd\xbb\x60\x40\x7a\x7d\x45\xe5\x34\x3e\xc8\xba\x19\x19\xec\x1b\xbd\xe9\xc7\xf7\x74\x39\x9d\xfc\x2f\x00\x00\xff\xff\xee\x1f\x18\x55\x2a\x15\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰FileInfo{
			name:    "flux-secret.yaml.tmpl",
			modTime: time.Date(2019, 7, 24, 14, 29, 53, 668285520, time.UTC),
			content: []byte("\x2d\x2d\x2d\x0a\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x76\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x53\x65\x63\x72\x65\x74\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x66\x6c\x75\x78\x2d\x67\x69\x74\x2d\x64\x65\x70\x6c\x6f\x79\x0a\x20\x20\x6e\x61\x6d\x65\x73\x70\x61\x63\x65\x3a\x20\x7b\x7b\x20\x2e\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x20\x7d\x7d\x0a\x74\x79\x70\x65\x3a\x20\x4f\x70\x61\x71\x75\x65\x0a"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(2019, 7, 24, 14, 32, 56, 924980880, time.UTC),
			uncompressedSize: 846,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\xcd\x8e\xd3\x40\x10\x84\xef\x7e\x8a\x92\x72\xc5\x41\x5e\x29\x17\xdf\x10\x0b\x68\x25\x58\xe5\xb2\xdc\x3b\xe3\x8e\x33\x62\xfe\x98\x6e\x87\x98\xd5\xbe\x3b\x9a\xfc\x38\x0e\x9b\x3e\x25\x53\xfd\x75\xd7\x94\xa7\xae\xeb\x6a\x01\xcf\xde\x90\xd9\x71\x87\x8e\x93\x8b\xa3\xe7\xa0\x18\x84\x3b\x6c\x46\x7c\x75\xc3\x01\x1a\x71\xec\xa8\x16\x30\x31\x28\xd9\xc0\x19\xd6\x53\xcf\xf0\xac\xd4\x91\xd2\xb2\xa2\x64\x7f\x72\x16\x1b\x43\x0b\x4a\x49\x3e\xee\x9b\xea\x97\x0d\x5d\x8b\xc7\x69\x6c\x75\x69\x6f\x2b\x20\x90\xe7\xf6\xba\xfd\x7c\x22\x89\x0c\xb7\x78\x7d\xc5\xf2\xf9\xf2\x17\x6f\x6f\x95\x24\x36\x85\xca\x9c\x9c\x35\x24\x2d\x9a\x0a\x10\x76\x6c\x34\xe6\xa2\x00\x9e\xd4\xec\xbe\xd3\x86\x9d\x9c\x0e\xee\x2d\x51\xf6\xc9\x91\xf2\x19\x99\x19\x2a\xe5\x6e\xe8\x7b\x3c\x70\xb1\x52\x6a\xca\x63\x62\xea\xbb\x4c\xa9\x63\x62\x33\xa1\x6d\x96\xab\x65\xb3\xba\xd5\xd7\x83\x73\xeb\xe8\xac\x19\x5b\x3c\x6d\x9f\xa3\xae\x33\x4b\x89\xee\xd2\x45\xb9\x9f\xf9\xab\x51\x7b\xac\x9a\x07\x00\x0b\xfc\xa0\x83\xf5\x83\x2f\x1b\x62\x1e\xcb\x67\x1b\x84\x3f\xc0\x06\x78\xee\x69\x33\x2a\xcb\x1c\x7c\xc2\xca\xe3\x06\x14\xfb\x97\xb1\x8d\x19\x31\x30\xac\xb2\x9f\xb7\x27\x34\xcd\x43\xd3\x60\x81\x47\xde\xd2\xe0\x14\x29\xe6\xab\xaf\x45\xe9\xd9\xef\x4f\x3f\x5f\x82\x89\xfe\xf8\x90\x34\xa2\x67\x85\x8b\xbd\x20\x6e\xc1\x64\x76\xc8\xfc\x7b\x60\x51\x50\xe8\x90\x59\x52\x0c\xc2\xcb\x69\x50\x99\x7a\x73\xc3\x53\x9e\xc6\x59\x0e\x7a\xbd\xc0\x2c\xfb\x75\xcc\xda\x9e\xdc\x4d\xb2\xb0\x19\xb2\xd5\xf1\x73\x0c\xca\x07\x6d\x67\x5c\x1e\xc2\x27\x79\x11\xce\xff\x33\x67\xe9\x5b\x8e\x43\x7a\xaf\x91\x73\xf1\xcf\x3a\xdb\xbd\x75\xdc\xf3\x17\x31\xe4\x48\x8f\xcf\x7d\x4b\x4e\xb8\xfa\x17\x00\x00\xff\xff\xd9\x0a\x29\x86\x4e\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(2019, 7, 24, 14, 59, 5, 473563594, time.UTC),
			uncompressedSize: 178,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8c\x41\x0a\x02\x31\x14\x43\xf7\xff\x14\xb9\x40\x85\xba\xfc\x87\x70\x23\xb8\xff\xfc\x09\x58\xb4\xd3\xd2\x96\xd9\x0c\x73\x77\x29\xea\x46\xcc\x2a\x09\x79\x09\x21\x88\xd5\x74\x63\xeb\xa9\xac\x8a\x2d\xca\x23\xad\x8b\xe2\xca\xb6\x25\xa7\x64\x0e\x5b\x6c\x98\x0a\xb0\x5a\xa6\x22\x33\xbb\xf9\x9d\xcb\xa7\xe9\xd5\x9c\x8a\x7d\xc7\xe9\xf2\x8d\x38\x0e\xe9\x95\x3e\xa9\x5a\xda\xe8\xd3\x00\xe1\xcf\xc5\xd4\x9c\x28\x62\x3c\xc7\x28\x40\xe7\x93\x3e\x4a\x7b\x33\xbf\xc4\x2b\x00\x00\xff\xff\xa8\x2c\x5b\x6b\xb2\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
