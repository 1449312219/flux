// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 8, 21, 13, 13, 30, 215019770, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(2019, 8, 19, 16, 28, 27, 139555385, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(2019, 8, 21, 13, 13, 30, 125019161, time.UTC),
			uncompressedSize: 6456,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x5f\x6f\x1c\xb7\x11\x7f\xd7\xa7\x18\x9c\x1f\x6c\x03\x77\x7b\x52\x94\x04\xc5\xa6\x0a\x90\xd8\x89\xea\x3a\x96\x05\xab\x6e\xd1\xa7\x9a\xc7\x9d\xbb\x25\x8e\x4b\x6e\x39\xe4\x5d\x16\x42\xbe\x7b\x31\xe4\xfe\xe1\x4a\x27\x3b\xf0\x5b\xfd\x60\x49\xdc\xf9\x3f\xc3\xdf\xcc\x70\xb5\x5a\x9d\x89\x56\xfd\x13\x1d\x29\x6b\x4a\x10\x6d\x4b\xeb\xc3\xc5\xd9\x5e\x99\xaa\x84\xd7\xd8\x6a\xdb\x35\x68\xfc\x59\x83\x5e\x54\xc2\x8b\xf2\x0c\xc0\x88\x06\x4b\xd8\xea\xf0\xfb\xfd\x3d\xa8\x2d\x14\x37\xa2\x41\x6a\x85\x44\xf8\xe3\x8f\xfe\x7b\xfc\xb3\x84\xfb\xfb\xf9\xd7\xfb\x7b\x40\x53\x31\x19\xb5\x28\x59\x98\xc3\x56\x2b\x29\xa8\x84\x8b\x33\x00\x42\x8d\xd2\x5b\xc7\x5f\x00\x1a\xe1\x65\xfd\x9b\xd8\xa0\xa6\x74\x90\xeb\x66\x6a\xef\x84\xc7\x5d\x97\x3e\xfa\xae\xc5\x12\x3e\xa0\x74\x28\x3c\x9e\x01\x78\x6c\x5a\x2d\x3c\xf6\xc2\x32\x0f\xf8\x9f\x30\xc6\x7a\xe1\x95\x35\xa3\x70\x80\xd6\xd9\x06\x7d\x8d\x81\x0a\x65\xd7\xad\x75\xbe\x84\xc5\xe5\xf9\xe5\xc5\x02\x9e\x81\x47\xad\x33\x0a\xf0\x16\x48\x3a\xd1\x22\xac\x1b\xf4\x4e\x49\x62\xe7\x5a\xab\x8c\x7f\x4e\xc0\xcc\x45\x2f\x58\xcf\x7c\x78\xe0\x05\xc0\x10\x8b\xf8\x3b\xba\x83\x92\xf8\x93\x94\x36\x18\x7f\x33\x27\x04\x38\x58\x1d\x1a\x1c\x45\xad\x7a\x51\x3b\xe5\x57\x7b\xec\x46\x05\xc4\x51\xf0\x93\xc2\xe1\x64\x92\xb7\x62\x96\x2a\x26\x38\xa3\xaa\x70\x2b\x82\xf6\xef\x6c\x85\x25\x9c\x7f\x7b\x7e\x0e\xcf\xe0\x58\xa3\x81\x86\xad\xc1\x0a\x1c\x8a\x6a\x65\x8d\xee\x96\x70\x44\x38\x5a\xf3\xdc\xc3\x06\x41\x6c\x34\x72\x3c\x64\xdd\xd8\xea\xac\x17\xf8\x0c\xfe\x51\x2b\x02\x45\x20\xc0\x37\xed\x96\x20\x10\x56\xb0\xb5\x0e\x76\x68\xd0\x09\xaf\xcc\x0e\xee\xee\xfe\x06\x7b\xec\xa8\x80\x37\x06\xde\xfe\x85\xe0\xc7\x2b\xb8\x28\x2e\xce\x97\xa3\x94\x41\x77\x72\x81\x40\x38\xcc\xed\x20\xcb\xa6\x18\xc4\x0a\x04\x10\xb6\x82\x8b\xa2\x0f\x14\x1c\x71\x14\x23\x85\x81\xa3\x53\x9e\x0d\x2d\x4e\xc7\x6f\x87\x66\x0c\x06\x36\xad\xef\x5e\x2b\x97\x07\xb1\xc1\x4a\x85\xa6\x84\x77\xd8\x58\xd7\xe5\x7e\x22\x6c\xad\xd6\xf6\xc8\x1e\xf5\xaa\x15\x45\x57\x03\xf1\x99\x00\x19\xc8\xdb\x46\x71\x04\xf6\xc6\x1e\xcd\x7f\x6a\x4b\x9e\x46\x11\x5b\xa5\x71\x09\xc7\x5a\xc9\x1a\x3a\x1b\xe0\xa8\xb4\x4e\x4e\x79\x0b\x95\xe5\x7b\xc6\xc7\xcc\xc4\xbf\x38\xb0\x47\xc3\x66\x8f\x02\x1c\xb6\x16\x9c\xf0\x35\x3a\xf0\xb5\x30\xbd\xe2\x9d\xf2\x75\xd8\x80\xe5\x43\x04\xad\xf6\x58\xc0\xbf\x6d\x78\xae\x35\x08\x4d\x76\x50\x31\x0f\x36\x28\x0f\xca\x78\x1b\x79\xa4\x35\x5e\x28\x83\x6e\x09\x1b\xd4\xf6\x58\xc0\x1d\x4e\x51\xad\xbd\x6f\xa9\x5c\xaf\x2b\x2b\xa9\xe0\xc2\x92\x15\x5f\x1d\x34\x6b\xbe\x7a\xe4\xd7\xbb\xa0\x2a\xa4\x75\x20\x5c\xb5\x4e\x1d\x84\xc7\x58\x7a\xec\x48\x51\xfb\x46\x8f\x92\x86\x5c\x10\xd5\x2b\x69\xcd\x56\xed\xc6\x4f\x00\xe9\xe0\x9d\x68\xcb\xec\x30\xbf\x48\xab\x8c\xed\x6b\xf3\x52\xec\xc3\x06\xd7\x49\xc8\x54\x7e\x5f\xcc\xc9\x51\x51\xcd\x27\xb5\x38\x20\x08\xa8\xd4\x76\x8b\x8e\x41\x73\x90\xd0\xdf\xaa\x09\x18\x63\x0a\x92\xb8\x3c\x09\x0c\x2e\x07\x55\xe1\x10\xf6\xad\xda\x35\xa2\x9d\x0c\x51\xbe\x06\x61\x00\x8d\x77\x5d\xf4\xe1\x53\x22\xfa\xb4\x04\x61\x2a\x08\x46\xda\x86\xd1\x3a\xf2\x27\x6f\xdf\xc5\x74\x0a\x53\x8d\x52\xd0\x1c\xa2\x04\x85\xd4\xe7\xf3\x51\x06\x38\x0c\x5f\x91\x81\x8c\xed\x8b\x19\x88\x48\xe0\x2d\xa8\x86\x71\x12\xae\x6f\xaf\x23\x08\xc0\x0b\x76\x8b\xd4\xce\x28\x33\x29\x67\xe7\x0e\xe8\xd4\x56\xc9\x08\xd8\xd0\x06\xd7\x5a\x42\x7a\xf9\x27\x02\x39\x4a\x49\xf0\x91\xa2\xc8\x01\x62\x7d\x7f\x22\x70\x20\xdc\x6e\xba\xa6\x4f\x44\x6c\xd7\xee\x18\x3f\x28\x0b\xcd\x1c\x82\x9f\x3d\x01\xc2\x8f\xf9\x4e\x80\xf0\x10\xce\xf1\x26\x3e\xc2\xff\xac\x43\xf4\x51\x77\x18\x71\xd2\x58\x58\x94\xe9\x26\x2e\x40\x35\x62\x87\xa9\xfa\x99\xa1\x80\x5f\x95\xa9\xa2\xcf\x0d\xc3\x8a\x43\x39\x55\x6d\x82\x14\x8d\x82\x90\xc1\x23\xb2\x72\x12\x78\x4e\x00\xe1\xc7\x7b\x5f\x87\x4d\x51\x59\xb9\x47\x57\x48\xdb\xac\xdd\xfa\x88\xe2\x80\x47\xeb\xf6\xb4\x66\x25\x6b\x2f\xc6\xf0\x0d\xb9\xe4\x9e\xcf\xf3\x00\x6b\xf6\x62\x07\x6c\x6d\x31\xd2\x44\x55\x25\xf4\x42\x95\x5d\x27\x54\x89\x3f\xca\x8b\xe2\xe2\xdb\xe2\x7c\x4e\x7b\x1b\xb4\xbe\xb5\x5a\xc9\xae\x84\x37\xdb\x1b\xeb\x6f\x1d\x52\xee\x89\x43\xb2\xc1\x49\xa4\x1c\xcb\x1d\xfe\x37\x20\xf9\xd9\x19\x80\x6c\x43\x09\xdf\x9d\x37\xb3\xc3\x26\xc2\x7d\x09\xdf\x7f\xfb\x4e\x4d\xa3\x82\x75\x39\xf3\x6a\xca\xce\x6d\x1c\x1b\x2e\xcf\x2f\xb9\x7b\x2a\xb3\xb5\xae\x89\x65\x2b\xf4\x48\xad\xd5\x01\x0d\x12\xdd\x3a\xbb\xc1\xdc\x02\x0e\xeb\xf5\xbc\x73\x27\x55\x49\xe0\xfc\x58\xf8\xba\x84\xb5\x68\x55\x8a\xf4\xe1\xfb\xb5\xaa\xd0\x78\xe5\xbb\xa2\x0d\x9b\x8c\x56\x19\xe5\x95\xd0\xaf\x51\x8b\xee\x8e\xef\x68\x45\x25\x7c\x97\x11\x78\xd5\xa0\x0d\xfe\xc4\x37\x6e\xb4\xea\xff\xc3\xd4\xec\xe2\xce\x12\x73\x7a\x44\x82\xd4\xea\x6e\x93\x65\xe8\x65\xb4\xac\x5a\x13\xd5\x3c\xeb\xd9\x34\x7d\x82\xb6\x3d\xe6\xec\x38\x65\xa0\x4c\xaa\xb9\xe7\x94\x78\x88\xea\xf5\x0c\x2a\x87\x98\xbd\x37\xba\x2b\xc1\xbb\x80\x2c\x8d\xe7\xa0\x88\x52\x9b\x1e\xdc\xf9\x5a\xb5\xe8\xb6\xd6\x49\x64\xa1\x69\xf0\xe1\xb9\xe7\x29\xc3\xf3\xd9\x64\x6e\xfb\x41\xb8\xde\xf6\x44\xf6\x75\xe6\x67\x77\xf4\x8d\x91\x3a\x44\xf4\xe4\xf1\x2d\x35\xb9\x01\x59\xd3\x7c\xf0\x85\x71\x66\x18\x68\x7e\x60\xd6\x07\xa3\xc6\x88\xb0\x50\xa1\xd4\xc2\xf1\xd8\xb6\xb1\x87\x0c\x00\x3e\x33\x0a\x24\x88\xcc\x9d\x77\xd6\xfa\x75\x41\x54\x3f\xe9\x80\x30\x33\xad\x8b\xa9\x4d\x2d\x92\xe6\xe5\x40\x92\x49\x40\x73\x50\xce\x9a\xd8\x14\x52\xbf\x5d\xbc\xfd\xf8\xf3\x2f\xaf\xde\xdf\xfc\xfa\xe6\x7a\x91\xda\xc0\x92\xe3\x61\x0f\xe8\xdc\xbc\x67\x67\x62\x62\x9b\xdb\x74\xa9\xa3\x7a\x7d\xca\xc7\x47\xcd\xf6\xb1\x8f\x53\x71\x32\xf1\x93\x8e\x72\xdf\xe3\xe5\x63\xd0\xc6\x30\x9d\x8d\x23\xbd\x75\x31\x27\x99\x88\x87\x43\x4d\x9e\xf4\x38\xd1\x0c\xe3\xb7\x30\x20\xb4\x47\x67\x78\xbc\x7e\x64\xf1\xd6\xd9\x86\xcb\x62\x98\x5a\x96\x20\x88\xcb\xad\xef\xac\x1c\x06\x6d\xe5\x9e\x1e\x27\x1b\xcd\xa1\x3c\x11\x97\x29\xdc\xb3\xb8\x1c\x84\x0e\xf8\x28\x26\x5f\x2a\xe2\x87\x35\x30\xf4\xdd\xcf\x54\x00\xb7\xfd\x79\xbb\xff\x4c\xc3\x7f\xa2\x2e\x99\x2a\x4d\x38\x33\xba\x39\x3e\x4c\x46\xb3\xca\x72\xe6\x43\x4a\x43\x5a\xd3\xb0\xe2\x46\x24\x85\xac\xb1\xe2\xc8\xe6\xa9\x1d\x27\x4b\x4e\x22\x87\x65\x99\x49\xb1\xae\x1f\x1d\x33\x86\x7e\xcd\x8c\x8c\xcb\xa8\x84\xd7\x23\x0a\x6d\xab\x3b\x0e\x04\xe5\xa1\x98\x06\x38\x7f\xb4\x6c\x65\xe0\x94\xc6\x82\x8b\x3b\x71\xcc\x03\xd4\xf6\x18\x57\x40\x6b\x0c\x4a\x1f\x87\x3b\x3f\x0f\xdd\x6a\x35\x3a\x10\xe7\x7f\x56\x7e\x35\x1e\x15\xfd\xdc\x53\xd0\x41\x16\x52\x07\xf2\xe8\x0a\xc6\x2f\x9d\x87\xe4\x23\xa5\xab\x36\x85\xe2\x55\x22\x7d\x73\x3b\x73\x8a\x6f\x1d\xa1\x8f\x2b\xe6\x3c\xb1\x93\x0d\x03\x3d\x2f\xf2\xde\x31\x65\x5c\xfa\x32\x04\xce\x2d\xee\xa9\xaf\xce\x66\x83\x96\x22\x68\x02\xc5\x25\x38\x46\x4f\x61\x95\xaa\x69\x13\x71\x3d\x8e\x38\x71\xf7\x7d\x31\x2c\x94\x2f\x73\x5b\x86\xbb\x95\xaa\x90\x27\xb3\x6c\x05\x9e\x19\xc2\x58\x98\xf0\x7d\x55\x29\x77\xf5\x08\xf5\x73\xb3\x3e\x64\x03\xd6\x94\xbc\x8f\x1f\x7e\x4b\x3b\xba\x30\xbb\xf4\xed\x5a\xf9\xb8\x37\x92\xf2\xd6\x75\x23\x5a\xfd\xca\xc3\xe1\x4c\x39\xf7\xa0\xe0\xf4\xd5\xfd\x3d\x14\xd7\xca\xb3\xa4\xf8\xd4\x33\xa7\xd8\x38\x61\x64\x3d\x10\xfd\x1c\xff\x4a\x8f\x3e\x6a\x1b\x8f\xf8\x6e\xd0\x29\x4e\x9e\x0f\x98\xef\x2e\xa6\x81\xfe\x6e\x95\xc9\x18\x16\xcb\x45\xff\x76\xa4\x09\x73\x76\x1e\xaf\x1e\xb7\xaa\xa3\x30\xb1\xfc\x1c\x72\x56\x65\x9a\xea\x1b\x61\xd4\x96\xe7\x3d\x2e\x50\x52\x15\xba\xe4\xeb\x83\xc9\x39\xee\xbc\x96\x10\x82\xa9\xd0\x3d\x08\xa0\x43\x2d\xbc\x3a\x60\x1c\x67\x68\x48\xef\x6e\x16\xc4\x07\x05\x3f\x3a\x47\x61\x53\x29\x77\xb1\x4c\x3f\xbf\x19\x1f\xc2\xa6\xe0\xc4\x87\xae\x53\xc1\x89\xaf\x47\x43\x54\x07\xaa\x13\x02\x3e\x12\xba\x53\xfc\x81\xd0\x8d\x99\x63\x1a\x38\xcd\xff\x4b\x23\xd4\x49\x03\x90\x3f\x0c\x12\x06\xaa\xe9\x29\xef\x24\xe8\x22\xdf\xd3\xa3\xe5\x80\xa2\x89\xcf\x43\x1c\x27\xee\x06\xca\x3f\x58\xf0\xf2\x58\xf5\xb8\xda\xa3\xe6\xd5\x67\x60\x74\xe0\xe8\x65\x31\xd7\xd5\x5f\xf7\xd8\x81\xaa\x7e\x1c\xc9\x3e\xd3\x2a\x33\xab\x58\x84\xf0\xc1\xe1\x6c\xcb\x3c\xa1\x2b\x7e\xee\x56\x23\x3d\xcd\xb0\x60\x80\x42\x50\x1e\x6a\x41\x11\xe6\xad\xd1\x1d\x08\x29\x91\x12\x5c\xd6\x98\x1e\x6a\x5e\x0c\x6f\x02\x9f\xb6\x42\x13\x7e\x7a\x79\x42\xdb\xc0\x3f\x0f\x30\x79\x17\xa4\x4f\x8a\x8e\x71\xcf\xe3\xbe\x1f\x3c\x50\x67\x24\x6c\xac\xdd\xef\x11\x5b\x2e\xd7\x51\xc7\x62\xa7\xfc\x62\x09\x0d\x0a\x8e\x14\x5f\x73\x10\x71\xf1\xea\x2b\x38\xb4\xe4\x1d\x8a\x66\x2c\xe5\x87\xd6\xb0\xe8\x15\x79\xe1\xf1\x6a\xa7\xfc\xd3\x09\x37\xf8\xbb\x1f\xb2\x9e\xf5\x01\x61\x60\x31\xe8\x58\x0c\x28\x9d\x09\x79\x81\xc5\xae\x58\xc2\xbf\x78\x73\x84\x57\xda\x86\xea\x65\x11\x5f\x0e\xbc\xdd\xf3\xd0\x4a\xd0\x0a\xe7\x95\x0c\x5a\xb8\x21\x8a\xbd\x94\x87\x0d\xa6\xd7\x7a\x75\x24\x5e\x4e\x25\xcb\x2a\xe2\x46\x5a\xa4\x95\x74\xd8\x40\x1e\xb0\x45\x45\x57\x62\x23\x2f\xbe\xb9\x7c\xfc\x7f\xee\xf0\x1d\xba\xc3\x89\x07\x5f\x9e\xb5\xa6\xee\xca\xa5\xfa\x43\x0e\xf3\x62\xcf\xed\x21\xe5\x8a\xd0\x67\xaf\xc8\xcf\xb3\x87\xe8\xec\x45\x99\x5d\x8c\x2f\x23\x71\xde\x99\x83\xb1\x56\xe4\xd1\xac\x7a\x13\xae\xca\xcb\xf3\xcb\x8b\xb3\xfe\x1a\xff\x54\x55\x2a\xed\x9a\x0c\xe2\x3f\xf1\x0c\x33\xc3\xcb\xe9\xfb\xd4\xc7\xef\xef\xc1\xc5\x96\xf0\x05\xee\x55\x7c\xce\x9f\x5d\xfd\xe9\xb7\x41\xc1\xfb\xb6\x17\xff\xfa\xe6\x6e\x68\xc0\xb4\xec\xe7\xc2\xe0\xfa\x76\x0c\xa6\xb2\x9e\xc0\x46\x62\x68\x44\x17\x77\x74\x7d\x98\x5e\x6b\x0c\x69\x6b\xf7\xa1\x05\x45\x14\x90\xc0\x1a\x20\xdb\x20\xbc\x0d\x1b\x74\x06\x3d\x12\x4b\x0f\x2d\x4d\x8f\x31\x95\xa1\xe1\x19\x60\x71\x63\x0d\x2e\xf2\x2f\xaf\xa2\x01\xf9\x73\x4c\x52\x4e\xf3\x17\x9a\x61\xbe\x8b\xf6\xcd\xbe\x8c\xa3\xe7\xe2\x62\x71\xf6\xbf\x00\x00\x00\xff\xff\x8d\x14\x9f\xf6\x38\x19\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(2019, 8, 19, 16, 28, 27, 142888746, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(2019, 8, 19, 16, 28, 27, 142888746, time.UTC),
			uncompressedSize: 874,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x93\xcd\x6e\x9c\x40\x10\x84\xef\x3c\x45\x49\x7b\x0d\x1b\x61\x69\x2f\xdc\xa2\x38\x89\x2c\x25\xd6\x5e\x9c\x7b\x7b\x68\xf0\x28\xf3\x97\xe9\x66\xb3\x04\xf9\xdd\xa3\xd9\x5f\x36\xf6\x9c\x80\xaa\xaf\xa7\xa6\x80\xba\xae\xab\x15\x3c\x7b\x43\xe6\x85\x3b\x74\x9c\x5c\x9c\x3c\x07\xc5\x28\xdc\xe1\x79\xc2\x57\x37\xee\xa1\x11\x07\x47\xb5\x82\x89\x41\xc9\x06\xce\xb0\x9e\x06\x86\x67\xa5\x8e\x94\xd6\x15\x25\xfb\x93\xb3\xd8\x18\x5a\x50\x4a\xf2\x71\xd7\x54\xbf\x6c\xe8\x5a\xdc\x5f\xc6\x56\x67\x7b\x5b\x01\x81\x3c\xb7\xd7\xdd\xe7\x19\xb6\xc7\xfa\x91\x3c\x4b\x22\xc3\x78\x7d\x3d\x99\x0e\xb7\x2d\xe6\xf9\x56\x9d\x67\x70\xe8\x8a\x4d\x12\x9b\x32\x31\x73\x72\xd6\x90\xb4\x68\x2a\x40\xd8\xb1\xd1\x98\x8b\x02\x78\x52\xf3\xf2\x9d\x9e\xd9\xc9\xf1\xc1\x9b\x00\x15\xa0\xec\x93\x23\xe5\x13\xb2\x08\x5b\x96\xbb\xa1\xdf\xe3\x81\x73\x94\xb2\x2e\x5d\x5d\x98\xfa\x5d\xa6\xac\x43\x9b\x0b\xa1\x6d\xd6\x9b\x75\xb3\xb9\xd5\xb7\xa3\x73\xdb\xe8\xac\x99\x5a\x3c\xf4\x8f\x51\xb7\x99\xa5\xd4\x7a\x76\x51\x1e\x16\xf9\x6a\xd4\x1e\x9b\xe6\x0e\xc0\x0a\x3f\x68\x6f\xfd\xe8\xcb\x0e\x31\x4f\xe5\x95\x8e\xc2\x1f\x60\x03\x3c\x0f\xf4\x3c\x29\xcb\x12\x7c\xc0\xc6\xe3\x06\x14\xfb\x97\xd1\xc7\x8c\x18\x18\x56\xd9\x2f\xed\x09\x4d\x73\xd7\x34\x58\xe1\x9e\x7b\x1a\x9d\x22\xc5\x7c\xcd\xb5\x2a\x9e\xdd\xee\x78\xf9\x14\x4c\xf4\x87\x8f\x4c\x23\x06\x56\xb8\x38\x08\x62\x0f\x26\xf3\x82\xcc\xbf\x47\x16\x05\x85\x0e\x99\x25\xc5\x20\xbc\xbe\x0c\x2a\x53\x6f\x4e\x78\xec\xd3\x38\xcb\x41\xaf\x07\x58\x74\xbf\x8d\x59\xdb\x63\xba\x8b\x2c\x6c\xc6\x6c\x75\xfa\x1c\x83\xf2\x5e\xdb\x05\x97\xc7\xf0\x49\x9e\x84\xf3\xff\xcc\x49\xfa\x96\xe3\x98\xde\x6a\xe4\x5c\xfc\xb3\xcd\x76\x67\x1d\x0f\xfc\x45\x0c\x39\xd2\xc3\xaf\xd0\x93\x13\xae\xfe\x05\x00\x00\xff\xff\x5d\x9a\x63\xab\x6a\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(2019, 8, 19, 16, 28, 27, 142888746, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
