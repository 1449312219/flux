// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 8, 22, 15, 55, 1, 805050004, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(2019, 8, 19, 16, 28, 27, 139555385, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(2019, 8, 22, 15, 55, 1, 801716648, time.UTC),
			uncompressedSize: 6456,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x5f\x6f\x1b\x37\x12\x7f\xf7\xa7\x18\x28\x0f\x49\x00\x69\x65\xd5\x6d\x71\xd8\x9e\x0b\xb4\x49\xeb\xcb\xa5\x71\x8c\xf8\x72\x87\x7b\xba\x50\xdc\x91\x96\x10\x97\xdc\xe3\x90\x52\x05\xa3\xdf\xfd\x30\xe4\xfe\xe1\x5a\x72\x52\xe4\xed\xf2\x10\xdb\xdc\xf9\x3f\xc3\xdf\xcc\x70\xb1\x58\x5c\x88\x56\xfd\x13\x1d\x29\x6b\x4a\x10\x6d\x4b\xcb\xfd\xea\x62\xa7\x4c\x55\xc2\x6b\x6c\xb5\x3d\x36\x68\xfc\x45\x83\x5e\x54\xc2\x8b\xf2\x02\xc0\x88\x06\x4b\xd8\xe8\xf0\xfb\xc3\x03\xa8\x0d\x14\xb7\xa2\x41\x6a\x85\x44\xf8\xe3\x8f\xee\x7b\xfc\xb3\x84\x87\x87\xe9\xd7\x87\x07\x40\x53\x31\x19\xb5\x28\x59\x98\xc3\x56\x2b\x29\xa8\x84\xd5\x05\x00\xa1\x46\xe9\xad\xe3\x2f\x00\x8d\xf0\xb2\xfe\x4d\xac\x51\x53\x3a\xc8\x75\x33\xb5\x77\xc2\xe3\xf6\x98\x3e\xfa\x63\x8b\x25\x7c\x40\xe9\x50\x78\xbc\x00\xf0\xd8\xb4\x5a\x78\xec\x84\x65\x1e\xf0\x3f\x61\x8c\xf5\xc2\x2b\x6b\x06\xe1\x00\xad\xb3\x0d\xfa\x1a\x03\x15\xca\x2e\x5b\xeb\x7c\x09\xb3\xab\xcb\xab\xd5\x0c\x9e\x81\x47\xad\x33\x0a\xf0\x16\x48\x3a\xd1\x22\x2c\x1b\xf4\x4e\x49\x62\xe7\x5a\xab\x8c\x7f\x4e\xc0\xcc\x45\x27\x58\x4f\x7c\x78\xe4\x05\x40\x1f\x8b\xf8\x3b\xba\xbd\x92\xf8\x93\x94\x36\x18\x7f\x3b\x25\x04\xd8\x5b\x1d\x1a\x1c\x44\x2d\x3a\x51\x5b\xe5\x17\x3b\x3c\x0e\x0a\x88\xa3\xe0\x47\x85\xfd\xc9\x28\x6f\xc1\x2c\x55\x4c\x70\x46\x55\xe1\x46\x04\xed\xdf\xd9\x0a\x4b\xb8\xfc\xf6\xf2\x12\x9e\xc1\xa1\x46\x03\x0d\x5b\x83\x15\x38\x14\xd5\xc2\x1a\x7d\x9c\xc3\x01\xe1\x60\xcd\x73\x0f\x6b\x04\xb1\xd6\xc8\xf1\x90\x75\x63\xab\x8b\x4e\xe0\x33\xf8\x47\xad\x08\x14\x81\x00\xdf\xb4\x1b\x82\x40\x58\xc1\xc6\x3a\xd8\xa2\x41\x27\xbc\x32\x5b\xb8\xbf\xff\x1b\xec\xf0\x48\x05\xbc\x31\xf0\xf6\x2f\x04\x3f\x5e\xc3\xaa\x58\x5d\xce\x07\x29\xbd\xee\xe4\x02\x81\x70\x98\xdb\x41\x96\x4d\x31\x88\x15\x08\x20\x6c\x05\x17\x45\x17\x28\x38\xe0\x20\x46\x0a\x03\x07\xa7\x3c\x1b\x5a\x9c\x8f\xdf\x16\xcd\x10\x0c\x6c\x5a\x7f\x7c\xad\x5c\x1e\xc4\x06\x2b\x15\x9a\x12\xde\x61\x63\xdd\x31\xf7\x13\x61\x63\xb5\xb6\x07\xf6\xa8\x53\xad\x28\xba\x1a\x88\xcf\x04\xc8\x40\xde\x36\x8a\x23\xb0\x33\xf6\x60\xfe\x53\x5b\xf2\x34\x88\xd8\x28\x8d\x73\x38\xd4\x4a\xd6\x70\xb4\x01\x0e\x4a\xeb\xe4\x94\xb7\x50\x59\xbe\x67\x7c\xcc\x4c\xfc\x8b\x03\x7b\x30\x6c\xf6\x20\xc0\x61\x6b\xc1\x09\x5f\xa3\x03\x5f\x0b\xd3\x29\xde\x2a\x5f\x87\x35\x58\x3e\x44\xd0\x6a\x87\x05\xfc\xdb\x86\xe7\x5a\x83\xd0\x64\x7b\x15\xd3\x60\x83\xf2\xa0\x8c\xb7\x91\x47\x5a\xe3\x85\x32\xe8\xe6\xb0\x46\x6d\x0f\x05\xdc\xe3\x18\xd5\xda\xfb\x96\xca\xe5\xb2\xb2\x92\x0a\x2e\x2c\x59\xf1\xd5\x41\xb3\xe4\xab\x47\x7e\xb9\x0d\xaa\x42\x5a\x06\xc2\x45\xeb\xd4\x5e\x78\x8c\xa5\xc7\x8e\x14\xb5\x6f\xf4\x20\xa9\xcf\x05\x51\xbd\x90\xd6\x6c\xd4\x76\xf8\x04\x90\x0e\xde\x89\xb6\xcc\x0e\xf3\x8b\xb4\xc8\xd8\xbe\x36\x2f\xc5\x2e\xac\x71\x99\x84\x8c\xe5\xf7\xc5\x9c\x1c\x14\xd5\x7c\x52\x8b\x3d\x82\x80\x4a\x6d\x36\xe8\x18\x34\x7b\x09\xdd\xad\x1a\x81\x31\xa6\x20\x89\xcb\x93\xc0\xe0\xb2\x57\x15\xf6\x61\xdf\xa8\x6d\x23\xda\xd1\x10\xe5\x6b\x10\x06\xd0\x78\x77\x8c\x3e\x7c\x4a\x44\x9f\xe6\x20\x4c\x05\xc1\x48\xdb\x30\x5a\x47\xfe\xe4\xed\xbb\x98\x4e\x61\xaa\x41\x0a\x9a\x7d\x94\xa0\x90\xba\x7c\x9e\x64\x80\xc3\xf0\x15\x19\xc8\xd8\xbe\x98\x81\x88\x04\xde\x82\x6a\x18\x27\xe1\xe6\xee\x26\x82\x00\xbc\x60\xb7\x48\x6d\x8d\x32\xa3\x72\x76\x6e\x8f\x4e\x6d\x94\x8c\x80\x0d\x6d\x70\xad\x25\xa4\x97\x7f\x22\x90\x83\x94\x04\x1f\x29\x8a\x1c\x20\xd6\xf7\x27\x02\x07\xc2\x6d\xc7\x6b\xfa\x44\xc4\xb6\xed\x96\xf1\x83\xb2\xd0\x4c\x21\xf8\xd9\x13\x20\x7c\xca\x77\x06\x84\xfb\x70\x0e\x37\xf1\x04\xff\xb3\x0e\xd1\x45\xdd\x61\xc4\x49\x63\x61\x56\xa6\x9b\x38\x03\xd5\x88\x2d\xa6\xea\x67\x86\x02\x7e\x55\xa6\x8a\x3e\x37\x0c\x2b\x0e\xe5\x58\xb5\x09\x52\x34\x0a\x42\x06\x8f\xc8\xca\x49\xe0\x39\x01\x84\x1f\xee\x7d\x1d\xd6\x45\x65\xe5\x0e\x5d\x21\x6d\xb3\x74\xcb\x03\x8a\x3d\x1e\xac\xdb\xd1\x92\x95\x2c\xbd\x18\xc2\xd7\xe7\x92\x7b\x3e\xcf\x03\xac\xd9\x8b\x2d\xb0\xb5\xc5\x40\x13\x55\x95\xd0\x09\x55\x76\x99\x50\x25\xfe\x28\x57\xc5\xea\xdb\x62\x35\xa5\xbd\x0b\x5a\xdf\x59\xad\xe4\xb1\x84\x37\x9b\x5b\xeb\xef\x1c\x52\xee\x89\x43\xb2\xc1\x49\xa4\x1c\xcb\x1d\xfe\x37\x20\xf9\xc9\x19\x80\x6c\x43\x09\xdf\x5d\x36\x93\xc3\x26\xc2\x7d\x09\xdf\x7f\xfb\x4e\x8d\xa3\x82\x75\x39\xf3\x62\xcc\xce\x5d\x1c\x1b\xae\x2e\xaf\xb8\x7b\x2a\xb3\xb1\xae\x89\x65\x2b\xf4\x40\xad\xd5\x1e\x0d\x12\xdd\x39\xbb\xc6\xdc\x02\x0e\xeb\xcd\xb4\x73\x27\x55\x49\xe0\xf4\x58\xf8\xba\x84\xa5\x68\x55\x8a\xf4\xfe\xfb\xa5\xaa\xd0\x78\xe5\x8f\x45\x1b\xd6\x19\xad\x32\xca\x2b\xa1\x5f\xa3\x16\xc7\x7b\xbe\xa3\x15\x95\xf0\x5d\x46\xe0\x55\x83\x36\xf8\x33\xdf\xb8\xd1\xaa\xff\x0f\x53\xb3\x8b\x3b\x49\xcc\xf9\x11\x09\x52\xab\xbb\x4b\x96\xa1\x97\xd1\xb2\x6a\x49\x54\xf3\xac\x67\xd3\xf4\x09\xda\x76\x98\xb3\xe5\x94\x81\x32\xa9\xe6\x9e\x53\xe2\x21\xaa\x97\x13\xa8\xec\x63\xf6\xde\xe8\x63\x09\xde\x05\x64\x69\x3c\x07\x45\x94\x5a\x77\xe0\xce\xd7\xaa\x45\xb7\xb1\x4e\x22\x0b\x4d\x83\x0f\xcf\x3d\x4f\x19\x9e\xcf\x26\x53\xdb\xf7\xc2\x75\xb6\x27\xb2\xaf\x33\x3f\xbb\xa3\x6f\x8c\xd4\x21\xa2\x27\x8f\x6f\xa9\xc9\xf5\xc8\x9a\xe6\x83\x2f\x8c\x33\xfd\x40\xf3\x03\xb3\x3e\x1a\x35\x06\x84\x85\x0a\xa5\x16\x8e\xc7\xb6\xb5\xdd\x67\x00\xf0\x99\x51\x20\x41\x64\xee\xbc\xb3\xd6\x2f\x0b\xa2\xfa\x49\x07\x84\x99\x68\x9d\x8d\x6d\x6a\x96\x34\xcf\x7b\x92\x4c\x02\x9a\xbd\x72\xd6\xc4\xa6\x90\xfa\xed\xec\xed\xc7\x9f\x7f\x79\xf5\xfe\xf6\xd7\x37\x37\xb3\xd4\x06\xe6\x1c\x0f\xbb\x47\xe7\xa6\x3d\x3b\x13\x13\xdb\xdc\xfa\x98\x3a\xaa\xd7\xe7\x7c\x3c\x69\xb6\xa7\x3e\x8e\xc5\xc9\xc4\x4f\x3a\xca\x7d\x8f\x97\x8f\x5e\x1b\xc3\x74\x36\x8e\x74\xd6\xc5\x9c\x64\x22\x1e\x0f\x35\x79\xd2\xe3\x44\xd3\x8f\xdf\xc2\x80\xd0\x1e\x9d\xe1\xf1\xfa\xc4\xe2\x8d\xb3\x0d\x97\x45\x3f\xb5\xcc\x41\x10\x97\x5b\xd7\x59\x39\x0c\xda\xca\x1d\x9d\x26\x1b\xcd\xbe\x3c\x13\x97\x31\xdc\x93\xb8\xec\x85\x0e\x78\x12\x93\x2f\x15\xf1\xe3\x1a\xe8\xfb\xee\x67\x2a\x80\xdb\xfe\xb4\xdd\x7f\xa6\xe1\x3f\x51\x97\x4c\x95\x26\x9c\x09\xdd\x14\x1f\x46\xa3\x59\x65\x39\xf1\x21\xa5\x21\xad\x69\x58\x71\x23\x92\x42\xd6\x58\x71\x64\xf3\xd4\x0e\x93\x25\x27\x91\xc3\x32\xcf\xa4\x58\xd7\x8d\x8e\x19\x43\xb7\x66\x46\xc6\x79\x54\xc2\xeb\x11\x85\xb6\xd5\x47\x0e\x04\xe5\xa1\x18\x07\x38\x7f\xb0\x6c\x65\xe0\x94\xc6\x82\x8b\x3b\x71\xcc\x03\xd4\xf6\x10\x57\x40\x6b\x0c\x4a\x1f\x87\x3b\x3f\x0d\xdd\x62\x31\x38\x10\xe7\x7f\x56\x7e\x3d\x1c\x15\xdd\xdc\x53\xd0\x5e\x16\x52\x07\xf2\xe8\x0a\xc6\x2f\x9d\x87\xe4\x23\xa5\xab\x36\x86\xe2\x55\x22\x7d\x73\x37\x71\x8a\x6f\x1d\xa1\x8f\x2b\xe6\x34\xb1\xa3\x0d\x3d\x3d\x2f\xf2\xde\x31\x65\x5c\xfa\x32\x04\xce\x2d\xee\xa8\xaf\x2f\x26\x83\x96\x22\x68\x02\xc5\x25\x38\x46\x4f\x61\x95\xaa\x69\x1d\x71\x3d\x8e\x38\x71\xf7\x7d\xd1\x2f\x94\x2f\x73\x5b\xfa\xbb\x95\xaa\x90\x27\xb3\x6c\x05\x9e\x18\xc2\x58\x98\xf0\x7d\x51\x29\x77\x7d\x82\xfa\xb9\x59\x1f\xb2\x01\x6b\x4c\xde\xc7\x0f\xbf\xa5\x1d\x5d\x98\x6d\xfa\x76\xa3\x7c\xdc\x1b\x49\x79\xeb\x8e\x03\x5a\xfd\xca\xc3\xe1\x44\x39\xf7\xa0\xe0\xf4\xf5\xc3\x03\x14\x37\xca\xb3\xa4\xf8\xd4\x33\xa5\x58\x3b\x61\x64\xdd\x13\xfd\x1c\xff\x4a\x8f\x3e\x6a\x13\x8f\xf8\x6e\xd0\x39\x4e\x9e\x0f\x98\xef\x3e\xa6\x81\xfe\x6e\x95\xc9\x18\x66\xf3\x59\xf7\x76\xa4\x09\x73\x76\x1e\xaf\x4e\x5b\xd5\x41\x98\x58\x7e\x0e\x39\xab\x32\x4d\xf5\x8d\x30\x6a\xc3\xf3\x1e\x17\x28\xa9\x0a\x5d\xf2\xf5\xd1\xe4\x1c\x77\x5e\x4b\x08\xc1\x54\xe8\x1e\x05\xd0\xa1\x16\x5e\xed\x31\x8e\x33\xd4\xa7\x77\x3b\x09\xe2\xa3\x82\x1f\x9c\xa3\xb0\xae\x94\x5b\xcd\xd3\xcf\x6f\x86\x87\xb0\x31\x38\xf1\xa1\xeb\x5c\x70\xe2\xeb\x51\x1f\xd5\x9e\xea\x8c\x80\x8f\x84\xee\x1c\x7f\x20\x74\x43\xe6\x98\x06\xce\xf3\xff\xd2\x08\x75\xd6\x00\xe4\x0f\xbd\x84\x9e\x6a\x7c\xca\x3b\x0b\xba\xc8\xf7\xf4\x60\x39\xa0\x68\xe2\xf3\x10\xc7\x89\xbb\x81\xf2\x8f\x16\xbc\x3c\x56\x1d\xae\x76\xa8\x79\xfd\x19\x18\xed\x39\x3a\x59\xcc\x75\xfd\xd7\x1d\x1e\x41\x55\x3f\x0e\x64\x9f\x69\x95\x99\x55\x2c\x42\xf8\xe0\x70\xb2\x65\x9e\xd1\x15\x3f\x1f\x17\x03\x3d\x4d\xb0\xa0\x87\x42\x50\x1e\x6a\x41\x11\xe6\xad\xd1\x47\x10\x52\x22\x25\xb8\xac\x31\x3d\xd4\xbc\xe8\xdf\x04\x3e\x6d\x84\x26\xfc\xf4\xf2\x8c\xb6\x9e\x7f\x1a\x60\xf2\x2e\x48\x9f\x14\x1d\xe2\x9e\xc7\x7d\x3f\x78\xa0\xa3\x91\xb0\xb6\x76\xb7\x43\x6c\xb9\x5c\x07\x1d\xb3\xad\xf2\xb3\x39\x34\x28\x38\x52\x7c\xcd\x41\xc4\xc5\xab\xab\xe0\xd0\x92\x77\x28\x9a\xa1\x94\x1f\x5b\xc3\xa2\x17\xe4\x85\xc7\xeb\xad\xf2\x4f\x27\xdc\xe0\xef\xbe\xcf\x7a\xd6\x07\x84\x81\x59\xaf\x63\xd6\xa3\x74\x26\xe4\x05\x16\xdb\x62\x0e\xff\xe2\xcd\x11\x5e\x69\x1b\xaa\x97\x45\x7c\x39\xf0\x76\xc7\x43\x2b\x41\x2b\x9c\x57\x32\x68\xe1\xfa\x28\x76\x52\x1e\x37\x98\x4e\xeb\xf5\x81\x78\x39\x95\x2c\xab\x88\x1b\x69\x91\x56\xd2\x7e\x03\x79\xc4\x16\x15\x5d\x8b\xb5\x5c\x7d\x73\x75\xfa\x7f\xee\xf0\x3d\xba\xfd\x99\x07\x5f\x9e\xb5\xc6\xee\xca\xa5\xfa\x43\x0e\xf3\x62\xc7\xed\x21\xe5\x8a\xd0\x67\xaf\xc8\xcf\xb3\x87\xe8\xec\x45\x99\x5d\x8c\x2f\x23\x71\xde\x99\x82\xb1\x56\xe4\xd1\x2c\x3a\x13\xae\xcb\xab\xcb\xab\xd5\x45\x77\x8d\x7f\xaa\x2a\x95\x76\x4d\x06\xf1\x9f\x78\x86\x99\xe0\xe5\xf8\x7d\xec\xe3\x0f\x0f\xe0\x62\x4b\xf8\x02\xf7\x22\x3e\xe7\x4f\xae\xfe\xf8\x5b\xaf\xe0\x7d\xdb\x89\x7f\x7d\x7b\xdf\x37\x60\x9a\x77\x73\x61\x70\x5d\x3b\x06\x53\x59\x4f\x60\x23\x31\x34\xe2\x18\x77\x74\xbd\x1f\x5f\x6b\x0c\x69\x6b\x77\xa1\x05\x45\x14\x90\xc0\x1a\x20\xdb\x20\xbc\x0d\x6b\x74\x06\x3d\x12\x4b\x0f\x2d\x8d\x8f\x31\x95\xa1\xfe\x19\x60\x76\x6b\x0d\xce\xf2\x2f\xaf\xa2\x01\xf9\x73\x4c\x52\x4e\xd3\x17\x9a\x7e\xbe\x8b\xf6\x4d\xbe\x0c\xa3\xe7\x6c\x35\xbb\xf8\x5f\x00\x00\x00\xff\xff\x5d\x27\x4d\x5d\x38\x19\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(2019, 8, 19, 16, 28, 27, 142888746, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(2019, 8, 19, 16, 28, 27, 142888746, time.UTC),
			uncompressedSize: 874,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x93\xcd\x6e\x9c\x40\x10\x84\xef\x3c\x45\x49\x7b\x0d\x1b\x61\x69\x2f\xdc\xa2\x38\x89\x2c\x25\xd6\x5e\x9c\x7b\x7b\x68\xf0\x28\xf3\x97\xe9\x66\xb3\x04\xf9\xdd\xa3\xd9\x5f\x36\xf6\x9c\x80\xaa\xaf\xa7\xa6\x80\xba\xae\xab\x15\x3c\x7b\x43\xe6\x85\x3b\x74\x9c\x5c\x9c\x3c\x07\xc5\x28\xdc\xe1\x79\xc2\x57\x37\xee\xa1\x11\x07\x47\xb5\x82\x89\x41\xc9\x06\xce\xb0\x9e\x06\x86\x67\xa5\x8e\x94\xd6\x15\x25\xfb\x93\xb3\xd8\x18\x5a\x50\x4a\xf2\x71\xd7\x54\xbf\x6c\xe8\x5a\xdc\x5f\xc6\x56\x67\x7b\x5b\x01\x81\x3c\xb7\xd7\xdd\xe7\x19\xb6\xc7\xfa\x91\x3c\x4b\x22\xc3\x78\x7d\x3d\x99\x0e\xb7\x2d\xe6\xf9\x56\x9d\x67\x70\xe8\x8a\x4d\x12\x9b\x32\x31\x73\x72\xd6\x90\xb4\x68\x2a\x40\xd8\xb1\xd1\x98\x8b\x02\x78\x52\xf3\xf2\x9d\x9e\xd9\xc9\xf1\xc1\x9b\x00\x15\xa0\xec\x93\x23\xe5\x13\xb2\x08\x5b\x96\xbb\xa1\xdf\xe3\x81\x73\x94\xb2\x2e\x5d\x5d\x98\xfa\x5d\xa6\xac\x43\x9b\x0b\xa1\x6d\xd6\x9b\x75\xb3\xb9\xd5\xb7\xa3\x73\xdb\xe8\xac\x99\x5a\x3c\xf4\x8f\x51\xb7\x99\xa5\xd4\x7a\x76\x51\x1e\x16\xf9\x6a\xd4\x1e\x9b\xe6\x0e\xc0\x0a\x3f\x68\x6f\xfd\xe8\xcb\x0e\x31\x4f\xe5\x95\x8e\xc2\x1f\x60\x03\x3c\x0f\xf4\x3c\x29\xcb\x12\x7c\xc0\xc6\xe3\x06\x14\xfb\x97\xd1\xc7\x8c\x18\x18\x56\xd9\x2f\xed\x09\x4d\x73\xd7\x34\x58\xe1\x9e\x7b\x1a\x9d\x22\xc5\x7c\xcd\xb5\x2a\x9e\xdd\xee\x78\xf9\x14\x4c\xf4\x87\x8f\x4c\x23\x06\x56\xb8\x38\x08\x62\x0f\x26\xf3\x82\xcc\xbf\x47\x16\x05\x85\x0e\x99\x25\xc5\x20\xbc\xbe\x0c\x2a\x53\x6f\x4e\x78\xec\xd3\x38\xcb\x41\xaf\x07\x58\x74\xbf\x8d\x59\xdb\x63\xba\x8b\x2c\x6c\xc6\x6c\x75\xfa\x1c\x83\xf2\x5e\xdb\x05\x97\xc7\xf0\x49\x9e\x84\xf3\xff\xcc\x49\xfa\x96\xe3\x98\xde\x6a\xe4\x5c\xfc\xb3\xcd\x76\x67\x1d\x0f\xfc\x45\x0c\x39\xd2\xc3\xaf\xd0\x93\x13\xae\xfe\x05\x00\x00\xff\xff\x5d\x9a\x63\xab\x6a\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(2019, 8, 19, 16, 28, 27, 142888746, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
