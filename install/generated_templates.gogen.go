// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 7, 29, 15, 6, 44, 400020755, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(2019, 7, 29, 12, 22, 48, 930282528, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(2019, 7, 29, 15, 6, 44, 400020755, time.UTC),
			uncompressedSize: 5901,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x58\x5f\x8f\x1b\xb7\x11\x7f\xbf\x4f\x31\x90\x1f\x6c\x03\xd2\xea\x94\x4b\x8b\x62\xd3\x0b\xe0\xd8\xb1\xeb\x3a\x3e\x1f\x7c\x75\x8b\x3e\x35\x14\x77\xa4\x25\xc4\x25\xb7\x1c\xee\x2a\x82\x90\xef\x1e\x0c\xb9\x7f\xb8\x92\xce\x17\xd8\x0f\xbe\x3b\xee\xfc\x9f\xe1\x6f\x66\xb8\x58\x2c\xae\x44\xad\xfe\x8d\x8e\x94\x35\x39\x88\xba\xa6\x65\xbb\xba\xda\x29\x53\xe4\xf0\x06\x6b\x6d\x0f\x15\x1a\x7f\x55\xa1\x17\x85\xf0\x22\xbf\x02\x30\xa2\xc2\x1c\x36\xba\xf9\xed\x78\x04\xb5\x81\xec\x4e\x54\x48\xb5\x90\x08\xbf\xff\xde\x7d\x0f\x7f\xe6\x70\x3c\x4e\xbf\x1e\x8f\x80\xa6\x60\x32\xaa\x51\xb2\x30\x87\xb5\x56\x52\x50\x0e\xab\x2b\x00\x42\x8d\xd2\x5b\xc7\x5f\x00\x2a\xe1\x65\xf9\x8b\x58\xa3\xa6\x78\x90\xea\x66\x6a\xef\x84\xc7\xed\x21\x7e\xf4\x87\x1a\x73\xf8\x8c\xd2\xa1\xf0\x78\x05\xe0\xb1\xaa\xb5\xf0\xd8\x09\x4b\x3c\xe0\x7f\xc2\x18\xeb\x85\x57\xd6\x0c\xc2\x01\x6a\x67\x2b\xf4\x25\x36\x94\x29\xbb\xac\xad\xf3\x39\xcc\x6e\xae\x6f\x56\x33\x78\x06\x1e\xb5\x4e\x28\xc0\x5b\x20\xe9\x44\x8d\xb0\xac\xd0\x3b\x25\x89\x9d\xab\xad\x32\xfe\x39\x01\x33\x67\x9d\x60\x3d\xf1\xe1\xc4\x0b\x80\x3e\x16\xe1\x77\x74\xad\x92\xf8\x4a\x4a\xdb\x18\x7f\x37\x25\x04\x68\xad\x6e\x2a\x1c\x44\x2d\x3a\x51\x5b\xe5\x17\x3b\x3c\x0c\x0a\x88\xa3\xe0\x47\x85\xfd\xc9\x28\x6f\xc1\x2c\x45\x48\x70\x42\x55\xe0\x46\x34\xda\x7f\xb4\x05\xe6\x70\xfd\xfd\xf5\x35\x3c\x83\x7d\x89\x06\x2a\xb6\x06\x0b\x70\x28\x8a\x85\x35\xfa\x30\x87\x3d\xc2\xde\x9a\xe7\x1e\xd6\x08\x62\xad\x91\xe3\x21\xcb\xca\x16\x57\x9d\xc0\x67\xf0\xaf\x52\x11\x28\x02\x01\xbe\xaa\x37\x04\x0d\x61\x01\x1b\xeb\x60\x8b\x06\x9d\xf0\xca\x6c\xe1\xe1\xe1\x1f\xb0\xc3\x03\x65\xf0\xde\xc0\x87\xbf\x11\xfc\x78\x0b\xab\x6c\x75\x3d\x1f\xa4\xf4\xba\xa3\x0b\x04\xc2\x61\x6a\x07\x59\x36\xc5\x20\x16\x20\x80\xb0\x16\x5c\x14\x5d\xa0\x60\x8f\x83\x18\x29\x0c\xec\x9d\xf2\x6c\x68\x76\x39\x7e\x5b\x34\x43\x30\xb0\xaa\xfd\xe1\x8d\x72\x69\x10\x2b\x2c\x54\x53\xe5\xf0\x11\x2b\xeb\x0e\xa9\x9f\x08\x1b\xab\xb5\xdd\xb3\x47\x9d\x6a\x45\xc1\xd5\x86\xf8\x4c\x80\x6c\xc8\xdb\x4a\x71\x04\x76\xc6\xee\xcd\xff\x4a\x4b\x9e\x06\x11\x1b\xa5\x71\x0e\xfb\x52\xc9\x12\x0e\xb6\x81\xbd\xd2\x3a\x3a\xe5\x2d\x14\x96\xef\x19\x1f\x33\x13\xff\xe2\xc0\xee\x0d\x9b\x3d\x08\x70\x58\x5b\x70\xc2\x97\xe8\xc0\x97\xc2\x74\x8a\xb7\xca\x97\xcd\x1a\x2c\x1f\x22\x68\xb5\xc3\x0c\xfe\x6b\x9b\xe7\x5a\x83\xd0\x64\x7b\x15\xd3\x60\x83\xf2\xa0\x8c\xb7\x81\x47\x5a\xe3\x85\x32\xe8\xe6\xb0\x46\x6d\xf7\x19\x3c\xe0\x18\xd5\xd2\xfb\x9a\xf2\xe5\x32\xea\xc9\xa4\xad\x96\x7b\x14\x2d\xee\xad\xdb\xd1\x92\x2b\x6d\xb9\xd6\x76\xbd\xac\x04\x79\x74\xcb\xc2\x4a\x5a\x92\x17\xa6\x10\xda\x1a\x5c\x10\xfa\xa6\xce\xaa\xe2\x59\xb0\x76\x21\x16\xb5\x53\xad\xf0\x18\xca\x93\x9d\x1d\x14\xf5\xa9\x22\x2a\x17\xd2\x9a\x8d\xda\x0e\x9f\x00\xe2\xc1\x47\x51\xe7\xc9\x61\x7a\xcf\x16\x09\xdb\xb7\xa6\x2d\xdb\x35\x6b\x5c\x46\x21\x63\x75\x3e\x99\xb2\xbd\xa2\x92\x4f\x4a\xd1\x22\x08\x28\xd4\x66\x83\x8e\x31\xb5\x97\xd0\x5d\xba\x11\x37\x43\x86\xa2\xb8\x34\x47\x8c\x3d\xad\x2a\xb0\xcf\xca\x46\x6d\x2b\x51\x8f\x86\x28\x5f\x82\x30\x80\xc6\xbb\x43\xf0\xe1\xd7\x48\xf4\xeb\x1c\x84\x29\xa0\x31\xd2\x56\x0c\xe6\x81\x3f\x7a\xfb\x31\x64\x5b\x98\x62\x90\x82\xa6\x0d\x12\x14\x52\x97\xee\xb3\x0c\x70\x18\xbe\x21\x03\x09\xdb\x93\x19\x08\x40\xe1\x2d\xa8\x8a\x61\x14\xde\xdd\xbf\x0b\x18\x01\x2f\xd8\x2d\x52\x5b\xa3\xcc\xa8\x9c\x9d\x6b\xd1\xa9\x8d\x92\x01\xcf\xa1\x6e\x5c\x6d\x09\xe9\xe5\x9f\x08\xe4\x20\x25\xa2\x4b\x8c\x22\x07\x88\xf5\xfd\x89\xc0\x81\x70\xdb\xf1\x16\x3f\x12\xb1\x6d\xbd\x65\x78\xa1\x24\x34\x53\x84\x7e\xf6\x08\x46\x9f\xf3\x5d\xc0\xe8\x3e\x9c\xc3\x45\x3d\x6b\x0f\x49\x03\xe9\xa2\xee\x30\xc0\xa8\xb1\x30\xcb\xb9\x47\x92\x9f\x81\xaa\xc4\x16\x63\xf5\x33\x43\x06\x6f\x95\x29\x82\xcf\x15\xa3\x8e\x43\x39\x56\x6d\x44\x1c\x8d\x82\x90\xb1\x25\xb0\x72\x12\x78\x8c\x00\xe1\x07\x58\x60\x4c\x28\xac\xdc\xa1\x0b\xd0\xe0\xce\xc0\xc1\x8b\x21\x7c\x7d\x2e\x79\x24\xe0\x71\x81\x35\x7b\xb1\x05\xb6\x36\x1b\x68\x82\xaa\x1c\x3a\xa1\xca\x06\x31\xb2\x08\x3f\xf2\x55\xb6\xba\xc9\x6e\xa6\xb4\xf7\x8d\xd6\xf7\x56\x2b\x79\xc8\xe1\xfd\xe6\xce\xfa\x7b\x87\x94\x7a\xe2\x90\x6c\xe3\x24\x52\x0a\xf5\x0e\xff\xdf\x20\xf9\xc9\x19\x80\xac\x9b\x1c\xfe\x72\x5d\x4d\x0e\xab\xd0\x0d\x72\xf8\xeb\xf7\x1f\xd5\x38\x49\x58\x97\x32\x2f\xc6\xec\xdc\x87\xa9\xe2\xe6\xfa\x86\x9b\xab\x32\x1b\xeb\xaa\x50\xb6\x42\x0f\xd4\x49\x8d\x4d\x64\x5c\x6e\xf6\x10\x41\xfb\x5e\xf8\x32\x87\x25\x7a\x19\x62\x51\x2c\x89\x4a\x9e\x5a\x6c\x9c\xa3\x40\xdb\xee\x7a\x6c\x55\x8b\x06\x94\x89\xe1\x79\x4e\x91\x87\xa8\x5c\x4e\x6e\x75\x8c\x82\x28\x3e\x19\x7d\xc8\xc1\xbb\x06\x59\x1a\x77\xf4\x70\xa1\xd6\x1d\x0e\x71\x05\xd4\xe8\x36\xd6\x49\x64\xa1\xb1\x85\x73\x07\x7f\xcc\xf0\xb4\xcb\x4e\x6d\x6f\x85\xeb\x6c\x8f\x64\xdf\x66\x7e\x52\x4e\xef\x8d\xd4\x4d\xb8\xe8\x3c\x88\x44\x3c\xee\x41\x20\x76\xba\x27\x1a\x73\xdf\x9a\x7f\x60\xd6\x93\xa6\x39\x80\x01\x14\x28\xb5\x70\x3c\x80\xac\x6d\x9b\xd4\xea\x57\xba\x56\xbc\xcd\xa9\xf3\xce\x5a\xbf\xcc\x88\xca\x47\x1d\x10\x66\xa2\x75\x36\x22\xea\x2c\x6a\x9e\xf7\x24\x89\x04\x34\xad\x72\xd6\x04\xfc\x8a\xad\x61\xf6\xe1\xcb\x4f\x3f\xbf\xfe\x74\xf7\xf6\xfd\xbb\x59\x44\xac\x39\xc7\xc3\xb6\xe8\xdc\xb4\xbd\x24\x62\x02\x22\xaf\x0f\x11\xfc\xbd\xbe\xe4\xe3\x59\x5f\x38\xf7\x71\x2c\x4e\x26\x7e\xd4\x51\x86\x68\x1e\xa3\x7b\x6d\x8c\x28\x49\xe7\xec\xac\x0b\x39\x49\x44\x9c\xf6\xdf\x34\xe9\xa1\xf9\xf6\x83\xa4\x30\x20\xb4\x47\x67\x78\x50\x3c\xb3\x78\xe3\x6c\xc5\x65\xd1\x37\xd8\x39\x08\xe2\x72\xeb\x9a\x00\x87\x41\x5b\xb9\xa3\xf3\x64\xa3\x69\xf3\x0b\x71\x19\xc3\x3d\x89\x4b\x2b\x74\x83\x67\x31\x79\xaa\x88\x4f\x6b\xa0\x6f\x11\x5f\xa9\x00\xee\x50\xd3\xce\xf4\x95\xde\xf4\x48\x5d\x32\x55\x6c\xc6\x13\xba\x29\x3e\x8c\x46\xb3\xca\x7c\xe2\x43\x4c\x43\x5c\x38\xb0\x60\xcc\x94\x42\x96\x58\x70\x64\xd3\xd4\x0e\x43\x10\x27\x91\xc3\x32\x4f\xa4\x58\xd7\x4d\x39\x09\x43\xb7\x30\x05\xc6\x79\x50\xc2\x83\x3e\x35\x75\xad\x0f\x1c\x08\x4a\x43\x31\xce\x1a\x7e\x6f\xd9\xca\x86\x53\x1a\x0a\x2e\x6c\x77\x21\x0f\x50\xda\x7d\x58\x66\xac\x31\x28\x7d\x98\x43\xfc\x34\x74\x8b\xc5\xe0\x40\x98\x52\x59\xf9\xed\x70\x94\x75\x2d\x3a\xa3\x56\x66\x52\x37\x3c\xf9\x66\x8c\x5f\x3a\x0d\xc9\x17\x8a\x57\x6d\x0c\xc5\xeb\x48\xfa\xfe\x7e\xe2\x14\xdf\x3a\x42\x1f\x96\xa5\x69\x62\x47\x1b\x7a\x7a\x5e\x49\xbd\x63\xca\xb0\xbe\x24\x08\x9c\x5a\xdc\x51\xdf\x5e\x4d\x66\x02\x45\x50\x35\x14\xd6\xb9\x10\x3d\x85\x45\xac\xa6\x75\xc0\xf5\xd0\x8d\xc3\x16\xf7\xa2\x5f\x8d\x5e\xa6\xb6\xf4\x77\x2b\x56\x21\x0f\x11\xc9\x32\x37\x31\x84\xb1\x30\xe2\xfb\xa2\x50\xee\xf6\x0c\xf5\x53\xb3\x3e\x27\xb3\xc0\x98\xbc\x2f\x9f\x7f\x89\xdb\xa6\x30\xdb\xf8\xed\x9d\xf2\x61\x03\x22\xe5\xad\x3b\x0c\x68\xf5\x96\xe7\x98\x89\x72\xee\x41\x8d\xd3\xb7\xc7\x23\x64\xef\x94\x67\x49\xe1\xd1\x62\x4a\xb1\x76\xc2\xc8\xb2\x27\xfa\x29\xfc\x15\x9f\x2f\xd4\x26\x1c\xf1\xdd\xa0\x4b\x9c\xb5\xf0\x81\xef\x21\xa4\x81\xfe\x69\x95\x49\x18\x66\xf3\x59\xf7\x0a\xa2\x09\x53\x76\x9e\x04\xce\x5b\xd5\x5e\x98\x50\x7e\x0e\x39\xab\x32\x0e\xa0\x95\x30\x6a\xc3\xa3\x09\x17\x28\xa9\x02\x5d\xf4\xf5\x64\xc8\x0b\xdb\x9b\x25\x84\xc6\x14\xe8\x4e\x02\xe8\x50\x0b\xaf\x5a\x84\x3a\x98\xd5\xa5\x77\x3b\x09\xe2\x49\xc1\x0f\xce\x51\xb3\x2e\x94\x5b\xcd\xe3\xcf\xef\x86\x27\x9d\x31\x38\xe1\xc9\xe6\x52\x70\xc2\x3b\x48\x1f\xd5\x9e\xea\x82\x80\x2f\x84\xee\x12\x7f\x43\xe8\x86\xcc\x31\x0d\x5c\xe6\xff\xb9\x12\xea\xa2\x01\xc8\x1f\x7a\x09\x3d\xd5\xf8\x28\x75\x11\x74\x91\xef\xe9\xde\x72\x40\xd1\x84\x87\x0e\x8e\x13\x77\x03\xe5\x4f\x76\x91\x34\x56\x1d\xae\x76\xa8\x79\xfb\x15\x18\xed\x39\x3a\x59\xcc\x75\xfb\xf7\x1d\x1e\x40\x15\x3f\x0e\x64\x5f\x69\x95\x89\x55\x2c\x42\xf8\xc6\xe1\x64\x21\xba\xa0\x2b\x7c\x3e\x2c\x06\x7a\x7a\xdc\x77\x83\xbf\xf9\x3e\x00\x09\x24\x0a\x03\xb3\xa6\x26\xef\x50\x54\xb3\x1e\xb0\x12\x21\x2f\x30\xdb\x66\x73\xf8\x0f\xcf\xfb\xf0\x5a\xdb\xa6\x78\x99\x85\x7d\xcf\xdb\x1d\xcf\x6f\x04\xb5\x70\x5e\xc9\x46\x0b\x07\xdd\x53\x43\x27\xe5\x14\x6b\x3b\xad\xb7\x7b\xe2\x95\x42\xb2\xac\x2c\xec\x11\x59\x5c\x24\x44\xad\x96\x27\xd5\xcf\x6c\x41\xd1\xad\x58\xcb\xd5\x77\x37\xe7\xff\xa7\x0e\x3f\xa0\x6b\x2f\xbc\xe2\xf1\xd8\x31\x36\x1a\xce\xda\x0f\x29\xe2\x89\x1d\x23\xa5\x8b\xa8\x8b\x3e\x79\x1a\x7c\x9e\xbc\x2e\x26\xcf\x84\xec\x62\xd8\x67\x43\xeb\x9f\xe2\x92\x56\xe4\xd1\x2c\x3a\x13\x6e\xf3\x9b\xeb\x9b\xd5\x55\x57\xd1\xaf\x8a\x42\xc5\x0d\x81\xf1\xec\x15\xb7\xf3\x09\x74\x8c\xdf\xc7\x96\x76\x3c\x82\x0b\xe8\xf8\x04\xf7\x22\xbc\xd1\x4e\x6e\xc1\xf8\x5b\xaf\xe0\x53\xdd\x89\x7f\x73\xf7\xd0\xf7\x22\x9a\x77\x23\x52\xe3\xba\xce\x04\xa6\xb0\x9e\xc0\x06\x62\xa8\xc4\x21\x6c\x56\xba\x1d\x77\x6c\x43\xda\xda\x5d\x53\x83\x22\x6a\x90\xc0\x1a\x20\x5b\x21\x7c\x68\xd6\xe8\x0c\x7a\x24\x08\x0f\x42\x34\xae\xd0\x85\xa1\x7e\x79\x9b\xdd\x59\x83\xb3\xf4\xcb\xeb\x60\x40\xba\x44\x47\xe5\x34\xdd\xab\xfb\x51\x27\xd8\x37\xf9\x32\x4c\x61\xb3\xd5\xec\xea\x8f\x00\x00\x00\xff\xff\x83\x3b\x2d\xb6\x0d\x17\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(2019, 7, 29, 12, 22, 48, 930282528, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(2019, 7, 29, 12, 22, 48, 930282528, time.UTC),
			uncompressedSize: 874,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x93\xcd\x6e\x9c\x40\x10\x84\xef\x3c\x45\x49\x7b\x0d\x1b\x61\x69\x2f\xdc\xa2\x38\x89\x2c\x25\xd6\x5e\x9c\x7b\x7b\x68\xf0\x28\xf3\x97\xe9\x66\xb3\x04\xf9\xdd\xa3\xd9\x5f\x36\xf6\x9c\x80\xaa\xaf\xa7\xa6\x80\xba\xae\xab\x15\x3c\x7b\x43\xe6\x85\x3b\x74\x9c\x5c\x9c\x3c\x07\xc5\x28\xdc\xe1\x79\xc2\x57\x37\xee\xa1\x11\x07\x47\xb5\x82\x89\x41\xc9\x06\xce\xb0\x9e\x06\x86\x67\xa5\x8e\x94\xd6\x15\x25\xfb\x93\xb3\xd8\x18\x5a\x50\x4a\xf2\x71\xd7\x54\xbf\x6c\xe8\x5a\xdc\x5f\xc6\x56\x67\x7b\x5b\x01\x81\x3c\xb7\xd7\xdd\xe7\x19\xb6\xc7\xfa\x91\x3c\x4b\x22\xc3\x78\x7d\x3d\x99\x0e\xb7\x2d\xe6\xf9\x56\x9d\x67\x70\xe8\x8a\x4d\x12\x9b\x32\x31\x73\x72\xd6\x90\xb4\x68\x2a\x40\xd8\xb1\xd1\x98\x8b\x02\x78\x52\xf3\xf2\x9d\x9e\xd9\xc9\xf1\xc1\x9b\x00\x15\xa0\xec\x93\x23\xe5\x13\xb2\x08\x5b\x96\xbb\xa1\xdf\xe3\x81\x73\x94\xb2\x2e\x5d\x5d\x98\xfa\x5d\xa6\xac\x43\x9b\x0b\xa1\x6d\xd6\x9b\x75\xb3\xb9\xd5\xb7\xa3\x73\xdb\xe8\xac\x99\x5a\x3c\xf4\x8f\x51\xb7\x99\xa5\xd4\x7a\x76\x51\x1e\x16\xf9\x6a\xd4\x1e\x9b\xe6\x0e\xc0\x0a\x3f\x68\x6f\xfd\xe8\xcb\x0e\x31\x4f\xe5\x95\x8e\xc2\x1f\x60\x03\x3c\x0f\xf4\x3c\x29\xcb\x12\x7c\xc0\xc6\xe3\x06\x14\xfb\x97\xd1\xc7\x8c\x18\x18\x56\xd9\x2f\xed\x09\x4d\x73\xd7\x34\x58\xe1\x9e\x7b\x1a\x9d\x22\xc5\x7c\xcd\xb5\x2a\x9e\xdd\xee\x78\xf9\x14\x4c\xf4\x87\x8f\x4c\x23\x06\x56\xb8\x38\x08\x62\x0f\x26\xf3\x82\xcc\xbf\x47\x16\x05\x85\x0e\x99\x25\xc5\x20\xbc\xbe\x0c\x2a\x53\x6f\x4e\x78\xec\xd3\x38\xcb\x41\xaf\x07\x58\x74\xbf\x8d\x59\xdb\x63\xba\x8b\x2c\x6c\xc6\x6c\x75\xfa\x1c\x83\xf2\x5e\xdb\x05\x97\xc7\xf0\x49\x9e\x84\xf3\xff\xcc\x49\xfa\x96\xe3\x98\xde\x6a\xe4\x5c\xfc\xb3\xcd\x76\x67\x1d\x0f\xfc\x45\x0c\x39\xd2\xc3\xaf\xd0\x93\x13\xae\xfe\x05\x00\x00\xff\xff\x5d\x9a\x63\xab\x6a\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(2019, 7, 29, 12, 22, 48, 930282528, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
