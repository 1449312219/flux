// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 7, 30, 9, 7, 53, 602764277, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(2019, 7, 29, 12, 22, 48, 930282528, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(2019, 7, 30, 9, 7, 53, 602764277, time.UTC),
			uncompressedSize: 5909,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x58\x5f\x8f\x1b\xb7\x11\x7f\xbf\x4f\x31\x90\x1f\x6c\x03\xd2\xea\x94\x4b\x8b\x62\xd3\x0b\xe0\xd8\xb1\xeb\x3a\x3e\x1f\x7c\x75\x8b\x3e\x35\x14\x77\xa4\x25\xc4\x25\xb7\x1c\xee\x2a\x82\x90\xef\x1e\x0c\xb9\x7f\xb8\x92\xce\x17\xd8\x0f\xbe\x3b\xee\xfc\x9f\xe1\x6f\x66\xb8\x58\x2c\xae\x44\xad\xfe\x8d\x8e\x94\x35\x39\x88\xba\xa6\x65\xbb\xba\xda\x29\x53\xe4\xf0\x06\x6b\x6d\x0f\x15\x1a\x7f\x55\xa1\x17\x85\xf0\x22\xbf\x02\x30\xa2\xc2\x1c\x36\xba\xf9\xed\x78\x04\xb5\x81\xec\x4e\x54\x48\xb5\x90\x08\xbf\xff\xde\x7d\x0f\x7f\xe6\x70\x3c\x4e\xbf\x1e\x8f\x80\xa6\x60\x32\xaa\x51\xb2\x30\x87\xb5\x56\x52\x50\x0e\xab\x2b\x00\x42\x8d\xd2\x5b\xc7\x5f\x00\x2a\xe1\x65\xf9\x8b\x58\xa3\xa6\x78\x90\xea\x66\x6a\xef\x84\xc7\xed\x21\x7e\xf4\x87\x1a\x73\xf8\x8c\xd2\xa1\xf0\x78\x05\xe0\xb1\xaa\xb5\xf0\xd8\x09\x4b\x3c\xe0\x7f\xc2\x18\xeb\x85\x57\xd6\x0c\xc2\x01\x6a\x67\x2b\xf4\x25\x36\x94\x29\xbb\xac\xad\xf3\x39\xcc\x6e\xae\x6f\x56\x33\x78\x06\x1e\xb5\x4e\x28\xc0\x5b\x20\xe9\x44\x8d\xb0\xac\xd0\x3b\x25\x89\x9d\xab\xad\x32\xfe\x39\x01\x33\x67\x9d\x60\x3d\xf1\xe1\xc4\x0b\x80\x3e\x16\xe1\x77\x74\xad\x92\xf8\x4a\x4a\xdb\x18\x7f\x37\x25\x04\x68\xad\x6e\x2a\x1c\x44\x2d\x3a\x51\x5b\xe5\x17\x3b\x3c\x0c\x0a\x88\xa3\xe0\x47\x85\xfd\xc9\x28\x6f\xc1\x2c\x45\x48\x70\x42\x55\xe0\x46\x34\xda\x7f\xb4\x05\xe6\x70\xfd\xfd\xf5\x35\x3c\x83\x7d\x89\x06\x2a\xb6\x06\x0b\x70\x28\x8a\x85\x35\xfa\x30\x87\x3d\xc2\xde\x9a\xe7\x1e\xd6\x08\x62\xad\x91\xe3\x21\xcb\xca\x16\x57\x9d\xc0\x67\xf0\xaf\x52\x11\x28\x02\x01\xbe\xaa\x37\x04\x0d\x61\x01\x1b\xeb\x60\x8b\x06\x9d\xf0\xca\x6c\xe1\xe1\xe1\x1f\xb0\xc3\x03\x65\xf0\xde\xc0\x87\xbf\x11\xfc\x78\x0b\xab\x6c\x75\x3d\x1f\xa4\xf4\xba\xa3\x0b\x04\xc2\x61\x6a\x07\x59\x36\xc5\x20\x16\x20\x80\xb0\x16\x5c\x14\x5d\xa0\x60\x8f\x83\x18\x29\x0c\xec\x9d\xf2\x6c\x68\x76\x39\x7e\x5b\x34\x43\x30\xb0\xaa\xfd\xe1\x8d\x72\x69\x10\x2b\x2c\x54\x53\xe5\xf0\x11\x2b\xeb\x0e\xa9\x9f\x08\x1b\xab\xb5\xdd\xb3\x47\x9d\x6a\x45\xc1\xd5\x86\xf8\x4c\x80\x6c\xc8\xdb\x4a\x71\x04\x76\xc6\xee\xcd\xff\x4a\x4b\x9e\x06\x11\x1b\xa5\x71\x0e\xfb\x52\xc9\x12\x0e\xb6\x81\xbd\xd2\x3a\x3a\xe5\x2d\x14\x96\xef\x19\x1f\x33\x13\xff\xe2\xc0\xee\x0d\x9b\x3d\x08\x70\x58\x5b\x70\xc2\x97\xe8\xc0\x97\xc2\x74\x8a\xb7\xca\x97\xcd\x1a\x2c\x1f\x22\x68\xb5\xc3\x0c\xfe\x6b\x9b\xe7\x5a\x83\xd0\x64\x7b\x15\xd3\x60\x83\xf2\xa0\x8c\xb7\x81\x47\x5a\xe3\x85\x32\xe8\xe6\xb0\x46\x6d\xf7\x19\x3c\xe0\x18\xd5\xd2\xfb\x9a\xf2\xe5\x32\xea\xc9\xa4\xad\x96\x7b\x14\x2d\xee\xad\xdb\xd1\x92\x2b\x6d\xb9\xd6\x76\xbd\xac\x04\x79\x74\xcb\xc2\x4a\x5a\x2a\x43\x5e\x68\xbd\x24\x2f\x4c\x21\xb4\x35\xb8\x20\xf4\x4d\x9d\x55\xc5\xb3\x60\xf5\x42\x2c\x6a\xa7\x5a\xe1\x31\x94\x29\x3b\x3d\x28\xec\x53\x46\x54\x2e\xa4\x35\x1b\xb5\x1d\x3e\x01\xc4\x83\x8f\xa2\xce\x93\xc3\xf4\xbe\x2d\x12\xb6\x6f\x4d\x5f\xb6\x6b\xd6\xb8\x8c\x42\xc6\x2a\x7d\x32\x75\x7b\x45\x25\x9f\x94\xa2\x45\x10\x50\xa8\xcd\x06\x1d\x63\x6b\x2f\xa1\xbb\x7c\x23\x7e\x86\x4c\x45\x71\x69\xae\x18\x83\x5a\x55\x60\x9f\x9d\x8d\xda\x56\xa2\x1e\x0d\x51\xbe\x04\x61\x00\x8d\x77\x87\xe0\xc3\xaf\x91\xe8\xd7\x39\x08\x53\x40\x63\xa4\xad\x18\xd4\x03\x7f\xf4\xf6\x63\xc8\xba\x30\xc5\x20\x05\x4d\x1b\x24\x28\xa4\x2e\xed\x67\x19\xe0\x30\x7c\x43\x06\x12\xb6\x27\x33\x10\x00\xc3\x5b\x50\x15\xc3\x29\xbc\xbb\x7f\x17\xb0\x02\x5e\xb0\x5b\xa4\xb6\x46\x99\x51\x39\x3b\xd7\xa2\x53\x1b\x25\x03\xae\x43\xdd\xb8\xda\x12\xd2\xcb\x3f\x11\xc8\x41\x4a\x44\x99\x18\x45\x0e\x10\xeb\xfb\x13\x81\x03\xe1\xb6\xe3\x6d\x7e\x24\x62\xdb\x7a\xcb\x30\x43\x49\x68\xa6\x48\xfd\xec\x11\xac\x3e\xe7\xbb\x80\xd5\x7d\x38\x87\x0b\x7b\xd6\x26\x92\x46\xd2\x45\xdd\x61\x80\x53\x63\x61\x96\x73\xaf\x24\x3f\x03\x55\x89\x2d\xc6\xea\x67\x86\x0c\xde\x2a\x53\x04\x9f\x2b\x46\x1f\x87\x72\xac\xda\x88\x3c\x1a\x05\x21\x63\x4c\x60\xe5\x24\xf0\x38\x01\xc2\x0f\xf0\xc0\xd8\x50\x58\xb9\x43\x17\x20\xc2\x9d\x81\x84\x17\x43\xf8\xfa\x5c\xf2\x68\xc0\x63\x03\x6b\xf6\x62\x0b\x6c\x6d\x36\xd0\x04\x55\x39\x74\x42\x95\x0d\x62\x64\x11\x7e\xe4\xab\x6c\x75\x93\xdd\x4c\x69\xef\x1b\xad\xef\xad\x56\xf2\x90\xc3\xfb\xcd\x9d\xf5\xf7\x0e\x29\xf5\xc4\x21\xd9\xc6\x49\xa4\x14\xf2\x1d\xfe\xbf\x41\xf2\x93\x33\x00\x59\x37\x39\xfc\xe5\xba\x9a\x1c\x56\xa1\x2b\xe4\xf0\xd7\xef\x3f\xaa\x71\xa2\xb0\x2e\x65\x5e\x8c\xd9\xb9\x0f\xd3\xc5\xcd\xf5\x0d\x37\x59\x65\x36\xd6\x55\xa1\x6c\x85\x1e\xa8\x93\x1a\x9b\xc8\xb8\xdc\xf4\x21\x82\xf7\xbd\xf0\x65\x0e\x4b\xf4\x32\xc4\xa2\x58\x12\x95\x3c\xbd\xd8\x38\x4f\x81\xb6\xdd\xf5\xd8\xaa\x16\x0d\x28\x13\xc3\xf3\x9c\x22\x0f\x51\xb9\x9c\xdc\xea\x18\x05\x51\x7c\x32\xfa\x90\x83\x77\x0d\xb2\x34\xee\xec\xe1\x42\xad\x3b\x1c\xe2\x0a\xa8\xd1\x6d\xac\x93\xc8\x42\x63\x2b\xe7\x4e\xfe\x98\xe1\x69\xb7\x9d\xda\xde\x0a\xd7\xd9\x1e\xc9\xbe\xcd\xfc\xa4\x9c\xde\x1b\xa9\x9b\x70\xd1\x79\x20\x89\x78\xdc\x83\x40\xec\x78\x4f\x34\xe8\xbe\x45\xff\xc0\xac\x27\xcd\x73\x00\x03\x28\x50\x6a\xe1\x78\x10\x59\xdb\x36\xa9\xd5\xaf\x74\xad\x78\x9b\x53\xe7\x9d\xb5\x7e\x99\x11\x95\x8f\x3a\x20\xcc\x44\xeb\x6c\x44\xd4\x59\xd4\x3c\xef\x49\x12\x09\x68\x5a\xe5\xac\x09\xf8\x15\x5b\xc3\xec\xc3\x97\x9f\x7e\x7e\xfd\xe9\xee\xed\xfb\x77\xb3\x88\x58\x73\x8e\x87\x6d\xd1\xb9\x69\x7b\x49\xc4\x04\x44\x5e\x1f\x22\xf8\x7b\x7d\xc9\xc7\xb3\xbe\x70\xee\xe3\x58\x9c\x4c\xfc\xa8\xa3\x0c\xd1\x3c\x4e\xf7\xda\x18\x51\x92\xce\xd9\x59\x17\x72\x92\x88\x38\xed\xbf\x69\xd2\x43\xf3\xed\x07\x4a\x61\x40\x68\x8f\xce\xf0\xc0\x78\x66\xf1\xc6\xd9\x8a\xcb\xa2\x6f\xb0\x73\x10\xc4\xe5\xd6\x35\x01\x0e\x83\xb6\x72\x47\xe7\xc9\x46\xd3\xe6\x17\xe2\x32\x86\x7b\x12\x97\x56\xe8\x06\xcf\x62\xf2\x54\x11\x9f\xd6\x40\xdf\x22\xbe\x52\x01\xdc\xa1\xa6\x9d\xe9\x2b\xbd\xe9\x91\xba\x64\xaa\xd8\x8c\x27\x74\x53\x7c\x18\x8d\x66\x95\xf9\xc4\x87\x98\x86\xb8\x78\x60\xc1\x98\x29\x85\x2c\xb1\xe0\xc8\xa6\xa9\x1d\x86\x20\x4e\x22\x87\x65\x9e\x48\xb1\xae\x9b\x72\x12\x86\x6e\x71\x0a\x8c\xf3\xa0\x84\x07\x7e\x6a\xea\x5a\x1f\x38\x10\x94\x86\x62\x9c\x35\xfc\xde\xb2\x95\x0d\xa7\x34\x14\x5c\xd8\xf2\x42\x1e\xa0\xb4\xfb\xb0\xd4\x58\x63\x50\xfa\x30\x87\xf8\x69\xe8\x16\x8b\xc1\x81\x30\xa5\xb2\xf2\xdb\xe1\x28\xeb\x5a\x74\x46\xad\xcc\xa4\x6e\x78\x02\xce\x18\xbf\x74\x1a\x92\x2f\x14\xaf\xda\x18\x8a\xd7\x91\xf4\xfd\xfd\xc4\x29\xbe\x75\x84\x3e\x2c\x4d\xd3\xc4\x8e\x36\xf4\xf4\xbc\x9a\x7a\xc7\x94\x61\x8d\x49\x10\x38\xb5\xb8\xa3\xbe\xbd\x9a\xcc\x04\x8a\xa0\x6a\x28\xac\x75\x21\x7a\x0a\x8b\x58\x4d\xeb\x80\xeb\xa1\x1b\x87\x6d\xee\x45\xbf\x22\xbd\x4c\x6d\xe9\xef\x56\xac\x42\x1e\x22\x92\xa5\x6e\x62\x08\x63\x61\xc4\xf7\x45\xa1\xdc\xed\x19\xea\xa7\x66\x7d\x4e\x66\x81\x31\x79\x5f\x3e\xff\x12\xb7\x4e\x61\xb6\xf1\xdb\x3b\xe5\xc3\x26\x44\xca\x5b\x77\x18\xd0\xea\x2d\xcf\x31\x13\xe5\xdc\x83\x1a\xa7\x6f\x8f\x47\xc8\xde\x29\xcf\x92\xc2\xe3\xc5\x94\x62\xed\x84\x91\x65\x4f\xf4\x53\xf8\x2b\x3e\x63\xa8\x4d\x38\xe2\xbb\x41\x97\x38\x6b\xe1\x03\xdf\x43\x48\x03\xfd\xd3\x2a\x93\x30\xcc\xe6\xb3\xee\x35\x44\x13\xa6\xec\x3c\x09\x9c\xb7\xaa\xbd\x30\xa1\xfc\x1c\x72\x56\x65\x1c\x40\x2b\x61\xd4\x86\x47\x13\x2e\x50\x52\x05\xba\xe8\xeb\xc9\x90\x17\xb6\x38\x4b\x08\x8d\x29\xd0\x9d\x04\xd0\xa1\x16\x5e\xb5\x08\x75\x30\xab\x4b\xef\x76\x12\xc4\x93\x82\x1f\x9c\xa3\x66\x5d\x28\xb7\x9a\xc7\x9f\xdf\x0d\x4f\x3b\x63\x70\xc2\xd3\xcd\xa5\xe0\x84\xf7\x90\x3e\xaa\x3d\xd5\x05\x01\x5f\x08\xdd\x25\xfe\x86\xd0\x0d\x99\x63\x1a\xb8\xcc\xff\x73\x25\xd4\x45\x03\x90\x3f\xf4\x12\x7a\xaa\xf1\x71\xea\x22\xe8\x22\xdf\xd3\xbd\xe5\x80\xa2\x09\x0f\x1e\x1c\x27\xee\x06\xca\x9f\xec\x22\x69\xac\x3a\x5c\xed\x50\xf3\xf6\x2b\x30\xda\x73\x74\xb2\x98\xeb\xf6\xef\x3b\x3c\x80\x2a\x7e\x1c\xc8\xbe\xd2\x2a\x13\xab\x58\x84\xf0\x8d\xc3\xc9\x42\x74\x41\x57\xf8\x7c\x58\x0c\xf4\xf4\xb8\xef\x06\x7f\xf3\x7d\x00\x12\x48\x14\x06\x66\x4d\x4d\xde\xa1\xa8\x66\x3d\x60\x25\x42\x5e\x60\xb6\xcd\xe6\xf0\x1f\x9e\xf7\xe1\xb5\xb6\x4d\xf1\x32\x0b\xfb\x9e\xb7\x3b\x9e\xdf\x08\x6a\xe1\xbc\x92\x8d\x16\x0e\xba\x27\x87\x4e\xca\x29\xd6\x76\x5a\x6f\xf7\xc4\x2b\x85\x64\x59\x59\xd8\x23\xb2\xb8\x48\x88\x5a\x2d\x4f\xaa\x9f\xd9\x82\xa2\x5b\xb1\x96\xab\xef\x6e\xce\xff\x4f\x1d\x7e\x40\xd7\x5e\x78\xcd\xe3\xb1\x63\x6c\x34\x9c\xb5\x1f\x52\xc4\x13\x3b\x46\x4a\x17\x51\x17\x7d\xf2\x44\xf8\x3c\x79\x65\x4c\x9e\x0b\xd9\xc5\xb0\xcf\x86\xd6\x3f\xc5\x25\xad\xc8\xa3\x59\x74\x26\xdc\xe6\x37\xd7\x37\xab\xab\xae\xa2\x5f\x15\x85\x8a\x1b\x02\xe3\xd9\x2b\x6e\xe7\x13\xe8\x18\xbf\x8f\x2d\xed\x78\x04\x17\xd0\xf1\x09\xee\x45\x78\xab\x9d\xdc\x82\xf1\xb7\x5e\xc1\xa7\xba\x13\xff\xe6\xee\xa1\xef\x45\x34\xef\x46\xa4\xc6\x75\x9d\x09\x4c\x61\x3d\x81\x0d\xc4\x50\x89\x43\xd8\xac\x74\x3b\xee\xd8\x86\xb4\xb5\xbb\xa6\x06\x45\xd4\x20\x81\x35\x40\xb6\x42\xf8\xd0\xac\xd1\x19\xf4\x48\x10\x1e\x84\x68\x5c\xa1\x0b\x43\xfd\xf2\x36\xbb\xb3\x06\x67\xe9\x97\xd7\xc1\x80\x74\x89\x8e\xca\x69\xba\x57\xf7\xa3\x4e\xb0\x6f\xf2\x65\x98\xc2\x66\xab\xd9\xd5\x1f\x01\x00\x00\xff\xff\xa8\x51\xbb\xed\x15\x17\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(2019, 7, 29, 12, 22, 48, 930282528, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(2019, 7, 29, 12, 22, 48, 930282528, time.UTC),
			uncompressedSize: 874,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x93\xcd\x6e\x9c\x40\x10\x84\xef\x3c\x45\x49\x7b\x0d\x1b\x61\x69\x2f\xdc\xa2\x38\x89\x2c\x25\xd6\x5e\x9c\x7b\x7b\x68\xf0\x28\xf3\x97\xe9\x66\xb3\x04\xf9\xdd\xa3\xd9\x5f\x36\xf6\x9c\x80\xaa\xaf\xa7\xa6\x80\xba\xae\xab\x15\x3c\x7b\x43\xe6\x85\x3b\x74\x9c\x5c\x9c\x3c\x07\xc5\x28\xdc\xe1\x79\xc2\x57\x37\xee\xa1\x11\x07\x47\xb5\x82\x89\x41\xc9\x06\xce\xb0\x9e\x06\x86\x67\xa5\x8e\x94\xd6\x15\x25\xfb\x93\xb3\xd8\x18\x5a\x50\x4a\xf2\x71\xd7\x54\xbf\x6c\xe8\x5a\xdc\x5f\xc6\x56\x67\x7b\x5b\x01\x81\x3c\xb7\xd7\xdd\xe7\x19\xb6\xc7\xfa\x91\x3c\x4b\x22\xc3\x78\x7d\x3d\x99\x0e\xb7\x2d\xe6\xf9\x56\x9d\x67\x70\xe8\x8a\x4d\x12\x9b\x32\x31\x73\x72\xd6\x90\xb4\x68\x2a\x40\xd8\xb1\xd1\x98\x8b\x02\x78\x52\xf3\xf2\x9d\x9e\xd9\xc9\xf1\xc1\x9b\x00\x15\xa0\xec\x93\x23\xe5\x13\xb2\x08\x5b\x96\xbb\xa1\xdf\xe3\x81\x73\x94\xb2\x2e\x5d\x5d\x98\xfa\x5d\xa6\xac\x43\x9b\x0b\xa1\x6d\xd6\x9b\x75\xb3\xb9\xd5\xb7\xa3\x73\xdb\xe8\xac\x99\x5a\x3c\xf4\x8f\x51\xb7\x99\xa5\xd4\x7a\x76\x51\x1e\x16\xf9\x6a\xd4\x1e\x9b\xe6\x0e\xc0\x0a\x3f\x68\x6f\xfd\xe8\xcb\x0e\x31\x4f\xe5\x95\x8e\xc2\x1f\x60\x03\x3c\x0f\xf4\x3c\x29\xcb\x12\x7c\xc0\xc6\xe3\x06\x14\xfb\x97\xd1\xc7\x8c\x18\x18\x56\xd9\x2f\xed\x09\x4d\x73\xd7\x34\x58\xe1\x9e\x7b\x1a\x9d\x22\xc5\x7c\xcd\xb5\x2a\x9e\xdd\xee\x78\xf9\x14\x4c\xf4\x87\x8f\x4c\x23\x06\x56\xb8\x38\x08\x62\x0f\x26\xf3\x82\xcc\xbf\x47\x16\x05\x85\x0e\x99\x25\xc5\x20\xbc\xbe\x0c\x2a\x53\x6f\x4e\x78\xec\xd3\x38\xcb\x41\xaf\x07\x58\x74\xbf\x8d\x59\xdb\x63\xba\x8b\x2c\x6c\xc6\x6c\x75\xfa\x1c\x83\xf2\x5e\xdb\x05\x97\xc7\xf0\x49\x9e\x84\xf3\xff\xcc\x49\xfa\x96\xe3\x98\xde\x6a\xe4\x5c\xfc\xb3\xcd\x76\x67\x1d\x0f\xfc\x45\x0c\x39\xd2\xc3\xaf\xd0\x93\x13\xae\xfe\x05\x00\x00\xff\xff\x5d\x9a\x63\xab\x6a\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(2019, 7, 29, 12, 22, 48, 930282528, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
