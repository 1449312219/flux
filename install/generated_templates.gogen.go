// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 7, 25, 14, 38, 46, 214627251, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(2019, 7, 25, 13, 36, 31, 869053652, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(2019, 7, 25, 14, 38, 46, 213126179, time.UTC),
			uncompressedSize: 5899,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x58\xdf\x6f\x1b\xb9\xf1\x7f\xf7\x5f\x31\x90\x1f\x92\x00\xd2\xca\x8a\xef\xfb\x45\xb1\x57\x1f\x90\x4b\x2e\x69\x9a\xb3\x63\xc4\x4d\x8b\x3e\xf5\x28\xee\x48\x4b\x88\x4b\x6e\x39\xdc\xd5\x09\xc6\xfd\xef\xc5\x90\xfb\x83\x2b\xc9\xce\x21\x79\x88\x6d\xee\xfc\x9e\xe1\x67\x66\xb8\x58\x2c\x2e\x44\xad\xfe\x89\x8e\x94\x35\x39\x88\xba\xa6\x65\xbb\xba\xd8\x29\x53\xe4\xf0\x0e\x6b\x6d\x0f\x15\x1a\x7f\x51\xa1\x17\x85\xf0\x22\xbf\x00\x30\xa2\xc2\x1c\x36\xba\xf9\xfd\xf1\x11\xd4\x06\xb2\x3b\x51\x21\xd5\x42\x22\xfc\xf1\x47\xf7\x3d\xfc\x99\xc3\xe3\xe3\xf4\xeb\xe3\x23\xa0\x29\x98\x8c\x6a\x94\x2c\xcc\x61\xad\x95\x14\x94\xc3\xea\x02\x80\x50\xa3\xf4\xd6\xf1\x17\x80\x4a\x78\x59\xfe\x2a\xd6\xa8\x29\x1e\xa4\xba\x99\xda\x3b\xe1\x71\x7b\x88\x1f\xfd\xa1\xc6\x1c\xbe\xa0\x74\x28\x3c\x5e\x00\x78\xac\x6a\x2d\x3c\x76\xc2\x12\x0f\xf8\x9f\x30\xc6\x7a\xe1\x95\x35\x83\x70\x80\xda\xd9\x0a\x7d\x89\x0d\x65\xca\x66\xb5\x75\x3e\x87\xd9\xf5\xd5\xf5\x6a\x06\x97\xe0\x51\xeb\x84\x02\xbc\x05\x92\x4e\xd4\x08\xcb\x0a\xbd\x53\x92\xd8\xb9\xda\x2a\xe3\x5f\x10\x30\x73\xd6\x09\xd6\x13\x1f\x8e\xbc\x00\xe8\x63\x11\x7e\x47\xd7\x2a\x89\x6f\xa4\xb4\x8d\xf1\x77\x53\x42\x80\xd6\xea\xa6\xc2\x41\xd4\xa2\x13\xb5\x55\x7e\xb1\xc3\xc3\xa0\x80\x38\x0a\x7e\x54\xd8\x9f\x8c\xf2\x16\xcc\x52\x84\x04\x27\x54\x05\x6e\x44\xa3\xfd\xad\x2d\x30\x87\xab\x1f\xae\xae\xe0\x12\xf6\x25\x1a\xa8\xd8\x1a\x2c\xc0\xa1\x28\x16\xd6\xe8\xc3\x1c\xf6\x08\x7b\x6b\x5e\x78\x58\x23\x88\xb5\x46\x8e\x87\x2c\x2b\x5b\x5c\x74\x02\x2f\xe1\x1f\xa5\x22\x50\x04\x02\x7c\x55\x6f\x08\x1a\xc2\x02\x36\xd6\xc1\x16\x0d\x3a\xe1\x95\xd9\xc2\xc3\xc3\xdf\x60\x87\x07\xca\xe0\xa3\x81\x4f\x7f\x21\xf8\xe9\x06\x56\xd9\xea\x6a\x3e\x48\xe9\x75\x47\x17\x08\x84\xc3\xd4\x0e\xb2\x6c\x8a\x41\x2c\x40\x00\x61\x2d\xb8\x28\xba\x40\xc1\x1e\x07\x31\x52\x18\xd8\x3b\xe5\xd9\xd0\xec\x7c\xfc\xb6\x68\x86\x60\x60\x55\xfb\xc3\x3b\xe5\xd2\x20\x56\x58\xa8\xa6\xca\xe1\x16\x2b\xeb\x0e\xa9\x9f\x08\x1b\xab\xb5\xdd\xb3\x47\x9d\x6a\x45\xc1\xd5\x86\xf8\x4c\x80\x6c\xc8\xdb\x4a\x71\x04\x76\xc6\xee\xcd\x7f\x4a\x4b\x9e\x06\x11\x1b\xa5\x71\x0e\xfb\x52\xc9\x12\x0e\xb6\x81\xbd\xd2\x3a\x3a\xe5\x2d\x14\x96\xef\x19\x1f\x33\x13\xff\xe2\xc0\xee\x0d\x9b\x3d\x08\x70\x58\x5b\x70\xc2\x97\xe8\xc0\x97\xc2\x74\x8a\xb7\xca\x97\xcd\x1a\x2c\x1f\x22\x68\xb5\xc3\x0c\xfe\x6d\x9b\x17\x5a\x83\xd0\x64\x7b\x15\xd3\x60\x83\xf2\xa0\x8c\xb7\x81\x47\x5a\xe3\x85\x32\xe8\xe6\xb0\x46\x6d\xf7\x19\x3c\xe0\x18\xd5\xd2\xfb\x9a\xf2\xe5\x32\xea\xc9\xa4\xad\x96\x7b\x14\x2d\xee\xad\xdb\xd1\x92\x2b\x6d\xb9\xd6\x76\xbd\xac\x04\x79\x74\x4b\x52\x1e\x97\xe4\x85\x29\x84\xb6\x06\x17\x84\xbe\xa9\xb3\xaa\xb8\x0c\xd6\x2e\xc4\xa2\x76\xaa\x15\x1e\x43\x79\xb2\xb3\x83\xa2\x3e\x55\x44\xe5\x42\x5a\xb3\x51\xdb\xe1\x13\x40\x3c\xb8\x15\x75\x9e\x1c\xa6\xf7\x6c\x91\xb0\x7d\x6f\xda\xb2\x5d\xb3\xc6\x65\x14\x32\x56\xe7\x37\x53\xb6\x57\x54\xf2\x49\x29\x5a\x04\x01\x85\xda\x6c\xd0\x31\xa6\xf6\x12\xba\x4b\x37\xe2\x66\xc8\x50\x14\x97\xe6\x88\xb1\xa7\x55\x05\xf6\x59\xd9\xa8\x6d\x25\xea\xd1\x10\xe5\x4b\x10\x06\xd0\x78\x77\x08\x3e\xfc\x16\x89\x7e\x9b\x83\x30\x05\x34\x46\xda\x8a\xc1\x3c\xf0\x47\x6f\x6f\x43\xb6\x85\x29\x06\x29\x68\xda\x20\x41\x21\x75\xe9\x3e\xc9\x00\x87\xe1\x3b\x32\x90\xb0\x7d\x33\x03\x01\x28\xbc\x05\x55\x31\x8c\xc2\x87\xfb\x0f\x01\x23\xe0\x25\xbb\x45\x6a\x6b\x94\x19\x95\xb3\x73\x2d\x3a\xb5\x51\x32\xe0\x39\xd4\x8d\xab\x2d\x21\xbd\xfa\x13\x81\x1c\xa4\x44\x74\x89\x51\xe4\x00\xb1\xbe\x3f\x11\x38\x10\x6e\x3b\xde\xe2\x27\x22\xb6\xad\xb7\x0c\x2f\x94\x84\x66\x8a\xd0\x97\x4f\x60\xf4\x29\xdf\x19\x8c\xee\xc3\x39\x5c\xd4\x93\xf6\x90\x34\x90\x2e\xea\x0e\x03\x8c\x1a\x0b\xb3\x9c\x7b\x24\xf9\x19\xa8\x4a\x6c\x31\x56\x3f\x33\x64\xf0\x5e\x99\x22\xf8\x5c\x31\xea\x38\x94\x63\xd5\x46\xc4\xd1\x28\x08\x19\x5b\x02\x2b\x27\x81\xc7\x08\x10\x7e\x80\x05\xc6\x84\xc2\xca\x1d\xba\x00\x0d\xee\x04\x1c\xbc\x18\xc2\xd7\xe7\x92\x47\x02\x1e\x17\x58\xb3\x17\x5b\x60\x6b\xb3\x81\x26\xa8\xca\xa1\x13\xaa\x6c\x10\x23\x8b\xf0\x23\x5f\x65\xab\xeb\xec\xf5\x94\xf6\xbe\xd1\xfa\xde\x6a\x25\x0f\x39\x7c\xdc\xdc\x59\x7f\xef\x90\x52\x4f\x1c\x92\x6d\x9c\x44\x4a\xa1\xde\xe1\x7f\x1b\x24\x3f\x39\x03\x90\x75\x93\xc3\xff\x5d\x55\x93\xc3\x2a\x74\x83\x1c\xfe\xff\x87\x5b\x35\x4e\x12\xd6\xa5\xcc\x8b\x31\x3b\xf7\x61\xaa\xb8\xbe\xba\xe6\xe6\xaa\xcc\xc6\xba\x2a\x94\xad\xd0\x03\x75\x52\x63\x13\x19\xe7\x9b\x3d\x44\xd0\xbe\x17\xbe\xcc\x61\x89\x5e\x86\x58\x14\x4b\xa2\x92\xa7\x16\x1b\xe7\x28\xd0\xb6\xbb\x1e\x5b\xd5\xa2\x01\x65\x62\x78\x5e\x50\xe4\x21\x2a\x97\x93\x5b\x1d\xa3\x20\x8a\xcf\x46\x1f\x72\xf0\xae\x41\x96\xc6\x1d\x3d\x5c\xa8\x75\x87\x43\x5c\x01\x35\xba\x8d\x75\x12\x59\x68\x6c\xe1\xdc\xc1\x9f\x32\x3c\xed\xb2\x53\xdb\x5b\xe1\x3a\xdb\x23\xd9\xf7\x99\x9f\x94\xd3\x47\x23\x75\x13\x2e\x3a\x0f\x22\x11\x8f\x7b\x10\x88\x9d\xee\x1b\x8d\xb9\x6f\xcd\x3f\x32\xeb\x51\xd3\x1c\xc0\x00\x0a\x94\x5a\x38\x1e\x40\xd6\xb6\x4d\x6a\xf5\x99\xae\x15\x6f\x73\xea\xbc\xb3\xd6\x2f\x33\xa2\xf2\x49\x07\x84\x99\x68\x9d\x8d\x88\x3a\x8b\x9a\xe7\x3d\x49\x22\x01\x4d\xab\x9c\x35\x01\xbf\x62\x6b\x98\x7d\xfa\xfa\xf3\x2f\x6f\x3f\xdf\xbd\xff\xf8\x61\x16\x11\x6b\xce\xf1\xb0\x2d\x3a\x37\x6d\x2f\x89\x98\x80\xc8\xeb\x43\x04\x7f\xaf\xcf\xf9\x78\xd2\x17\x4e\x7d\x1c\x8b\x93\x89\x9f\x74\x94\x21\x9a\xc7\xe8\x5e\x1b\x23\x4a\xd2\x39\x3b\xeb\x42\x4e\x12\x11\xc7\xfd\x37\x4d\x7a\x68\xbe\xfd\x20\x29\x0c\x08\xed\xd1\x19\x1e\x14\x4f\x2c\xde\x38\x5b\x71\x59\xf4\x0d\x76\x0e\x82\xb8\xdc\xba\x26\xc0\x61\xd0\x56\xee\xe8\x34\xd9\x68\xda\xfc\x4c\x5c\xc6\x70\x4f\xe2\xd2\x0a\xdd\xe0\x49\x4c\xbe\x55\xc4\xc7\x35\xd0\xb7\x88\x67\x2a\x80\x3b\xd4\xb4\x33\x3d\xd3\x9b\x9e\xa8\x4b\xa6\x8a\xcd\x78\x42\x37\xc5\x87\xd1\x68\x56\x99\x4f\x7c\x88\x69\x88\x0b\x07\x16\x8c\x99\x52\xc8\x12\x0b\x8e\x6c\x9a\xda\x61\x08\xe2\x24\x72\x58\xe6\x89\x14\xeb\xba\x29\x27\x61\xe8\x16\xa6\xc0\x38\x0f\x4a\x78\xd0\xa7\xa6\xae\xf5\x81\x03\x41\x69\x28\xc6\x59\xc3\xef\x2d\x5b\xd9\x70\x4a\x43\xc1\x85\xed\x2e\xe4\x01\x4a\xbb\x0f\xcb\x8c\x35\x06\xa5\x0f\x73\x88\x9f\x86\x6e\xb1\x18\x1c\x08\x53\x2a\x2b\xbf\x19\x8e\xb2\xae\x45\x67\xd4\xca\x4c\xea\x86\x27\xdf\x8c\xf1\x4b\xa7\x21\xf9\x4a\xf1\xaa\x8d\xa1\x78\x1b\x49\x3f\xde\x4f\x9c\xe2\x5b\x47\xe8\xc3\xb2\x34\x4d\xec\x68\x43\x4f\xcf\x2b\xa9\x77\x4c\x19\xd6\x97\x04\x81\x53\x8b\x3b\xea\x9b\x8b\xc9\x4c\xa0\x08\xaa\x86\xc2\x3a\x17\xa2\xa7\xb0\x88\xd5\xb4\x0e\xb8\x1e\xba\x71\xd8\xe2\x5e\xf6\xab\xd1\xab\xd4\x96\xfe\x6e\xc5\x2a\xe4\x21\x22\x59\xe6\x26\x86\x30\x16\x46\x7c\x5f\x14\xca\xdd\x9c\xa0\x7e\x6a\xd6\x97\x64\x16\x18\x93\xf7\xf5\xcb\xaf\x71\xdb\x14\x66\x1b\xbf\x7d\x50\x3e\x6c\x40\xa4\xbc\x75\x87\x01\xad\xde\xf3\x1c\x33\x51\xce\x3d\xa8\x71\xfa\xe6\xf1\x11\xb2\x0f\xca\xb3\xa4\xf0\x68\x31\xa5\x58\x3b\x61\x64\xd9\x13\xfd\x1c\xfe\x8a\xcf\x17\x6a\x13\x8e\xf8\x6e\xd0\x39\xce\x5a\xf8\xc0\xf7\x10\xd2\x40\x7f\xb7\xca\x24\x0c\xb3\xf9\xac\x7b\x05\xd1\x84\x29\x3b\x4f\x02\xa7\xad\x6a\x2f\x4c\x28\x3f\x87\x9c\x55\x19\x07\xd0\x4a\x18\xb5\xe1\xd1\x84\x0b\x94\x54\x81\x2e\xfa\x7a\x34\xe4\x85\xed\xcd\x12\x42\x63\x0a\x74\x47\x01\x74\xa8\x85\x57\x2d\x42\x1d\xcc\xea\xd2\xbb\x9d\x04\xf1\xa8\xe0\x07\xe7\xa8\x59\x17\xca\xad\xe6\xf1\xe7\xeb\xe1\x49\x67\x0c\x4e\x78\xb2\x39\x17\x9c\xf0\x0e\xd2\x47\xb5\xa7\x3a\x23\xe0\x2b\xa1\x3b\xc7\xdf\x10\xba\x21\x73\x4c\x03\xe7\xf9\x7f\xa9\x84\x3a\x6b\x00\xf2\x87\x5e\x42\x4f\x35\x3e\x4a\x9d\x05\x5d\xe4\x7b\xba\xb7\x1c\x50\x34\xe1\xa1\x83\xe3\xc4\xdd\x40\xf9\xa3\x5d\x24\x8d\x55\x87\xab\x1d\x6a\xde\x3c\x03\xa3\x3d\x47\x27\x8b\xb9\x6e\xfe\xba\xc3\x03\xa8\xe2\xa7\x81\xec\x99\x56\x99\x58\xc5\x22\x84\x6f\x1c\x4e\x16\xa2\x33\xba\xc2\xe7\xc3\x62\xa0\xa7\xa7\x7d\x37\xf8\xbb\xef\x03\x90\x40\xa2\x30\x30\x6b\x6a\xf2\x0e\x45\x35\xeb\x01\x2b\x11\xf2\x12\xb3\x6d\x36\x87\x7f\xf1\xbc\x0f\x6f\xb5\x6d\x8a\x57\x59\xd8\xf7\xbc\xdd\xf1\xfc\x46\x50\x0b\xe7\x95\x6c\xb4\x70\xd0\x3d\x35\x74\x52\x8e\xb1\xb6\xd3\x7a\xb3\x27\x5e\x29\x24\xcb\xca\xc2\x1e\x91\xc5\x45\x42\xd4\x6a\x79\x54\xfd\xcc\x16\x14\xdd\x88\xb5\x5c\xbd\xbe\x3e\xfd\x3f\x75\xf8\x01\x5d\x7b\xe6\x15\x8f\xc7\x8e\xb1\xd1\x70\xd6\x7e\x4c\x11\x4f\xec\x18\x29\x5d\x44\x5d\xf4\xc9\xd3\xe0\x8b\xe4\x75\x31\x79\x26\x64\x17\xc3\x3e\x1b\x5a\xff\x14\x97\xb4\x22\x8f\x66\xd1\x99\x70\x93\x5f\x5f\x5d\xaf\x2e\xba\x8a\x7e\x53\x14\x2a\x6e\x08\x8c\x67\x6f\xb8\x9d\x8f\xb5\x7d\x09\xe3\xe7\xb1\xa3\x3d\x3e\x82\x0b\xe0\xf8\x3c\xf3\x22\xbc\xd0\x1e\x5d\xa2\xe9\x65\xb8\x84\xcf\x75\x27\xfd\xdd\xdd\x43\xdf\x89\x68\xde\x0d\x48\x8d\xeb\xfa\x12\x98\xc2\x7a\x02\x1b\x88\xa1\x12\x87\xb0\x57\xe9\x76\xdc\xb0\x0d\x69\x6b\x77\x4d\x0d\x8a\xa8\x41\x02\x6b\x80\x6c\x85\xf0\xa9\x59\xa3\x33\xe8\x91\x20\x3c\x07\xd1\xb8\x40\x17\x86\xfa\xd5\x6d\x76\x67\x0d\xce\xd2\x2f\x6f\x83\x01\xe9\x0a\x1d\x95\xd3\x74\xab\xee\x07\x9d\x60\xdf\xe4\xcb\x30\x83\xcd\x56\xb3\x8b\xff\x05\x00\x00\xff\xff\x9e\xf6\xc5\xc2\x0b\x17\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(2019, 7, 25, 13, 37, 39, 999312835, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(2019, 7, 25, 14, 18, 1, 501573117, time.UTC),
			uncompressedSize: 874,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x93\xcd\x6e\x9c\x40\x10\x84\xef\x3c\x45\x49\x7b\x0d\x1b\x61\x69\x2f\xdc\xa2\x38\x89\x2c\x25\xd6\x5e\x9c\x7b\x7b\x68\xf0\x28\xf3\x97\xe9\x66\xb3\x04\xf9\xdd\xa3\xd9\x5f\x36\xf6\x9c\x80\xaa\xaf\xa7\xa6\x80\xba\xae\xab\x15\x3c\x7b\x43\xe6\x85\x3b\x74\x9c\x5c\x9c\x3c\x07\xc5\x28\xdc\xe1\x79\xc2\x57\x37\xee\xa1\x11\x07\x47\xb5\x82\x89\x41\xc9\x06\xce\xb0\x9e\x06\x86\x67\xa5\x8e\x94\xd6\x15\x25\xfb\x93\xb3\xd8\x18\x5a\x50\x4a\xf2\x71\xd7\x54\xbf\x6c\xe8\x5a\xdc\x5f\xc6\x56\x67\x7b\x5b\x01\x81\x3c\xb7\xd7\xdd\xe7\x19\xb6\xc7\xfa\x91\x3c\x4b\x22\xc3\x78\x7d\x3d\x99\x0e\xb7\x2d\xe6\xf9\x56\x9d\x67\x70\xe8\x8a\x4d\x12\x9b\x32\x31\x73\x72\xd6\x90\xb4\x68\x2a\x40\xd8\xb1\xd1\x98\x8b\x02\x78\x52\xf3\xf2\x9d\x9e\xd9\xc9\xf1\xc1\x9b\x00\x15\xa0\xec\x93\x23\xe5\x13\xb2\x08\x5b\x96\xbb\xa1\xdf\xe3\x81\x73\x94\xb2\x2e\x5d\x5d\x98\xfa\x5d\xa6\xac\x43\x9b\x0b\xa1\x6d\xd6\x9b\x75\xb3\xb9\xd5\xb7\xa3\x73\xdb\xe8\xac\x99\x5a\x3c\xf4\x8f\x51\xb7\x99\xa5\xd4\x7a\x76\x51\x1e\x16\xf9\x6a\xd4\x1e\x9b\xe6\x0e\xc0\x0a\x3f\x68\x6f\xfd\xe8\xcb\x0e\x31\x4f\xe5\x95\x8e\xc2\x1f\x60\x03\x3c\x0f\xf4\x3c\x29\xcb\x12\x7c\xc0\xc6\xe3\x06\x14\xfb\x97\xd1\xc7\x8c\x18\x18\x56\xd9\x2f\xed\x09\x4d\x73\xd7\x34\x58\xe1\x9e\x7b\x1a\x9d\x22\xc5\x7c\xcd\xb5\x2a\x9e\xdd\xee\x78\xf9\x14\x4c\xf4\x87\x8f\x4c\x23\x06\x56\xb8\x38\x08\x62\x0f\x26\xf3\x82\xcc\xbf\x47\x16\x05\x85\x0e\x99\x25\xc5\x20\xbc\xbe\x0c\x2a\x53\x6f\x4e\x78\xec\xd3\x38\xcb\x41\xaf\x07\x58\x74\xbf\x8d\x59\xdb\x63\xba\x8b\x2c\x6c\xc6\x6c\x75\xfa\x1c\x83\xf2\x5e\xdb\x05\x97\xc7\xf0\x49\x9e\x84\xf3\xff\xcc\x49\xfa\x96\xe3\x98\xde\x6a\xe4\x5c\xfc\xb3\xcd\x76\x67\x1d\x0f\xfc\x45\x0c\x39\xd2\xc3\xaf\xd0\x93\x13\xae\xfe\x05\x00\x00\xff\xff\x5d\x9a\x63\xab\x6a\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(2019, 7, 25, 13, 37, 39, 995569443, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
