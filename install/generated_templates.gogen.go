// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 7, 27, 10, 13, 8, 679282456, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(2019, 7, 27, 10, 1, 12, 305203208, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(2019, 7, 27, 10, 13, 8, 678261702, time.UTC),
			uncompressedSize: 5901,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x58\x5f\x8f\x1b\xb7\x11\x7f\xbf\x4f\x31\x90\x1f\x6c\x03\xd2\xea\x94\x4b\x8b\x62\xd3\x0b\xe0\xd8\xb1\xeb\x3a\x3e\x1f\x7c\x75\x8b\x3e\x35\x14\x77\xa4\x25\xc4\x25\xb7\x1c\xee\x2a\x82\x90\xef\x1e\x0c\xb9\x7f\xb8\x92\xce\x17\xd8\x0f\xbe\x3b\xee\xfc\x9f\xe1\x6f\x66\xb8\x58\x2c\xae\x44\xad\xfe\x8d\x8e\x94\x35\x39\x88\xba\xa6\x65\xbb\xba\xda\x29\x53\xe4\xf0\x06\x6b\x6d\x0f\x15\x1a\x7f\x55\xa1\x17\x85\xf0\x22\xbf\x02\x30\xa2\xc2\x1c\x36\xba\xf9\xed\x78\x04\xb5\x81\xec\x4e\x54\x48\xb5\x90\x08\xbf\xff\xde\x7d\x0f\x7f\xe6\x70\x3c\x4e\xbf\x1e\x8f\x80\xa6\x60\x32\xaa\x51\xb2\x30\x87\xb5\x56\x52\x50\x0e\xab\x2b\x00\x42\x8d\xd2\x5b\xc7\x5f\x00\x2a\xe1\x65\xf9\x8b\x58\xa3\xa6\x78\x90\xea\x66\x6a\xef\x84\xc7\xed\x21\x7e\xf4\x87\x1a\x73\xf8\x8c\xd2\xa1\xf0\x78\x05\xe0\xb1\xaa\xb5\xf0\xd8\x09\x4b\x3c\xe0\x7f\xc2\x18\xeb\x85\x57\xd6\x0c\xc2\x01\x6a\x67\x2b\xf4\x25\x36\x94\x29\xbb\xac\xad\xf3\x39\xcc\x6e\xae\x6f\x56\x33\x78\x06\x1e\xb5\x4e\x28\xc0\x5b\x20\xe9\x44\x8d\xb0\xac\xd0\x3b\x25\x89\x9d\xab\xad\x32\xfe\x39\x01\x33\x67\x9d\x60\x3d\xf1\xe1\xc4\x0b\x80\x3e\x16\xe1\x77\x74\xad\x92\xf8\x4a\x4a\xdb\x18\x7f\x37\x25\x04\x68\xad\x6e\x2a\x1c\x44\x2d\x3a\x51\x5b\xe5\x17\x3b\x3c\x0c\x0a\x88\xa3\xe0\x47\x85\xfd\xc9\x28\x6f\xc1\x2c\x45\x48\x70\x42\x55\xe0\x46\x34\xda\x7f\xb4\x05\xe6\x70\xfd\xfd\xf5\x35\x3c\x83\x7d\x89\x06\x2a\xb6\x06\x0b\x70\x28\x8a\x85\x35\xfa\x30\x87\x3d\xc2\xde\x9a\xe7\x1e\xd6\x08\x62\xad\x91\xe3\x21\xcb\xca\x16\x57\x9d\xc0\x67\xf0\xaf\x52\x11\x28\x02\x01\xbe\xaa\x37\x04\x0d\x61\x01\x1b\xeb\x60\x8b\x06\x9d\xf0\xca\x6c\xe1\xe1\xe1\x1f\xb0\xc3\x03\x65\xf0\xde\xc0\x87\xbf\x11\xfc\x78\x0b\xab\x6c\x75\x3d\x1f\xa4\xf4\xba\xa3\x0b\x04\xc2\x61\x6a\x07\x59\x36\xc5\x20\x16\x20\x80\xb0\x16\x5c\x14\x5d\xa0\x60\x8f\x83\x18\x29\x0c\xec\x9d\xf2\x6c\x68\x76\x39\x7e\x5b\x34\x43\x30\xb0\xaa\xfd\xe1\x8d\x72\x69\x10\x2b\x2c\x54\x53\xe5\xf0\x11\x2b\xeb\x0e\xa9\x9f\x08\x1b\xab\xb5\xdd\xb3\x47\x9d\x6a\x45\xc1\xd5\x86\xf8\x4c\x80\x6c\xc8\xdb\x4a\x71\x04\x76\xc6\xee\xcd\xff\x4a\x4b\x9e\x06\x11\x1b\xa5\x71\x0e\xfb\x52\xc9\x12\x0e\xb6\x81\xbd\xd2\x3a\x3a\xe5\x2d\x14\x96\xef\x19\x1f\x33\x13\xff\xe2\xc0\xee\x0d\x9b\x3d\x08\x70\x58\x5b\x70\xc2\x97\xe8\xc0\x97\xc2\x74\x8a\xb7\xca\x97\xcd\x1a\x2c\x1f\x22\x68\xb5\xc3\x0c\xfe\x6b\x9b\xe7\x5a\x83\xd0\x64\x7b\x15\xd3\x60\x83\xf2\xa0\x8c\xb7\x81\x47\x5a\xe3\x85\x32\xe8\xe6\xb0\x46\x6d\xf7\x19\x3c\xe0\x18\xd5\xd2\xfb\x9a\xf2\xe5\x32\xea\xc9\xa4\xad\x96\x7b\x14\x2d\xee\xad\xdb\xd1\x92\x2b\x6d\xb9\xd6\x76\xbd\xac\x04\x79\x74\x4b\x52\x1e\x97\xe4\x85\x29\x84\xb6\x06\x17\x84\xbe\xa9\xb3\xaa\x78\x16\xac\x5d\x88\x45\xed\x54\x2b\x3c\x86\xf2\x64\x67\x07\x45\x7d\xaa\x88\xca\x85\xb4\x66\xa3\xb6\xc3\x27\x80\x78\xf0\x51\xd4\x79\x72\x98\xde\xb3\x45\xc2\xf6\xad\x69\xcb\x76\xcd\x1a\x97\x51\xc8\x58\x9d\x4f\xa6\x6c\xaf\xa8\xe4\x93\x52\xb4\x08\x02\x0a\xb5\xd9\xa0\x63\x4c\xed\x25\x74\x97\x6e\xc4\xcd\x90\xa1\x28\x2e\xcd\x11\x63\x4f\xab\x0a\xec\xb3\xb2\x51\xdb\x4a\xd4\xa3\x21\xca\x97\x20\x0c\xa0\xf1\xee\x10\x7c\xf8\x35\x12\xfd\x3a\x07\x61\x0a\x68\x8c\xb4\x15\x83\x79\xe0\x8f\xde\x7e\x0c\xd9\x16\xa6\x18\xa4\xa0\x69\x83\x04\x85\xd4\xa5\xfb\x2c\x03\x1c\x86\x6f\xc8\x40\xc2\xf6\x64\x06\x02\x50\x78\x0b\xaa\x62\x18\x85\x77\xf7\xef\x02\x46\xc0\x0b\x76\x8b\xd4\xd6\x28\x33\x2a\x67\xe7\x5a\x74\x6a\xa3\x64\xc0\x73\xa8\x1b\x57\x5b\x42\x7a\xf9\x27\x02\x39\x48\x89\xe8\x12\xa3\xc8\x01\x62\x7d\x7f\x22\x70\x20\xdc\x76\xbc\xc5\x8f\x44\x6c\x5b\x6f\x19\x5e\x28\x09\xcd\x14\xa1\x9f\x3d\x82\xd1\xe7\x7c\x17\x30\xba\x0f\xe7\x70\x51\xcf\xda\x43\xd2\x40\xba\xa8\x3b\x0c\x30\x6a\x2c\xcc\x72\xee\x91\xe4\x67\xa0\x2a\xb1\xc5\x58\xfd\xcc\x90\xc1\x5b\x65\x8a\xe0\x73\xc5\xa8\xe3\x50\x8e\x55\x1b\x11\x47\xa3\x20\x64\x6c\x09\xac\x9c\x04\x1e\x23\x40\xf8\x01\x16\x18\x13\x0a\x2b\x77\xe8\x02\x34\xb8\x33\x70\xf0\x62\x08\x5f\x9f\x4b\x1e\x09\x78\x5c\x60\xcd\x5e\x6c\x81\xad\xcd\x06\x9a\xa0\x2a\x87\x4e\xa8\xb2\x41\x8c\x2c\xc2\x8f\x7c\x95\xad\x6e\xb2\x9b\x29\xed\x7d\xa3\xf5\xbd\xd5\x4a\x1e\x72\x78\xbf\xb9\xb3\xfe\xde\x21\xa5\x9e\x38\x24\xdb\x38\x89\x94\x42\xbd\xc3\xff\x37\x48\x7e\x72\x06\x20\xeb\x26\x87\xbf\x5c\x57\x93\xc3\x2a\x74\x83\x1c\xfe\xfa\xfd\x47\x35\x4e\x12\xd6\xa5\xcc\x8b\x31\x3b\xf7\x61\xaa\xb8\xb9\xbe\xe1\xe6\xaa\xcc\xc6\xba\x2a\x94\xad\xd0\x03\x75\x52\x63\x13\x19\x97\x9b\x3d\x44\xd0\xbe\x17\xbe\xcc\x61\x89\x5e\x86\x58\x14\x4b\xa2\x92\xa7\x16\x1b\xe7\x28\xd0\xb6\xbb\x1e\x5b\xd5\xa2\x01\x65\x62\x78\x9e\x53\xe4\x21\x2a\x97\x93\x5b\x1d\xa3\x20\x8a\x4f\x46\x1f\x72\xf0\xae\x41\x96\xc6\x1d\x3d\x5c\xa8\x75\x87\x43\x5c\x01\x35\xba\x8d\x75\x12\x59\x68\x6c\xe1\xdc\xc1\x1f\x33\x3c\xed\xb2\x53\xdb\x5b\xe1\x3a\xdb\x23\xd9\xb7\x99\x9f\x94\xd3\x7b\x23\x75\x13\x2e\x3a\x0f\x22\x11\x8f\x7b\x10\x88\x9d\xee\x89\xc6\xdc\xb7\xe6\x1f\x98\xf5\xa4\x69\x0e\x60\x00\x05\x4a\x2d\x1c\x0f\x20\x6b\xdb\x26\xb5\xfa\x95\xae\x15\x6f\x73\xea\xbc\xb3\xd6\x2f\x33\xa2\xf2\x51\x07\x84\x99\x68\x9d\x8d\x88\x3a\x8b\x9a\xe7\x3d\x49\x22\x01\x4d\xab\x9c\x35\x01\xbf\x62\x6b\x98\x7d\xf8\xf2\xd3\xcf\xaf\x3f\xdd\xbd\x7d\xff\x6e\x16\x11\x6b\xce\xf1\xb0\x2d\x3a\x37\x6d\x2f\x89\x98\x80\xc8\xeb\x43\x04\x7f\xaf\x2f\xf9\x78\xd6\x17\xce\x7d\x1c\x8b\x93\x89\x1f\x75\x94\x21\x9a\xc7\xe8\x5e\x1b\x23\x4a\xd2\x39\x3b\xeb\x42\x4e\x12\x11\xa7\xfd\x37\x4d\x7a\x68\xbe\xfd\x20\x29\x0c\x08\xed\xd1\x19\x1e\x14\xcf\x2c\xde\x38\x5b\x71\x59\xf4\x0d\x76\x0e\x82\xb8\xdc\xba\x26\xc0\x61\xd0\x56\xee\xe8\x3c\xd9\x68\xda\xfc\x42\x5c\xc6\x70\x4f\xe2\xd2\x0a\xdd\xe0\x59\x4c\x9e\x2a\xe2\xd3\x1a\xe8\x5b\xc4\x57\x2a\x80\x3b\xd4\xb4\x33\x7d\xa5\x37\x3d\x52\x97\x4c\x15\x9b\xf1\x84\x6e\x8a\x0f\xa3\xd1\xac\x32\x9f\xf8\x10\xd3\x10\x17\x0e\x2c\x18\x33\xa5\x90\x25\x16\x1c\xd9\x34\xb5\xc3\x10\xc4\x49\xe4\xb0\xcc\x13\x29\xd6\x75\x53\x4e\xc2\xd0\x2d\x4c\x81\x71\x1e\x94\xf0\xa0\x4f\x4d\x5d\xeb\x03\x07\x82\xd2\x50\x8c\xb3\x86\xdf\x5b\xb6\xb2\xe1\x94\x86\x82\x0b\xdb\x5d\xc8\x03\x94\x76\x1f\x96\x19\x6b\x0c\x4a\x1f\xe6\x10\x3f\x0d\xdd\x62\x31\x38\x10\xa6\x54\x56\x7e\x3b\x1c\x65\x5d\x8b\xce\xa8\x95\x99\xd4\x0d\x4f\xbe\x19\xe3\x97\x4e\x43\xf2\x85\xe2\x55\x1b\x43\xf1\x3a\x92\xbe\xbf\x9f\x38\xc5\xb7\x8e\xd0\x87\x65\x69\x9a\xd8\xd1\x86\x9e\x9e\x57\x52\xef\x98\x32\xac\x2f\x09\x02\xa7\x16\x77\xd4\xb7\x57\x93\x99\x40\x11\x54\x0d\x85\x75\x2e\x44\x4f\x61\x11\xab\x69\x1d\x70\x3d\x74\xe3\xb0\xc5\xbd\xe8\x57\xa3\x97\xa9\x2d\xfd\xdd\x8a\x55\xc8\x43\x44\xb2\xcc\x4d\x0c\x61\x2c\x8c\xf8\xbe\x28\x94\xbb\x3d\x43\xfd\xd4\xac\xcf\xc9\x2c\x30\x26\xef\xcb\xe7\x5f\xe2\xb6\x29\xcc\x36\x7e\x7b\xa7\x7c\xd8\x80\x48\x79\xeb\x0e\x03\x5a\xbd\xe5\x39\x66\xa2\x9c\x7b\x50\xe3\xf4\xed\xf1\x08\xd9\x3b\xe5\x59\x52\x78\xb4\x98\x52\xac\x9d\x30\xb2\xec\x89\x7e\x0a\x7f\xc5\xe7\x0b\xb5\x09\x47\x7c\x37\xe8\x12\x67\x2d\x7c\xe0\x7b\x08\x69\xa0\x7f\x5a\x65\x12\x86\xd9\x7c\xd6\xbd\x82\x68\xc2\x94\x9d\x27\x81\xf3\x56\xb5\x17\x26\x94\x9f\x43\xce\xaa\x8c\x03\x68\x25\x8c\xda\xf0\x68\xc2\x05\x4a\xaa\x40\x17\x7d\x3d\x19\xf2\xc2\xf6\x66\x09\xa1\x31\x05\xba\x93\x00\x3a\xd4\xc2\xab\x16\xa1\x0e\x66\x75\xe9\xdd\x4e\x82\x78\x52\xf0\x83\x73\xd4\xac\x0b\xe5\x56\xf3\xf8\xf3\xbb\xe1\x49\x67\x0c\x4e\x78\xb2\xb9\x14\x9c\xf0\x0e\xd2\x47\xb5\xa7\xba\x20\xe0\x0b\xa1\xbb\xc4\xdf\x10\xba\x21\x73\x4c\x03\x97\xf9\x7f\xae\x84\xba\x68\x00\xf2\x87\x5e\x42\x4f\x35\x3e\x4a\x5d\x04\x5d\xe4\x7b\xba\xb7\x1c\x50\x34\xe1\xa1\x83\xe3\xc4\xdd\x40\xf9\x93\x5d\x24\x8d\x55\x87\xab\x1d\x6a\xde\x7e\x05\x46\x7b\x8e\x4e\x16\x73\xdd\xfe\x7d\x87\x07\x50\xc5\x8f\x03\xd9\x57\x5a\x65\x62\x15\x8b\x10\xbe\x71\x38\x59\x88\x2e\xe8\x0a\x9f\x0f\x8b\x81\x9e\x1e\xf7\xdd\xe0\x6f\xbe\x0f\x40\x02\x89\xc2\xc0\xac\xa9\xc9\x3b\x14\xd5\xac\x07\xac\x44\xc8\x0b\xcc\xb6\xd9\x1c\xfe\xc3\xf3\x3e\xbc\xd6\xb6\x29\x5e\x66\x61\xdf\xf3\x76\xc7\xf3\x1b\x41\x2d\x9c\x57\xb2\xd1\xc2\x41\xf7\xd4\xd0\x49\x39\xc5\xda\x4e\xeb\xed\x9e\x78\xa5\x90\x2c\x2b\x0b\x7b\x44\x16\x17\x09\x51\xab\xe5\x49\xf5\x33\x5b\x50\x74\x2b\xd6\x72\xf5\xdd\xcd\xf9\xff\xa9\xc3\x0f\xe8\xda\x0b\xaf\x78\x3c\x76\x8c\x8d\x86\xb3\xf6\x43\x8a\x78\x62\xc7\x48\xe9\x22\xea\xa2\x4f\x9e\x06\x9f\x27\xaf\x8b\xc9\x33\x21\xbb\x18\xf6\xd9\xd0\xfa\xa7\xb8\xa4\x15\x79\x34\x8b\xce\x84\xdb\xfc\xe6\xfa\x66\x75\xd5\x55\xf4\xab\xa2\x50\x71\x43\x60\x3c\x7b\xc5\xed\x7c\x02\x1d\xe3\xf7\xb1\xa5\x1d\x8f\xe0\x02\x3a\x3e\xc1\xbd\x08\x6f\xb4\x93\x5b\x30\xfe\xd6\x2b\xf8\x54\x77\xe2\xdf\xdc\x3d\xf4\xbd\x88\xe6\xdd\x88\xd4\xb8\xae\x33\x81\x29\xac\x27\xb0\x81\x18\x2a\x71\x08\x9b\x95\x6e\xc7\x1d\xdb\x90\xb6\x76\xd7\xd4\xa0\x88\x1a\x24\xb0\x06\xc8\x56\x08\x1f\x9a\x35\x3a\x83\x1e\x09\xc2\x83\x10\x8d\x2b\x74\x61\xa8\x5f\xde\x66\x77\xd6\xe0\x2c\xfd\xf2\x3a\x18\x90\x2e\xd1\x51\x39\x4d\xf7\xea\x7e\xd4\x09\xf6\x4d\xbe\x0c\x53\xd8\x6c\x35\xbb\xfa\x23\x00\x00\xff\xff\x3d\xd9\xc4\x43\x0d\x17\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(2019, 7, 27, 10, 1, 12, 306300582, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(2019, 7, 27, 10, 1, 12, 306879513, time.UTC),
			uncompressedSize: 874,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x93\xcd\x6e\x9c\x40\x10\x84\xef\x3c\x45\x49\x7b\x0d\x1b\x61\x69\x2f\xdc\xa2\x38\x89\x2c\x25\xd6\x5e\x9c\x7b\x7b\x68\xf0\x28\xf3\x97\xe9\x66\xb3\x04\xf9\xdd\xa3\xd9\x5f\x36\xf6\x9c\x80\xaa\xaf\xa7\xa6\x80\xba\xae\xab\x15\x3c\x7b\x43\xe6\x85\x3b\x74\x9c\x5c\x9c\x3c\x07\xc5\x28\xdc\xe1\x79\xc2\x57\x37\xee\xa1\x11\x07\x47\xb5\x82\x89\x41\xc9\x06\xce\xb0\x9e\x06\x86\x67\xa5\x8e\x94\xd6\x15\x25\xfb\x93\xb3\xd8\x18\x5a\x50\x4a\xf2\x71\xd7\x54\xbf\x6c\xe8\x5a\xdc\x5f\xc6\x56\x67\x7b\x5b\x01\x81\x3c\xb7\xd7\xdd\xe7\x19\xb6\xc7\xfa\x91\x3c\x4b\x22\xc3\x78\x7d\x3d\x99\x0e\xb7\x2d\xe6\xf9\x56\x9d\x67\x70\xe8\x8a\x4d\x12\x9b\x32\x31\x73\x72\xd6\x90\xb4\x68\x2a\x40\xd8\xb1\xd1\x98\x8b\x02\x78\x52\xf3\xf2\x9d\x9e\xd9\xc9\xf1\xc1\x9b\x00\x15\xa0\xec\x93\x23\xe5\x13\xb2\x08\x5b\x96\xbb\xa1\xdf\xe3\x81\x73\x94\xb2\x2e\x5d\x5d\x98\xfa\x5d\xa6\xac\x43\x9b\x0b\xa1\x6d\xd6\x9b\x75\xb3\xb9\xd5\xb7\xa3\x73\xdb\xe8\xac\x99\x5a\x3c\xf4\x8f\x51\xb7\x99\xa5\xd4\x7a\x76\x51\x1e\x16\xf9\x6a\xd4\x1e\x9b\xe6\x0e\xc0\x0a\x3f\x68\x6f\xfd\xe8\xcb\x0e\x31\x4f\xe5\x95\x8e\xc2\x1f\x60\x03\x3c\x0f\xf4\x3c\x29\xcb\x12\x7c\xc0\xc6\xe3\x06\x14\xfb\x97\xd1\xc7\x8c\x18\x18\x56\xd9\x2f\xed\x09\x4d\x73\xd7\x34\x58\xe1\x9e\x7b\x1a\x9d\x22\xc5\x7c\xcd\xb5\x2a\x9e\xdd\xee\x78\xf9\x14\x4c\xf4\x87\x8f\x4c\x23\x06\x56\xb8\x38\x08\x62\x0f\x26\xf3\x82\xcc\xbf\x47\x16\x05\x85\x0e\x99\x25\xc5\x20\xbc\xbe\x0c\x2a\x53\x6f\x4e\x78\xec\xd3\x38\xcb\x41\xaf\x07\x58\x74\xbf\x8d\x59\xdb\x63\xba\x8b\x2c\x6c\xc6\x6c\x75\xfa\x1c\x83\xf2\x5e\xdb\x05\x97\xc7\xf0\x49\x9e\x84\xf3\xff\xcc\x49\xfa\x96\xe3\x98\xde\x6a\xe4\x5c\xfc\xb3\xcd\x76\x67\x1d\x0f\xfc\x45\x0c\x39\xd2\xc3\xaf\xd0\x93\x13\xae\xfe\x05\x00\x00\xff\xff\x5d\x9a\x63\xab\x6a\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(2019, 7, 27, 10, 1, 12, 307499265, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
