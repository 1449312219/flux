// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 7, 25, 14, 39, 51, 981008862, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(2019, 7, 25, 13, 36, 31, 869053652, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(2019, 7, 25, 14, 39, 51, 979604581, time.UTC),
			uncompressedSize: 5901,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x58\xdf\x6f\x1b\xb9\xf1\x7f\xf7\x5f\x31\x90\x1f\x92\x00\xd2\xca\x8a\xef\xfb\x45\xb1\x57\x1f\x90\x4b\x2e\x69\x9a\x8b\x63\xc4\x4d\x8b\x3e\xf5\x28\xee\x48\x4b\x88\x4b\x6e\x39\xdc\xd5\x09\xc2\xfd\xef\xc5\x90\xfb\x83\x2b\xc9\xc9\x21\x79\x88\x6d\xee\xfc\x9e\xe1\x67\x66\xb8\x58\x2c\xae\x44\xad\xfe\x89\x8e\x94\x35\x39\x88\xba\xa6\x65\xbb\xba\xda\x29\x53\xe4\xf0\x06\x6b\x6d\x0f\x15\x1a\x7f\x55\xa1\x17\x85\xf0\x22\xbf\x02\x30\xa2\xc2\x1c\x36\xba\xf9\xfd\x78\x04\xb5\x81\xec\x5e\x54\x48\xb5\x90\x08\x7f\xfc\xd1\x7d\x0f\x7f\xe6\x70\x3c\x4e\xbf\x1e\x8f\x80\xa6\x60\x32\xaa\x51\xb2\x30\x87\xb5\x56\x52\x50\x0e\xab\x2b\x00\x42\x8d\xd2\x5b\xc7\x5f\x00\x2a\xe1\x65\xf9\xab\x58\xa3\xa6\x78\x90\xea\x66\x6a\xef\x84\xc7\xed\x21\x7e\xf4\x87\x1a\x73\xf8\x8c\xd2\xa1\xf0\x78\x05\xe0\xb1\xaa\xb5\xf0\xd8\x09\x4b\x3c\xe0\x7f\xc2\x18\xeb\x85\x57\xd6\x0c\xc2\x01\x6a\x67\x2b\xf4\x25\x36\x94\x29\x9b\xd5\xd6\xf9\x1c\x66\xb7\x37\xb7\xab\x19\x5c\x83\x47\xad\x13\x0a\xf0\x16\x48\x3a\x51\x23\x2c\x2b\xf4\x4e\x49\x62\xe7\x6a\xab\x8c\x7f\x46\xc0\xcc\x59\x27\x58\x4f\x7c\x38\xf1\x02\xa0\x8f\x45\xf8\x1d\x5d\xab\x24\xbe\x92\xd2\x36\xc6\xdf\x4f\x09\x01\x5a\xab\x9b\x0a\x07\x51\x8b\x4e\xd4\x56\xf9\xc5\x0e\x0f\x83\x02\xe2\x28\xf8\x51\x61\x7f\x32\xca\x5b\x30\x4b\x11\x12\x9c\x50\x15\xb8\x11\x8d\xf6\x1f\x6d\x81\x39\xdc\xfc\x70\x73\x03\xd7\xb0\x2f\xd1\x40\xc5\xd6\x60\x01\x0e\x45\xb1\xb0\x46\x1f\xe6\xb0\x47\xd8\x5b\xf3\xcc\xc3\x1a\x41\xac\x35\x72\x3c\x64\x59\xd9\xe2\xaa\x13\x78\x0d\xff\x28\x15\x81\x22\x10\xe0\xab\x7a\x43\xd0\x10\x16\xb0\xb1\x0e\xb6\x68\xd0\x09\xaf\xcc\x16\x1e\x1f\xff\x06\x3b\x3c\x50\x06\xef\x0d\x7c\xf8\x0b\xc1\x4f\x77\xb0\xca\x56\x37\xf3\x41\x4a\xaf\x3b\xba\x40\x20\x1c\xa6\x76\x90\x65\x53\x0c\x62\x01\x02\x08\x6b\xc1\x45\xd1\x05\x0a\xf6\x38\x88\x91\xc2\xc0\xde\x29\xcf\x86\x66\x97\xe3\xb7\x45\x33\x04\x03\xab\xda\x1f\xde\x28\x97\x06\xb1\xc2\x42\x35\x55\x0e\x1f\xb1\xb2\xee\x90\xfa\x89\xb0\xb1\x5a\xdb\x3d\x7b\xd4\xa9\x56\x14\x5c\x6d\x88\xcf\x04\xc8\x86\xbc\xad\x14\x47\x60\x67\xec\xde\xfc\xa7\xb4\xe4\x69\x10\xb1\x51\x1a\xe7\xb0\x2f\x95\x2c\xe1\x60\x1b\xd8\x2b\xad\xa3\x53\xde\x42\x61\xf9\x9e\xf1\x31\x33\xf1\x2f\x0e\xec\xde\xb0\xd9\x83\x00\x87\xb5\x05\x27\x7c\x89\x0e\x7c\x29\x4c\xa7\x78\xab\x7c\xd9\xac\xc1\xf2\x21\x82\x56\x3b\xcc\xe0\xdf\xb6\x79\xa6\x35\x08\x4d\xb6\x57\x31\x0d\x36\x28\x0f\xca\x78\x1b\x78\xa4\x35\x5e\x28\x83\x6e\x0e\x6b\xd4\x76\x9f\xc1\x23\x8e\x51\x2d\xbd\xaf\x29\x5f\x2e\xa3\x9e\x4c\xda\x6a\xb9\x47\xd1\xe2\xde\xba\x1d\x2d\xb9\xd2\x96\x6b\x6d\xd7\xcb\x4a\x90\x47\xb7\x24\xe5\x71\x49\x5e\x98\x42\x68\x6b\x70\x41\xe8\x9b\x3a\xab\x8a\xeb\x60\xed\x42\x2c\x6a\xa7\x5a\xe1\x31\x94\x27\x3b\x3b\x28\xea\x53\x45\x54\x2e\xa4\x35\x1b\xb5\x1d\x3e\x01\xc4\x83\x8f\xa2\xce\x93\xc3\xf4\x9e\x2d\x12\xb6\xef\x4d\x5b\xb6\x6b\xd6\xb8\x8c\x42\xc6\xea\xfc\x66\xca\xf6\x8a\x4a\x3e\x29\x45\x8b\x20\xa0\x50\x9b\x0d\x3a\xc6\xd4\x5e\x42\x77\xe9\x46\xdc\x0c\x19\x8a\xe2\xd2\x1c\x31\xf6\xb4\xaa\xc0\x3e\x2b\x1b\xb5\xad\x44\x3d\x1a\xa2\x7c\x09\xc2\x00\x1a\xef\x0e\xc1\x87\xdf\x22\xd1\x6f\x73\x10\xa6\x80\xc6\x48\x5b\x31\x98\x07\xfe\xe8\xed\xc7\x90\x6d\x61\x8a\x41\x0a\x9a\x36\x48\x50\x48\x5d\xba\xcf\x32\xc0\x61\xf8\x8e\x0c\x24\x6c\xdf\xcc\x40\x00\x0a\x6f\x41\x55\x0c\xa3\xf0\xee\xe1\x5d\xc0\x08\x78\xce\x6e\x91\xda\x1a\x65\x46\xe5\xec\x5c\x8b\x4e\x6d\x94\x0c\x78\x0e\x75\xe3\x6a\x4b\x48\x2f\xfe\x44\x20\x07\x29\x11\x5d\x62\x14\x39\x40\xac\xef\x4f\x04\x0e\x84\xdb\x8e\xb7\xf8\x89\x88\x6d\xeb\x2d\xc3\x0b\x25\xa1\x99\x22\xf4\xf5\x13\x18\x7d\xce\x77\x01\xa3\xfb\x70\x0e\x17\xf5\xac\x3d\x24\x0d\xa4\x8b\xba\xc3\x00\xa3\xc6\xc2\x2c\xe7\x1e\x49\x7e\x06\xaa\x12\x5b\x8c\xd5\xcf\x0c\x19\xbc\x55\xa6\x08\x3e\x57\x8c\x3a\x0e\xe5\x58\xb5\x11\x71\x34\x0a\x42\xc6\x96\xc0\xca\x49\xe0\x31\x02\x84\x1f\x60\x81\x31\xa1\xb0\x72\x87\x2e\x40\x83\x3b\x03\x07\x2f\x86\xf0\xf5\xb9\xe4\x91\x80\xc7\x05\xd6\xec\xc5\x16\xd8\xda\x6c\xa0\x09\xaa\x72\xe8\x84\x2a\x1b\xc4\xc8\x22\xfc\xc8\x57\xd9\xea\x36\x7b\x39\xa5\x7d\x68\xb4\x7e\xb0\x5a\xc9\x43\x0e\xef\x37\xf7\xd6\x3f\x38\xa4\xd4\x13\x87\x64\x1b\x27\x91\x52\xa8\x77\xf8\xdf\x06\xc9\x4f\xce\x00\x64\xdd\xe4\xf0\x7f\x37\xd5\xe4\xb0\x0a\xdd\x20\x87\xff\xff\xe1\xa3\x1a\x27\x09\xeb\x52\xe6\xc5\x98\x9d\x87\x30\x55\xdc\xde\xdc\x72\x73\x55\x66\x63\x5d\x15\xca\x56\xe8\x81\x3a\xa9\xb1\x89\x8c\xcb\xcd\x1e\x22\x68\x3f\x08\x5f\xe6\xb0\x44\x2f\x43\x2c\x8a\x25\x51\xc9\x53\x8b\x8d\x73\x14\x68\xdb\x5d\x8f\xad\x6a\xd1\x80\x32\x31\x3c\xcf\x28\xf2\x10\x95\xcb\xc9\xad\x8e\x51\x10\xc5\x27\xa3\x0f\x39\x78\xd7\x20\x4b\xe3\x8e\x1e\x2e\xd4\xba\xc3\x21\xae\x80\x1a\xdd\xc6\x3a\x89\x2c\x34\xb6\x70\xee\xe0\x4f\x19\x9e\x76\xd9\xa9\xed\xad\x70\x9d\xed\x91\xec\xfb\xcc\x4f\xca\xe9\xbd\x91\xba\x09\x17\x9d\x07\x91\x88\xc7\x3d\x08\xc4\x4e\xf7\x8d\xc6\xdc\xb7\xe6\x1f\x99\xf5\xa4\x69\x0e\x60\x00\x05\x4a\x2d\x1c\x0f\x20\x6b\xdb\x26\xb5\xfa\x95\xae\x15\x6f\x73\xea\xbc\xb3\xd6\x2f\x33\xa2\xf2\x49\x07\x84\x99\x68\x9d\x8d\x88\x3a\x8b\x9a\xe7\x3d\x49\x22\x01\x4d\xab\x9c\x35\x01\xbf\x62\x6b\x98\x7d\xf8\xf2\xf3\x2f\xaf\x3f\xdd\xbf\x7d\xff\x6e\x16\x11\x6b\xce\xf1\xb0\x2d\x3a\x37\x6d\x2f\x89\x98\x80\xc8\xeb\x43\x04\x7f\xaf\x2f\xf9\x78\xd6\x17\xce\x7d\x1c\x8b\x93\x89\x9f\x74\x94\x21\x9a\xc7\xe8\x5e\x1b\x23\x4a\xd2\x39\x3b\xeb\x42\x4e\x12\x11\xa7\xfd\x37\x4d\x7a\x68\xbe\xfd\x20\x29\x0c\x08\xed\xd1\x19\x1e\x14\xcf\x2c\xde\x38\x5b\x71\x59\xf4\x0d\x76\x0e\x82\xb8\xdc\xba\x26\xc0\x61\xd0\x56\xee\xe8\x3c\xd9\x68\xda\xfc\x42\x5c\xc6\x70\x4f\xe2\xd2\x0a\xdd\xe0\x59\x4c\xbe\x55\xc4\xa7\x35\xd0\xb7\x88\xaf\x54\x00\x77\xa8\x69\x67\xfa\x4a\x6f\x7a\xa2\x2e\x99\x2a\x36\xe3\x09\xdd\x14\x1f\x46\xa3\x59\x65\x3e\xf1\x21\xa6\x21\x2e\x1c\x58\x30\x66\x4a\x21\x4b\x2c\x38\xb2\x69\x6a\x87\x21\x88\x93\xc8\x61\x99\x27\x52\xac\xeb\xa6\x9c\x84\xa1\x5b\x98\x02\xe3\x3c\x28\xe1\x41\x9f\x9a\xba\xd6\x07\x0e\x04\xa5\xa1\x18\x67\x0d\xbf\xb7\x6c\x65\xc3\x29\x0d\x05\x17\xb6\xbb\x90\x07\x28\xed\x3e\x2c\x33\xd6\x18\x94\x3e\xcc\x21\x7e\x1a\xba\xc5\x62\x70\x20\x4c\xa9\xac\xfc\x6e\x38\xca\xba\x16\x9d\x51\x2b\x33\xa9\x1b\x9e\x7c\x33\xc6\x2f\x9d\x86\xe4\x0b\xc5\xab\x36\x86\xe2\x75\x24\x7d\xff\x30\x71\x8a\x6f\x1d\xa1\x0f\xcb\xd2\x34\xb1\xa3\x0d\x3d\x3d\xaf\xa4\xde\x31\x65\x58\x5f\x12\x04\x4e\x2d\xee\xa8\xef\xae\x26\x33\x81\x22\xa8\x1a\x0a\xeb\x5c\x88\x9e\xc2\x22\x56\xd3\x3a\xe0\x7a\xe8\xc6\x61\x8b\x7b\xde\xaf\x46\x2f\x52\x5b\xfa\xbb\x15\xab\x90\x87\x88\x64\x99\x9b\x18\xc2\x58\x18\xf1\x7d\x51\x28\x77\x77\x86\xfa\xa9\x59\x9f\x93\x59\x60\x4c\xde\x97\xcf\xbf\xc6\x6d\x53\x98\x6d\xfc\xf6\x4e\xf9\xb0\x01\x91\xf2\xd6\x1d\x06\xb4\x7a\xcb\x73\xcc\x44\x39\xf7\xa0\xc6\xe9\xbb\xe3\x11\xb2\x77\xca\xb3\xa4\xf0\x68\x31\xa5\x58\x3b\x61\x64\xd9\x13\xfd\x1c\xfe\x8a\xcf\x17\x6a\x13\x8e\xf8\x6e\xd0\x25\xce\x5a\xf8\xc0\xf7\x18\xd2\x40\x7f\xb7\xca\x24\x0c\xb3\xf9\xac\x7b\x05\xd1\x84\x29\x3b\x4f\x02\xe7\xad\x6a\x2f\x4c\x28\x3f\x87\x9c\x55\x19\x07\xd0\x4a\x18\xb5\xe1\xd1\x84\x0b\x94\x54\x81\x2e\xfa\x7a\x32\xe4\x85\xed\xcd\x12\x42\x63\x0a\x74\x27\x01\x74\xa8\x85\x57\x2d\x42\x1d\xcc\xea\xd2\xbb\x9d\x04\xf1\xa4\xe0\x07\xe7\xa8\x59\x17\xca\xad\xe6\xf1\xe7\xcb\xe1\x49\x67\x0c\x4e\x78\xb2\xb9\x14\x9c\xf0\x0e\xd2\x47\xb5\xa7\xba\x20\xe0\x0b\xa1\xbb\xc4\xdf\x10\xba\x21\x73\x4c\x03\x97\xf9\x7f\xa9\x84\xba\x68\x00\xf2\x87\x5e\x42\x4f\x35\x3e\x4a\x5d\x04\x5d\xe4\x7b\xba\xb7\x1c\x50\x34\xe1\xa1\x83\xe3\xc4\xdd\x40\xf9\x93\x5d\x24\x8d\x55\x87\xab\x1d\x6a\xde\x7d\x05\x46\x7b\x8e\x4e\x16\x73\xdd\xfd\x75\x87\x07\x50\xc5\x4f\x03\xd9\x57\x5a\x65\x62\x15\x8b\x10\xbe\x71\x38\x59\x88\x2e\xe8\x0a\x9f\x0f\x8b\x81\x9e\x9e\xf6\xdd\xe0\xef\xbe\x0f\x40\x02\x89\xc2\xc0\xac\xa9\xc9\x3b\x14\xd5\xac\x07\xac\x44\xc8\x73\xcc\xb6\xd9\x1c\xfe\xc5\xf3\x3e\xbc\xd6\xb6\x29\x5e\x64\x61\xdf\xf3\x76\xc7\xf3\x1b\x41\x2d\x9c\x57\xb2\xd1\xc2\x41\xf7\xd4\xd0\x49\x39\xc5\xda\x4e\xeb\xdd\x9e\x78\xa5\x90\x2c\x2b\x0b\x7b\x44\x16\x17\x09\x51\xab\xe5\x49\xf5\x33\x5b\x50\x74\x27\xd6\x72\xf5\xf2\xf6\xfc\xff\xd4\xe1\x47\x74\xed\x85\x57\x3c\x1e\x3b\xc6\x46\xc3\x59\xfb\x31\x45\x3c\xb1\x63\xa4\x74\x11\x75\xd1\x27\x4f\x83\xcf\x92\xd7\xc5\xe4\x99\x90\x5d\x0c\xfb\x6c\x68\xfd\x53\x5c\xd2\x8a\x3c\x9a\x45\x67\xc2\x5d\x7e\x7b\x73\xbb\xba\xea\x2a\xfa\x55\x51\xa8\xb8\x21\x30\x9e\xbd\xe2\x76\x3e\x81\x8e\xf1\xfb\xd8\xd2\x8e\x47\x70\x01\x1d\xbf\xc1\xbd\x08\x6f\xb4\x27\xd7\x68\x7a\x1d\xae\xe1\x53\xdd\x89\x7f\x73\xff\xd8\xf7\x22\x9a\x77\x23\x52\xe3\xba\xce\x04\xa6\xb0\x9e\xc0\x06\x62\xa8\xc4\x21\x6c\x56\xba\x1d\x77\x6c\x43\xda\xda\x5d\x53\x83\x22\x6a\x90\xc0\x1a\x20\x5b\x21\x7c\x68\xd6\xe8\x0c\x7a\x24\x08\x0f\x42\x34\xae\xd0\x85\xa1\x7e\x79\x9b\xdd\x5b\x83\xb3\xf4\xcb\xeb\x60\x40\xba\x44\x47\xe5\x34\xdd\xab\xfb\x51\x27\xd8\x37\xf9\x32\x4c\x61\xb3\xd5\xec\xea\x7f\x01\x00\x00\xff\xff\xe5\xd1\xec\xd3\x0d\x17\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(2019, 7, 25, 13, 37, 39, 999312835, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(2019, 7, 25, 14, 18, 1, 501573117, time.UTC),
			uncompressedSize: 874,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x93\xcd\x6e\x9c\x40\x10\x84\xef\x3c\x45\x49\x7b\x0d\x1b\x61\x69\x2f\xdc\xa2\x38\x89\x2c\x25\xd6\x5e\x9c\x7b\x7b\x68\xf0\x28\xf3\x97\xe9\x66\xb3\x04\xf9\xdd\xa3\xd9\x5f\x36\xf6\x9c\x80\xaa\xaf\xa7\xa6\x80\xba\xae\xab\x15\x3c\x7b\x43\xe6\x85\x3b\x74\x9c\x5c\x9c\x3c\x07\xc5\x28\xdc\xe1\x79\xc2\x57\x37\xee\xa1\x11\x07\x47\xb5\x82\x89\x41\xc9\x06\xce\xb0\x9e\x06\x86\x67\xa5\x8e\x94\xd6\x15\x25\xfb\x93\xb3\xd8\x18\x5a\x50\x4a\xf2\x71\xd7\x54\xbf\x6c\xe8\x5a\xdc\x5f\xc6\x56\x67\x7b\x5b\x01\x81\x3c\xb7\xd7\xdd\xe7\x19\xb6\xc7\xfa\x91\x3c\x4b\x22\xc3\x78\x7d\x3d\x99\x0e\xb7\x2d\xe6\xf9\x56\x9d\x67\x70\xe8\x8a\x4d\x12\x9b\x32\x31\x73\x72\xd6\x90\xb4\x68\x2a\x40\xd8\xb1\xd1\x98\x8b\x02\x78\x52\xf3\xf2\x9d\x9e\xd9\xc9\xf1\xc1\x9b\x00\x15\xa0\xec\x93\x23\xe5\x13\xb2\x08\x5b\x96\xbb\xa1\xdf\xe3\x81\x73\x94\xb2\x2e\x5d\x5d\x98\xfa\x5d\xa6\xac\x43\x9b\x0b\xa1\x6d\xd6\x9b\x75\xb3\xb9\xd5\xb7\xa3\x73\xdb\xe8\xac\x99\x5a\x3c\xf4\x8f\x51\xb7\x99\xa5\xd4\x7a\x76\x51\x1e\x16\xf9\x6a\xd4\x1e\x9b\xe6\x0e\xc0\x0a\x3f\x68\x6f\xfd\xe8\xcb\x0e\x31\x4f\xe5\x95\x8e\xc2\x1f\x60\x03\x3c\x0f\xf4\x3c\x29\xcb\x12\x7c\xc0\xc6\xe3\x06\x14\xfb\x97\xd1\xc7\x8c\x18\x18\x56\xd9\x2f\xed\x09\x4d\x73\xd7\x34\x58\xe1\x9e\x7b\x1a\x9d\x22\xc5\x7c\xcd\xb5\x2a\x9e\xdd\xee\x78\xf9\x14\x4c\xf4\x87\x8f\x4c\x23\x06\x56\xb8\x38\x08\x62\x0f\x26\xf3\x82\xcc\xbf\x47\x16\x05\x85\x0e\x99\x25\xc5\x20\xbc\xbe\x0c\x2a\x53\x6f\x4e\x78\xec\xd3\x38\xcb\x41\xaf\x07\x58\x74\xbf\x8d\x59\xdb\x63\xba\x8b\x2c\x6c\xc6\x6c\x75\xfa\x1c\x83\xf2\x5e\xdb\x05\x97\xc7\xf0\x49\x9e\x84\xf3\xff\xcc\x49\xfa\x96\xe3\x98\xde\x6a\xe4\x5c\xfc\xb3\xcd\x76\x67\x1d\x0f\xfc\x45\x0c\x39\xd2\xc3\xaf\xd0\x93\x13\xae\xfe\x05\x00\x00\xff\xff\x5d\x9a\x63\xab\x6a\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(2019, 7, 25, 13, 37, 39, 995569443, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
